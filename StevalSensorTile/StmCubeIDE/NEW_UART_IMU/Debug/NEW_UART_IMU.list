
NEW_UART_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd4  08005dd4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ddc  08005ddc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1a8  2000007c  08005e60  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a224  08005e60  0002a224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114fe  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002389  00000000  00000000  000315aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262e1  00000000  00000000  000353d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efda  00000000  00000000  0005b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef35f  00000000  00000000  0006a68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001599ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  00159a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d38 	.word	0x08005d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005d38 	.word	0x08005d38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fe3c 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f8c3 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f9a1 	bl	80008bc <MX_GPIO_Init>
  MX_SPI2_Init();
 800057a:	f000 f905 	bl	8000788 <MX_SPI2_Init>
  MX_UART5_Init();
 800057e:	f000 f941 	bl	8000804 <MX_UART5_Init>
  MX_USART2_Init();
 8000582:	f000 f96f 	bl	8000864 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	Error_Handler_1();
 8000586:	f000 fa99 	bl	8000abc <Error_Handler_1>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	484b      	ldr	r0, [pc, #300]	; (80006c0 <main+0x158>)
 8000592:	f001 f9fd 	bl	8001990 <HAL_GPIO_WritePin>

	lsm6dsm_init();
 8000596:	f000 facf 	bl	8000b38 <lsm6dsm_init>
	HAL_Delay(200);
 800059a:	20c8      	movs	r0, #200	; 0xc8
 800059c:	f000 fe9a 	bl	80012d4 <HAL_Delay>

	whoami(); // check if device can be found
 80005a0:	f000 fa20 	bl	80009e4 <whoami>
//	sftwRESET();
//	lsm6dsm_init();
//	HAL_Delay(200);

	// set UART5 interrupt
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 80005a4:	2207      	movs	r2, #7
 80005a6:	4947      	ldr	r1, [pc, #284]	; (80006c4 <main+0x15c>)
 80005a8:	4847      	ldr	r0, [pc, #284]	; (80006c8 <main+0x160>)
 80005aa:	f003 fd2b 	bl	8004004 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // Switch on LED
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b4:	4845      	ldr	r0, [pc, #276]	; (80006cc <main+0x164>)
 80005b6:	f001 f9eb 	bl	8001990 <HAL_GPIO_WritePin>
	i=0;
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <main+0x168>)
 80005bc:	2200      	movs	r2, #0
 80005be:	801a      	strh	r2, [r3, #0]
	uint8_t result=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
  	uint8_t bufp=0x00;
 80005c4:	2300      	movs	r3, #0
 80005c6:	717b      	strb	r3, [r7, #5]
  	uint8_t reg=0x1e; // register of IMU where DRDY signal can be found
 80005c8:	231e      	movs	r3, #30
 80005ca:	71bb      	strb	r3, [r7, #6]
	  // polling data
	  if(1) // flag
	  {

		  // check if new data is available
		  	lsm6ds3_read(&hspi2, reg, &bufp, 1);
 80005cc:	1d7a      	adds	r2, r7, #5
 80005ce:	79b9      	ldrb	r1, [r7, #6]
 80005d0:	2301      	movs	r3, #1
 80005d2:	4840      	ldr	r0, [pc, #256]	; (80006d4 <main+0x16c>)
 80005d4:	f000 fb58 	bl	8000c88 <lsm6ds3_read>
		  	result=isKthBitSet(bufp, 1);
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 faef 	bl	8000bc0 <isKthBitSet>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]

		  	if(result)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0ef      	beq.n	80005cc <main+0x64>
		  	{
		  		// memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
		  		// interrupt if PWM occurs
		  		if(i<4096)
 80005ec:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <main+0x168>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005f4:	d260      	bcs.n	80006b8 <main+0x150>
		  		{

		  			lsm6dsm_acceleration_raw_get(data_raw_acceleration);
 80005f6:	4838      	ldr	r0, [pc, #224]	; (80006d8 <main+0x170>)
 80005f8:	f000 fafa 	bl	8000bf0 <lsm6dsm_acceleration_raw_get>
		  			acc_x=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[0]);
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <main+0x170>)
 80005fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fac4 	bl	8000b90 <lsm6dsm_from_fs4g_to_mg>
 8000608:	eef0 7a40 	vmov.f32	s15, s0
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <main+0x174>)
 800060e:	edc3 7a00 	vstr	s15, [r3]
		  			acc_y=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[1]);
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <main+0x170>)
 8000614:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fab9 	bl	8000b90 <lsm6dsm_from_fs4g_to_mg>
 800061e:	eef0 7a40 	vmov.f32	s15, s0
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <main+0x178>)
 8000624:	edc3 7a00 	vstr	s15, [r3]
		  			acc_z=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[2]);
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <main+0x170>)
 800062a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 faae 	bl	8000b90 <lsm6dsm_from_fs4g_to_mg>
 8000634:	eef0 7a40 	vmov.f32	s15, s0
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <main+0x17c>)
 800063a:	edc3 7a00 	vstr	s15, [r3]
		  			accel_data_x[i]=(int16_t)acc_x;
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x174>)
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <main+0x168>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064e:	ee17 3a90 	vmov	r3, s15
 8000652:	b219      	sxth	r1, r3
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <main+0x180>)
 8000656:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			accel_data_y[i]=(int16_t)acc_y;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <main+0x178>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x168>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066a:	ee17 3a90 	vmov	r3, s15
 800066e:	b219      	sxth	r1, r3
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <main+0x184>)
 8000672:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			accel_data_z[i]=(int16_t)acc_z;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <main+0x17c>)
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <main+0x168>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	b219      	sxth	r1, r3
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0x188>)
 800068e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			time[i]=HAL_GetTick();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <main+0x168>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461c      	mov	r4, r3
 8000698:	f000 fe10 	bl	80012bc <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <main+0x18c>)
 80006a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  			i++;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <main+0x168>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <main+0x168>)
 80006ae:	801a      	strh	r2, [r3, #0]
		  			flag=0;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0x190>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e789      	b.n	80005cc <main+0x64>

		  		}
		  		else{
		  			i=0;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <main+0x168>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	801a      	strh	r2, [r3, #0]
	  if(1) // flag
 80006be:	e785      	b.n	80005cc <main+0x64>
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000098 	.word	0x20000098
 80006c8:	2000a128 	.word	0x2000a128
 80006cc:	48001800 	.word	0x48001800
 80006d0:	200000a0 	.word	0x200000a0
 80006d4:	2000a0b8 	.word	0x2000a0b8
 80006d8:	2000a0a4 	.word	0x2000a0a4
 80006dc:	2000a204 	.word	0x2000a204
 80006e0:	2000a120 	.word	0x2000a120
 80006e4:	2000a20c 	.word	0x2000a20c
 80006e8:	200000a4 	.word	0x200000a4
 80006ec:	200020a4 	.word	0x200020a4
 80006f0:	200040a4 	.word	0x200040a4
 80006f4:	200060a4 	.word	0x200060a4
 80006f8:	20000008 	.word	0x20000008

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	; 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2244      	movs	r2, #68	; 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fede 	bl	80054cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000722:	f001 f973 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800072c:	f000 fb3c 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000730:	2310      	movs	r3, #16
 8000732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073c:	2360      	movs	r3, #96	; 0x60
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f9c5 	bl	8001ad8 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000754:	f000 fb28 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fd97 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800077c:	f000 fb14 	bl	8000da8 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3758      	adds	r7, #88	; 0x58
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_SPI2_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_SPI2_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_SPI2_Init+0x74>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI2_Init+0x74>)
 800079c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI2_Init+0x74>)
 80007a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI2_Init+0x74>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI2_Init+0x74>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI2_Init+0x74>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI2_Init+0x74>)
 80007c0:	2208      	movs	r2, #8
 80007c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SPI2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI2_Init+0x74>)
 80007d8:	2207      	movs	r2, #7
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI2_Init+0x74>)
 80007ea:	f002 fc1d 	bl	8003028 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 fad8 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000a0b8 	.word	0x2000a0b8
 8000800:	40003800 	.word	0x40003800

08000804 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_UART5_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_UART5_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_UART5_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_UART5_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_UART5_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_UART5_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_UART5_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_UART5_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_UART5_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_UART5_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_UART5_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_UART5_Init+0x58>)
 8000848:	f003 fafa 	bl	8003e40 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 faa9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000a128 	.word	0x2000a128
 8000860:	40005000 	.word	0x40005000

08000864 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_USART2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_USART2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_Init+0x50>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART2_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_USART2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_USART2_Init+0x50>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_USART2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_USART2_Init+0x50>)
 80008a2:	f004 fbcf 	bl	8005044 <HAL_USART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 fa7c 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000a1b0 	.word	0x2000a1b0
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a3f      	ldr	r2, [pc, #252]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a39      	ldr	r2, [pc, #228]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <MX_GPIO_Init+0x118>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800091a:	f001 f8cd 	bl	8001ab8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_GPIO_Init+0x118>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <MX_GPIO_Init+0x118>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	4820      	ldr	r0, [pc, #128]	; (80009d8 <MX_GPIO_Init+0x11c>)
 8000956:	f001 f81b 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <MX_GPIO_Init+0x120>)
 8000962:	f001 f815 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <MX_GPIO_Init+0x11c>)
 8000980:	f000 fe5c 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWMI_RAS_Pin */
  GPIO_InitStruct.Pin = PWMI_RAS_Pin;
 8000984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_GPIO_Init+0x124>)
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWMI_RAS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_GPIO_Init+0x120>)
 800099a:	f000 fe4f 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <MX_GPIO_Init+0x120>)
 80009b8:	f000 fe40 	bl	800163c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2017      	movs	r0, #23
 80009c2:	f000 fd86 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009c6:	2017      	movs	r0, #23
 80009c8:	f000 fd9f 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48001800 	.word	0x48001800
 80009dc:	48000400 	.word	0x48000400
 80009e0:	10110000 	.word	0x10110000

080009e4 <whoami>:
	lsm6ds3_write(&hspi2,reg, &bufp, len);
}


void whoami(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	// adr_WHO_AM_I has to be 0x6a
	uint8_t who_am_i=0x00;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71bb      	strb	r3, [r7, #6]
	uint8_t who_am_i_reg=0x0f;
 80009ee:	230f      	movs	r3, #15
 80009f0:	71fb      	strb	r3, [r7, #7]

	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 80009f2:	1dba      	adds	r2, r7, #6
 80009f4:	79f9      	ldrb	r1, [r7, #7]
 80009f6:	2301      	movs	r3, #1
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <whoami+0x40>)
 80009fa:	f000 f945 	bl	8000c88 <lsm6ds3_read>

	if(who_am_i!=0x6a)
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	2b6a      	cmp	r3, #106	; 0x6a
 8000a02:	d00a      	beq.n	8000a1a <whoami+0x36>
		// error when jumping in here
		// device not found!!!
		// possible problems can be wrong DEBUG port is used
		while(1)
		{
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000a04:	1dba      	adds	r2, r7, #6
 8000a06:	79f9      	ldrb	r1, [r7, #7]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <whoami+0x40>)
 8000a0c:	f000 f93c 	bl	8000c88 <lsm6ds3_read>
			if(who_am_i==0x6a){break;}
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	2b6a      	cmp	r3, #106	; 0x6a
 8000a14:	d000      	beq.n	8000a18 <whoami+0x34>
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000a16:	e7f5      	b.n	8000a04 <whoami+0x20>
			if(who_am_i==0x6a){break;}
 8000a18:	bf00      	nop
		}
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000a0b8 	.word	0x2000a0b8

08000a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0c6      	sub	sp, #280	; 0x118
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	6018      	str	r0, [r3, #0]
	// __NOP(); // used to debug the Callback
	int size;
	char data_s[256];
	uint16_t length_data_arry=4096;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

	// for(int j=0; j<length_data_arry;j++)
	for(int j=0; j<i;j++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a40:	e01c      	b.n	8000a7c <HAL_UART_RxCpltCallback+0x54>
	{
		size=sprintf(data_s, "%05d\n",accel_data_z[j]);
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_UART_RxCpltCallback+0x7c>)
 8000a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <HAL_UART_RxCpltCallback+0x80>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 fd41 	bl	80054dc <siprintf>
 8000a5a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		HAL_UART_Transmit(&huart5,(uint8_t *)data_s, size, Timeout);
 8000a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_UART_RxCpltCallback+0x84>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f107 010c 	add.w	r1, r7, #12
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <HAL_UART_RxCpltCallback+0x88>)
 8000a6e:	f003 fa35 	bl	8003edc <HAL_UART_Transmit>
	for(int j=0; j<i;j++)
 8000a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a76:	3301      	adds	r3, #1
 8000a78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_UART_RxCpltCallback+0x8c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a86:	4293      	cmp	r3, r2
 8000a88:	dbdb      	blt.n	8000a42 <HAL_UART_RxCpltCallback+0x1a>
	//		size = sprintf(data_s, "X: %d,Y: %d,Z :%d\r\n",accel_data_x[j],accel_data_y[j],accel_data_z[j]);
	//		HAL_UART_Transmit(&huart5,(uint8_t *)data_s, size, Timeout);
	}
	i=0;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_UART_RxCpltCallback+0x8c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 8000a90:	2207      	movs	r2, #7
 8000a92:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <HAL_UART_RxCpltCallback+0x90>)
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <HAL_UART_RxCpltCallback+0x88>)
 8000a96:	f003 fab5 	bl	8004004 <HAL_UART_Receive_IT>
}
 8000a9a:	bf00      	nop
 8000a9c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200040a4 	.word	0x200040a4
 8000aa8:	08005d50 	.word	0x08005d50
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	2000a128 	.word	0x2000a128
 8000ab4:	200000a0 	.word	0x200000a0
 8000ab8:	20000098 	.word	0x20000098

08000abc <Error_Handler_1>:

static void Error_Handler_1(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	481b      	ldr	r0, [pc, #108]	; (8000b34 <Error_Handler_1+0x78>)
 8000ac8:	f000 ff62 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000acc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ad0:	f000 fc00 	bl	80012d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <Error_Handler_1+0x78>)
 8000adc:	f000 ff58 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000ae0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ae4:	f000 fbf6 	bl	80012d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <Error_Handler_1+0x78>)
 8000af0:	f000 ff4e 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000af4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000af8:	f000 fbec 	bl	80012d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <Error_Handler_1+0x78>)
 8000b04:	f000 ff44 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000b08:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b0c:	f000 fbe2 	bl	80012d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <Error_Handler_1+0x78>)
 8000b18:	f000 ff3a 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000b1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b20:	f000 fbd8 	bl	80012d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <Error_Handler_1+0x78>)
 8000b2c:	f000 ff30 	bl	8001990 <HAL_GPIO_WritePin>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	48001800 	.word	0x48001800

08000b38 <lsm6dsm_init>:

void lsm6dsm_init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	uint32_t len =1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
	uint8_t bufp;
	uint8_t read_reg;
	// LSM6DS3H_REG_CTRL3_C
	// set 3-wire SPI mode
	// set block data update
	bufp=BDU|SIM|IF_INC; //0b01001100;
 8000b42:	234c      	movs	r3, #76	; 0x4c
 8000b44:	70bb      	strb	r3, [r7, #2]
	uint8_t reg=LSM6DS3H_REG_CTRL3_C;
 8000b46:	2312      	movs	r3, #18
 8000b48:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2,reg, &bufp, len);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	1cba      	adds	r2, r7, #2
 8000b50:	78f9      	ldrb	r1, [r7, #3]
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <lsm6dsm_init+0x54>)
 8000b54:	f000 f8de 	bl	8000d14 <lsm6ds3_write>
	// LSM6DS3H_REG_CTRL1_XL
	// Values for acceleration
	// ODR_XL set to 6.66kHz
	// FS of accelerometer set to +- 4g
	// BW0_XL BW set to 400Hz
	bufp=ODR_6660Hz|FS_4g; // 0b10101000;
 8000b58:	23a8      	movs	r3, #168	; 0xa8
 8000b5a:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL1_XL;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	1cba      	adds	r2, r7, #2
 8000b66:	78f9      	ldrb	r1, [r7, #3]
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <lsm6dsm_init+0x54>)
 8000b6a:	f000 f8d3 	bl	8000d14 <lsm6ds3_write>

	// disable latched mode
	bufp=DRDY_LATCHED;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_DRDY_PULSE_CFG;
 8000b72:	230b      	movs	r3, #11
 8000b74:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	1cba      	adds	r2, r7, #2
 8000b7c:	78f9      	ldrb	r1, [r7, #3]
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <lsm6dsm_init+0x54>)
 8000b80:	f000 f8c8 	bl	8000d14 <lsm6ds3_write>

}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000a0b8 	.word	0x2000a0b8

08000b90 <lsm6dsm_from_fs4g_to_mg>:
{
  return ((float)lsb * 0.061f);
}

float lsm6dsm_from_fs4g_to_mg(int16_t lsb)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb * 0.122f);
 8000b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000bbc <lsm6dsm_from_fs4g_to_mg+0x2c>
 8000baa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bae:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	3df9db23 	.word	0x3df9db23

08000bc0 <isKthBitSet>:
{
  return ((float)lsb * 17.50f);
}

uint8_t isKthBitSet(int n, int k)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
    if (n & (1 << (k - 1)))
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	fa42 f303 	asr.w	r3, r2, r3
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <isKthBitSet+0x20>
        {return 1;}
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <isKthBitSet+0x22>
    else
        {return 0;}
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <lsm6dsm_acceleration_raw_get>:
	return 0;

}

int32_t lsm6dsm_acceleration_raw_get(int16_t *val)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint8_t buff[6];
  int32_t ret;

  lsm6ds3_read(&hspi2, LSM6DS3H_REG_OUTX_L_XL, &buff, 6);
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	2128      	movs	r1, #40	; 0x28
 8000c00:	4820      	ldr	r0, [pc, #128]	; (8000c84 <lsm6dsm_acceleration_raw_get+0x94>)
 8000c02:	f000 f841 	bl	8000c88 <lsm6ds3_read>
  val[0] = (int16_t)buff[1];
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	7b3b      	ldrb	r3, [r7, #12]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	b212      	sxth	r2, r2
 8000c30:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3302      	adds	r3, #2
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	7bbb      	ldrb	r3, [r7, #14]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	b212      	sxth	r2, r2
 8000c4e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000c50:	7c7a      	ldrb	r2, [r7, #17]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	b212      	sxth	r2, r2
 8000c58:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	7c3b      	ldrb	r3, [r7, #16]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3304      	adds	r3, #4
 8000c74:	b212      	sxth	r2, r2
 8000c76:	801a      	strh	r2, [r3, #0]

  return ret;
 8000c78:	697b      	ldr	r3, [r7, #20]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000a0b8 	.word	0x2000a0b8

08000c88 <lsm6ds3_read>:
	return 0;

}

static int32_t lsm6ds3_read(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	461a      	mov	r2, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	72fb      	strb	r3, [r7, #11]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	813b      	strh	r3, [r7, #8]
	reg |= 0x80; // set MSB to one for read operation
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <lsm6ds3_read+0x80>)
 8000cae:	f000 fe6f 	bl	8001990 <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <lsm6ds3_read+0x84>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f107 010b 	add.w	r1, r7, #11
 8000cba:	2201      	movs	r2, #1
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f002 fa56 	bl	800316e <HAL_SPI_Transmit>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <lsm6ds3_read+0x88>)
 8000cc8:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Receive(handle, bufp, len, TIMEOUT_DURATION);
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <lsm6ds3_read+0x84>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	893a      	ldrh	r2, [r7, #8]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f002 fbb9 	bl	800344a <HAL_SPI_Receive>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <lsm6ds3_read+0x88>)
 8000cde:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <lsm6ds3_read+0x80>)
 8000ce8:	f000 fe52 	bl	8001990 <HAL_GPIO_WritePin>
	while(status_spi!=HAL_OK)
 8000cec:	bf00      	nop
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <lsm6ds3_read+0x88>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <lsm6ds3_read+0x74>
	{
		// spi communication isnt finished or something failed
		return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e000      	b.n	8000cfe <lsm6ds3_read+0x76>
	}
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	2000a11d 	.word	0x2000a11d

08000d14 <lsm6ds3_write>:

static int32_t lsm6ds3_write(void *handle, uint8_t reg,uint8_t *bufp,uint16_t len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	460b      	mov	r3, r1
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	4613      	mov	r3, r2
 8000d26:	813b      	strh	r3, [r7, #8]
	reg |= 0x00;
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <lsm6ds3_write+0x68>)
 8000d34:	f000 fe2c 	bl	8001990 <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <lsm6ds3_write+0x6c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f107 010b 	add.w	r1, r7, #11
 8000d40:	2201      	movs	r2, #1
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f002 fa13 	bl	800316e <HAL_SPI_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <lsm6ds3_write+0x70>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Transmit(handle, bufp, len, TIMEOUT_DURATION);
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <lsm6ds3_write+0x6c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	893a      	ldrh	r2, [r7, #8]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f002 fa08 	bl	800316e <HAL_SPI_Transmit>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <lsm6ds3_write+0x70>)
 8000d64:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <lsm6ds3_write+0x68>)
 8000d6e:	f000 fe0f 	bl	8001990 <HAL_GPIO_WritePin>

  return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	20000004 	.word	0x20000004
 8000d84:	2000a11d 	.word	0x2000a11d

08000d88 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
//		accel_data_y[i]=(int16_t)acc_y;
//		accel_data_z[i]=(int16_t)acc_z;
//		i++;
//	}
//	else{i=0;}
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000008 	.word	0x20000008

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_SPI_MspInit+0x7c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d128      	bne.n	8000e70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8000e4e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e60:	2305      	movs	r3, #5
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_SPI_MspInit+0x84>)
 8000e6c:	f000 fbe6 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000400 	.word	0x48000400

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ac      	sub	sp, #176	; 0xb0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2288      	movs	r2, #136	; 0x88
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fb11 	bl	80054cc <memset>
  if(huart->Instance==UART5)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <HAL_UART_MspInit+0x104>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d164      	bne.n	8000f7e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fbf5 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ecc:	f7ff ff6c 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eda:	6593      	str	r3, [r2, #88]	; 0x58
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_UART_MspInit+0x108>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f30:	2308      	movs	r3, #8
 8000f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x10c>)
 8000f3e:	f000 fb7d 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f66:	4619      	mov	r1, r3
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <HAL_UART_MspInit+0x110>)
 8000f6a:	f000 fb67 	bl	800163c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2035      	movs	r0, #53	; 0x35
 8000f74:	f000 faad 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f78:	2035      	movs	r0, #53	; 0x35
 8000f7a:	f000 fac6 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	37b0      	adds	r7, #176	; 0xb0
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40005000 	.word	0x40005000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48000800 	.word	0x48000800

08000f98 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ac      	sub	sp, #176	; 0xb0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2288      	movs	r2, #136	; 0x88
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fa87 	bl	80054cc <memset>
  if(husart->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_USART_MspInit+0xb0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d13b      	bne.n	8001040 <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fb6b 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f7ff fee2 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_USART_MspInit+0xb4>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_USART_MspInit+0xb4>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_USART_MspInit+0xb4>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_USART_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_USART_MspInit+0xb4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_USART_MspInit+0xb4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8001014:	231c      	movs	r3, #28
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fafe 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	37b0      	adds	r7, #176	; 0xb0
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8fa 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010ac:	f000 fc88 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <UART5_IRQHandler+0x10>)
 80010ba:	f002 ffe7 	bl	800408c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000a128 	.word	0x2000a128

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f004 f9be 	bl	8005478 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20018000 	.word	0x20018000
 8001128:	00000400 	.word	0x00000400
 800112c:	2000a0ac 	.word	0x2000a0ac
 8001130:	2000a228 	.word	0x2000a228

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <SystemInit+0x5c>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <SystemInit+0x5c>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <SystemInit+0x60>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <SystemInit+0x60>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <SystemInit+0x60>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <SystemInit+0x60>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <SystemInit+0x60>)
 8001160:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001164:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001168:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <SystemInit+0x60>)
 800116c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001170:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SystemInit+0x60>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <SystemInit+0x60>)
 8001178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SystemInit+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	40021000 	.word	0x40021000

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff ffca 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011a2:	e003      	b.n	80011ac <LoopCopyDataInit>

080011a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011aa:	3104      	adds	r1, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80011b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011b4:	d3f6      	bcc.n	80011a4 <CopyDataInit>
	ldr	r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011b8:	e002      	b.n	80011c0 <LoopFillZerobss>

080011ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011bc:	f842 3b04 	str.w	r3, [r2], #4

080011c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LoopForever+0x16>)
	cmp	r2, r3
 80011c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011c4:	d3f9      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f004 f95d 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7ff f9cd 	bl	8000568 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011d4:	08005de4 	.word	0x08005de4
	ldr	r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011dc:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80011e0:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80011e4:	2000a224 	.word	0x2000a224

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>

080011ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f961 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f80e 	bl	800121c <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e001      	b.n	8001210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120c:	f7ff fdd2 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_InitTick+0x6c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d023      	beq.n	8001278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_InitTick+0x70>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f96d 	bl	8001526 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d809      	bhi.n	800126c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f937 	bl	80014d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_InitTick+0x74>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e007      	b.n	800127c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e001      	b.n	800127c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000014 	.word	0x20000014
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20000010 	.word	0x20000010

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000014 	.word	0x20000014
 80012b8:	2000a210 	.word	0x2000a210

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000a210 	.word	0x2000a210

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000014 	.word	0x20000014

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2204      	movs	r2, #4
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e022      	b.n	80015ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020e 	bic.w	r2, r2, #14
 8001576:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f003 021c 	and.w	r2, r3, #28
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d005      	beq.n	80015de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2204      	movs	r2, #4
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e029      	b.n	8001632 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 020e 	bic.w	r2, r2, #14
 80015ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f003 021c 	and.w	r2, r3, #28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    }
  }
  return status;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	e17f      	b.n	800194c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8171 	beq.w	8001946 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d00b      	beq.n	8001684 <HAL_GPIO_Init+0x48>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d007      	beq.n	8001684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001678:	2b11      	cmp	r3, #17
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b12      	cmp	r3, #18
 8001682:	d130      	bne.n	80016e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ba:	2201      	movs	r2, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0201 	and.w	r2, r3, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d118      	bne.n	8001724 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x128>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d123      	bne.n	80017ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	6939      	ldr	r1, [r7, #16]
 80017a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80ac 	beq.w	8001946 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_GPIO_Init+0x330>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a5e      	ldr	r2, [pc, #376]	; (800196c <HAL_GPIO_Init+0x330>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b5c      	ldr	r3, [pc, #368]	; (800196c <HAL_GPIO_Init+0x330>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001806:	4a5a      	ldr	r2, [pc, #360]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x242>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x338>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x23e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_GPIO_Init+0x33c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x23a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_GPIO_Init+0x340>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x236>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x344>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x232>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_GPIO_Init+0x348>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x22e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <HAL_GPIO_Init+0x34c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x22a>
 8001862:	2306      	movs	r3, #6
 8001864:	e00c      	b.n	8001880 <HAL_GPIO_Init+0x244>
 8001866:	2307      	movs	r3, #7
 8001868:	e00a      	b.n	8001880 <HAL_GPIO_Init+0x244>
 800186a:	2305      	movs	r3, #5
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x244>
 800186e:	2304      	movs	r3, #4
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x244>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x244>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x244>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x244>
 800187e:	2300      	movs	r3, #0
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001890:	4937      	ldr	r1, [pc, #220]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_GPIO_Init+0x350>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a32      	ldr	r2, [pc, #200]	; (800198c <HAL_GPIO_Init+0x350>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_GPIO_Init+0x350>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_GPIO_Init+0x350>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_GPIO_Init+0x350>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_GPIO_Init+0x350>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_GPIO_Init+0x350>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_GPIO_Init+0x350>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f ae78 	bne.w	800164c <HAL_GPIO_Init+0x10>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000
 8001974:	48000400 	.word	0x48000400
 8001978:	48000800 	.word	0x48000800
 800197c:	48000c00 	.word	0x48000c00
 8001980:	48001000 	.word	0x48001000
 8001984:	48001400 	.word	0x48001400
 8001988:	48001800 	.word	0x48001800
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9d2 	bl	8000d88 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6053      	str	r3, [r2, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e3d4      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4ba1      	ldr	r3, [pc, #644]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af4:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80e4 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4a>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	f040 808b 	bne.w	8001c30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	f040 8087 	bne.w	8001c30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b22:	4b93      	ldr	r3, [pc, #588]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x62>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e3ac      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_RCC_OscConfig+0x7c>
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b52:	e005      	b.n	8001b60 <HAL_RCC_OscConfig+0x88>
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d223      	bcs.n	8001bac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fd41 	bl	80025f0 <RCC_SetFlashLatencyFromMSIRange>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e38d      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b78:	4b7d      	ldr	r3, [pc, #500]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a7c      	ldr	r2, [pc, #496]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4977      	ldr	r1, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4972      	ldr	r1, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
 8001baa:	e025      	b.n	8001bf8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6f      	ldr	r2, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	496a      	ldr	r1, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bca:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4965      	ldr	r1, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fd01 	bl	80025f0 <RCC_SetFlashLatencyFromMSIRange>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e34d      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf8:	f000 fc36 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	495a      	ldr	r1, [pc, #360]	; (8001d74 <HAL_RCC_OscConfig+0x29c>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x2a0>)
 8001c16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c18:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <HAL_RCC_OscConfig+0x2a4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fafd 	bl	800121c <HAL_InitTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d052      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	e331      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d032      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c38:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb3a 	bl	80012bc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb36 	bl	80012bc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e31a      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	493b      	ldr	r1, [pc, #236]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	4936      	ldr	r1, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e01a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb07 	bl	80012bc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fb03 	bl	80012bc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e2e7      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1da>
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d074      	beq.n	8001dca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x21a>
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d10e      	bne.n	8001d0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d064      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d160      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e2c4      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x24a>
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e01d      	b.n	8001d5e <HAL_RCC_OscConfig+0x286>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x26e>
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x286>
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x298>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff faa9 	bl	80012bc <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6c:	e011      	b.n	8001d92 <HAL_RCC_OscConfig+0x2ba>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005d58 	.word	0x08005d58
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fa9c 	bl	80012bc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e280      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d92:	4baf      	ldr	r3, [pc, #700]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2a8>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa8c 	bl	80012bc <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fa88 	bl	80012bc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e26c      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dba:	4ba5      	ldr	r3, [pc, #660]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2d0>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d060      	beq.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x310>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d119      	bne.n	8001e16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d116      	bne.n	8001e16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	4b99      	ldr	r3, [pc, #612]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x328>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e249      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b93      	ldr	r3, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	4990      	ldr	r1, [pc, #576]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e14:	e040      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d023      	beq.n	8001e66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8b      	ldr	r2, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fa47 	bl	80012bc <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fa43 	bl	80012bc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e227      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	497c      	ldr	r1, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e018      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff fa23 	bl	80012bc <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fa1f 	bl	80012bc <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e203      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d03c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f9fe 	bl	80012bc <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f9fa 	bl	80012bc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1de      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x3ec>
 8001ee4:	e01b      	b.n	8001f1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f9e1 	bl	80012bc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f9dd 	bl	80012bc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1c1      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a6 	beq.w	8002078 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d118      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9a4 	bl	80012bc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7ff f9a0 	bl	80012bc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e184      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x57c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4d8>
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fae:	e024      	b.n	8001ffa <HAL_RCC_OscConfig+0x522>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d110      	bne.n	8001fda <HAL_RCC_OscConfig+0x502>
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	e00f      	b.n	8001ffa <HAL_RCC_OscConfig+0x522>
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f023 0304 	bic.w	r3, r3, #4
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f95b 	bl	80012bc <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff f957 	bl	80012bc <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e139      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ed      	beq.n	800200a <HAL_RCC_OscConfig+0x532>
 800202e:	e01a      	b.n	8002066 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f944 	bl	80012bc <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff f940 	bl	80012bc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d906      	bls.n	8002058 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e122      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002058:	4b90      	ldr	r3, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e8      	bne.n	8002038 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8108 	beq.w	8002292 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	2b02      	cmp	r3, #2
 8002088:	f040 80d0 	bne.w	800222c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800208c:	4b83      	ldr	r3, [pc, #524]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	429a      	cmp	r2, r3
 800209e:	d130      	bne.n	8002102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	3b01      	subs	r3, #1
 80020ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d127      	bne.n	8002102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d11f      	bne.n	8002102 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020cc:	2a07      	cmp	r2, #7
 80020ce:	bf14      	ite	ne
 80020d0:	2201      	movne	r2, #1
 80020d2:	2200      	moveq	r2, #0
 80020d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d113      	bne.n	8002102 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d06e      	beq.n	80021e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d069      	beq.n	80021dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002108:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002114:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b7      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002124:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5c      	ldr	r2, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800212a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002130:	f7ff f8c4 	bl	80012bc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff f8c0 	bl	80012bc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0a4      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214a:	4b54      	ldr	r3, [pc, #336]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002156:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_RCC_OscConfig+0x7c8>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002166:	3a01      	subs	r2, #1
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002170:	0212      	lsls	r2, r2, #8
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	3a01      	subs	r2, #1
 800217c:	0552      	lsls	r2, r2, #21
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002184:	0852      	lsrs	r2, r2, #1
 8002186:	3a01      	subs	r2, #1
 8002188:	0652      	lsls	r2, r2, #25
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002190:	0912      	lsrs	r2, r2, #4
 8002192:	0452      	lsls	r2, r2, #17
 8002194:	430a      	orrs	r2, r1
 8002196:	4941      	ldr	r1, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a3b      	ldr	r2, [pc, #236]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b4:	f7ff f882 	bl	80012bc <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f87e 	bl	80012bc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e062      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021da:	e05a      	b.n	8002292 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e059      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d152      	bne.n	8002292 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002204:	f7ff f85a 	bl	80012bc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f856 	bl	80012bc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e03a      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x734>
 800222a:	e032      	b.n	8002292 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d02d      	beq.n	800228e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002250:	f023 0303 	bic.w	r3, r3, #3
 8002254:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 800225c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff f829 	bl	80012bc <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff f825 	bl	80012bc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e009      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x7c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x796>
 800228c:	e001      	b.n	8002292 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	f99d808c 	.word	0xf99d808c

080022a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0c8      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b63      	ldr	r3, [pc, #396]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4961      	ldr	r1, [pc, #388]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b0      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d04c      	beq.n	800238e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fc:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d121      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e09e      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002314:	4b50      	ldr	r3, [pc, #320]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d115      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e092      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e086      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e07e      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 0203 	bic.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	493f      	ldr	r1, [pc, #252]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235e:	f7fe ffad 	bl	80012bc <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002364:	e00a      	b.n	800237c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7fe ffa9 	bl	80012bc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e066      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 020c 	and.w	r2, r3, #12
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	429a      	cmp	r2, r3
 800238c:	d1eb      	bne.n	8002366 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	492c      	ldr	r1, [pc, #176]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4924      	ldr	r1, [pc, #144]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_RCC_ClockConfig+0x1b0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e036      	b.n	800244a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4918      	ldr	r1, [pc, #96]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4910      	ldr	r1, [pc, #64]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800241a:	f000 f825 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490c      	ldr	r1, [pc, #48]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe feec 	bl	800121c <HAL_InitTick>
 8002444:	4603      	mov	r3, r0
 8002446:	72fb      	strb	r3, [r7, #11]

  return status;
 8002448:	7afb      	ldrb	r3, [r7, #11]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000
 8002458:	40021000 	.word	0x40021000
 800245c:	08005d58 	.word	0x08005d58
 8002460:	2000000c 	.word	0x2000000c
 8002464:	20000010 	.word	0x20000010

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x34>
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d121      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d11e      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e005      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024c4:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10d      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e004      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_GetSysClockFreq+0x114>)
 80024ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d134      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0xa6>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d003      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0xac>
 800250c:	e005      	b.n	800251a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_RCC_GetSysClockFreq+0x110>)
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_GetSysClockFreq+0x114>)
 8002516:	617b      	str	r3, [r7, #20]
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	617b      	str	r3, [r7, #20]
      break;
 800251e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	fb02 f203 	mul.w	r2, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_RCC_GetSysClockFreq+0x108>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	0e5b      	lsrs	r3, r3, #25
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	3301      	adds	r3, #1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002560:	69bb      	ldr	r3, [r7, #24]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	08005d70 	.word	0x08005d70
 8002578:	00f42400 	.word	0x00f42400
 800257c:	007a1200 	.word	0x007a1200

08002580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000000c 	.word	0x2000000c

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4904      	ldr	r1, [pc, #16]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08005d68 	.word	0x08005d68

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025c8:	f7ff ffda 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08005d68 	.word	0x08005d68

080025f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002608:	f7ff f9f2 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 800260c:	6178      	str	r0, [r7, #20]
 800260e:	e014      	b.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002628:	f7ff f9e2 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 800262c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002640:	d10b      	bne.n	800265a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d919      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2ba0      	cmp	r3, #160	; 0xa0
 800264c:	d902      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800264e:	2302      	movs	r3, #2
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e013      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	e010      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d902      	bls.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002660:	2303      	movs	r3, #3
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e00a      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d102      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800266c:	2302      	movs	r3, #2
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e004      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d101      	bne.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002678:	2301      	movs	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 0207 	bic.w	r2, r3, #7
 8002684:	4909      	ldr	r1, [pc, #36]	; (80026ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40022000 	.word	0x40022000

080026b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026bc:	2300      	movs	r3, #0
 80026be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d041      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d4:	d02a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026da:	d824      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e0:	d008      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e6:	d81e      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f0:	d010      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026f2:	e018      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f4:	4b86      	ldr	r3, [pc, #536]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a85      	ldr	r2, [pc, #532]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002700:	e015      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fabb 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002712:	e00c      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3320      	adds	r3, #32
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fba6 	bl	8002e6c <RCCEx_PLLSAI2_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002724:	e003      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	74fb      	strb	r3, [r7, #19]
      break;
 800272a:	e000      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800272c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002734:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002742:	4973      	ldr	r1, [pc, #460]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800274a:	e001      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d041      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002764:	d02a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800276a:	d824      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800276c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002776:	d81e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002780:	d010      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002782:	e018      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002784:	4b62      	ldr	r3, [pc, #392]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a61      	ldr	r2, [pc, #388]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002790:	e015      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fa73 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a2:	e00c      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3320      	adds	r3, #32
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fb5e 	bl	8002e6c <RCCEx_PLLSAI2_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b4:	e003      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ba:	e000      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d2:	494f      	ldr	r1, [pc, #316]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027da:	e001      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a0 	beq.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a40      	ldr	r2, [pc, #256]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
 8002814:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002820:	2301      	movs	r3, #1
 8002822:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002830:	f7fe fd44 	bl	80012bc <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002836:	e009      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002838:	f7fe fd40 	bl	80012bc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	74fb      	strb	r3, [r7, #19]
        break;
 800284a:	e005      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d15c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002868:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01f      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d019      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fcff 	bl	80012bc <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c0:	e00b      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fcfb 	bl	80012bc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d902      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	74fb      	strb	r3, [r7, #19]
            break;
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ec      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002906:	e009      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
 800290c:	e006      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291c:	7c7b      	ldrb	r3, [r7, #17]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d105      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4b9e      	ldr	r3, [pc, #632]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4a9d      	ldr	r2, [pc, #628]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	4994      	ldr	r1, [pc, #592]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295c:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 020c 	bic.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	498c      	ldr	r1, [pc, #560]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297e:	4b87      	ldr	r3, [pc, #540]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4983      	ldr	r1, [pc, #524]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	497b      	ldr	r1, [pc, #492]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c2:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	4972      	ldr	r1, [pc, #456]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e4:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	496a      	ldr	r1, [pc, #424]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	4961      	ldr	r1, [pc, #388]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a28:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	4959      	ldr	r1, [pc, #356]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	4950      	ldr	r1, [pc, #320]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	4948      	ldr	r1, [pc, #288]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	493f      	ldr	r1, [pc, #252]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d028      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	4937      	ldr	r1, [pc, #220]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ace:	d106      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f8c8 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	491f      	ldr	r1, [pc, #124]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b38:	60d3      	str	r3, [r2, #12]
 8002b3a:	e011      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f899 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02b      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a02      	ldr	r2, [pc, #8]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
 8002b98:	e014      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f867 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d02f      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	4928      	ldr	r1, [pc, #160]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bee:	d10d      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f844 	bl	8002c84 <RCCEx_PLLSAI1_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d014      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	74bb      	strb	r3, [r7, #18]
 8002c0a:	e011      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3320      	adds	r3, #32
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f925 	bl	8002e6c <RCCEx_PLLSAI2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000

08002c84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c92:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d018      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c9e:	4b72      	ldr	r3, [pc, #456]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0203 	and.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d10d      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cb6:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d047      	beq.n	8002d5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e044      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d018      	beq.n	8002d0a <RCCEx_PLLSAI1_Config+0x86>
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d825      	bhi.n	8002d28 <RCCEx_PLLSAI1_Config+0xa4>
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0x62>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d009      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0x74>
 8002ce4:	e020      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ce6:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11d      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf6:	e01a      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf8:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e013      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0a:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d16:	4b54      	ldr	r3, [pc, #336]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d26:	e006      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e004      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e002      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	430b      	orrs	r3, r1
 8002d54:	4944      	ldr	r1, [pc, #272]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d17d      	bne.n	8002e5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe faa6 	bl	80012bc <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d72:	e009      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d74:	f7fe faa2 	bl	80012bc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	73fb      	strb	r3, [r7, #15]
        break;
 8002d86:	e005      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d88:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ef      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d160      	bne.n	8002e5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d111      	bne.n	8002dc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	0211      	lsls	r1, r2, #8
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	0912      	lsrs	r2, r2, #4
 8002db8:	0452      	lsls	r2, r2, #17
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	492a      	ldr	r1, [pc, #168]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	610b      	str	r3, [r1, #16]
 8002dc2:	e027      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d112      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	0211      	lsls	r1, r2, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6912      	ldr	r2, [r2, #16]
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	0552      	lsls	r2, r2, #21
 8002de6:	430a      	orrs	r2, r1
 8002de8:	491f      	ldr	r1, [pc, #124]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	610b      	str	r3, [r1, #16]
 8002dee:	e011      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6892      	ldr	r2, [r2, #8]
 8002e00:	0211      	lsls	r1, r2, #8
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6952      	ldr	r2, [r2, #20]
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0652      	lsls	r2, r2, #25
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	4916      	ldr	r1, [pc, #88]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fa4c 	bl	80012bc <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e28:	f7fe fa48 	bl	80012bc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3a:	e005      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	4904      	ldr	r1, [pc, #16]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10d      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
       ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
       ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d047      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e044      	b.n	8002f42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d018      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0x86>
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d825      	bhi.n	8002f10 <RCCEx_PLLSAI2_Config+0xa4>
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d002      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x62>
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d009      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x74>
 8002ecc:	e020      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ece:	4b55      	ldr	r3, [pc, #340]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11d      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e01a      	b.n	8002f16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e013      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f0e:	e006      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e004      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	4939      	ldr	r1, [pc, #228]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d167      	bne.n	8003018 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f48:	4b36      	ldr	r3, [pc, #216]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a35      	ldr	r2, [pc, #212]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fe f9b2 	bl	80012bc <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f5a:	e009      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f5c:	f7fe f9ae 	bl	80012bc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6e:	e005      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f70:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ef      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d14a      	bne.n	8003018 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	0912      	lsrs	r2, r2, #4
 8002fa0:	0452      	lsls	r2, r2, #17
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	491f      	ldr	r1, [pc, #124]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	614b      	str	r3, [r1, #20]
 8002faa:	e011      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	0211      	lsls	r1, r2, #8
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6912      	ldr	r2, [r2, #16]
 8002fc2:	0852      	lsrs	r2, r2, #1
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	0652      	lsls	r2, r2, #25
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4916      	ldr	r1, [pc, #88]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f96e 	bl	80012bc <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe4:	f7fe f96a 	bl	80012bc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ef      	beq.n	8002fe4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e095      	b.n	8003166 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800304a:	d009      	beq.n	8003060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
 8003052:	e005      	b.n	8003060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd febe 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030a0:	d902      	bls.n	80030a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e002      	b.n	80030ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030b6:	d007      	beq.n	80030c8 <HAL_SPI_Init+0xa0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f003 0204 	and.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003144:	ea42 0103 	orr.w	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b088      	sub	sp, #32
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_SPI_Transmit+0x22>
 800318c:	2302      	movs	r3, #2
 800318e:	e158      	b.n	8003442 <HAL_SPI_Transmit+0x2d4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003198:	f7fe f890 	bl	80012bc <HAL_GetTick>
 800319c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d002      	beq.n	80031b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031b2:	e13d      	b.n	8003430 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Transmit+0x52>
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031c4:	e134      	b.n	8003430 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	d10f      	bne.n	8003232 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003230:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d007      	beq.n	8003250 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003258:	d94b      	bls.n	80032f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_SPI_Transmit+0xfa>
 8003262:	8afb      	ldrh	r3, [r7, #22]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d13e      	bne.n	80032e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800328c:	e02b      	b.n	80032e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d112      	bne.n	80032c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c0:	e011      	b.n	80032e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c2:	f7fd fffb 	bl	80012bc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d803      	bhi.n	80032da <HAL_SPI_Transmit+0x16c>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d102      	bne.n	80032e0 <HAL_SPI_Transmit+0x172>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032e4:	e0a4      	b.n	8003430 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ce      	bne.n	800328e <HAL_SPI_Transmit+0x120>
 80032f0:	e07c      	b.n	80033ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0x192>
 80032fa:	8afb      	ldrh	r3, [r7, #22]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d170      	bne.n	80033e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d912      	bls.n	8003330 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b02      	subs	r3, #2
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800332e:	e058      	b.n	80033e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003356:	e044      	b.n	80033e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d12b      	bne.n	80033be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d912      	bls.n	8003396 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b02      	subs	r3, #2
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003394:	e025      	b.n	80033e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033bc:	e011      	b.n	80033e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033be:	f7fd ff7d 	bl	80012bc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_Transmit+0x268>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Transmit+0x26e>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e0:	e026      	b.n	8003430 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1b5      	bne.n	8003358 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fcdf 	bl	8003db4 <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e000      	b.n	8003430 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800342e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003440:	7ffb      	ldrb	r3, [r7, #31]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b088      	sub	sp, #32
 800344e:	af02      	add	r7, sp, #8
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003466:	d112      	bne.n	800348e <HAL_SPI_Receive+0x44>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10e      	bne.n	800348e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2204      	movs	r2, #4
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f910 	bl	80036aa <HAL_SPI_TransmitReceive>
 800348a:	4603      	mov	r3, r0
 800348c:	e109      	b.n	80036a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_SPI_Receive+0x52>
 8003498:	2302      	movs	r3, #2
 800349a:	e102      	b.n	80036a2 <HAL_SPI_Receive+0x258>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a4:	f7fd ff0a 	bl	80012bc <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ba:	e0e9      	b.n	8003690 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_Receive+0x7e>
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034cc:	e0e0      	b.n	8003690 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2204      	movs	r2, #4
 80034d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003518:	d908      	bls.n	800352c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e007      	b.n	800353c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d10f      	bne.n	8003566 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d007      	beq.n	8003584 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800358c:	d867      	bhi.n	800365e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800358e:	e030      	b.n	80035f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d117      	bne.n	80035ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f103 020c 	add.w	r2, r3, #12
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035cc:	e011      	b.n	80035f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ce:	f7fd fe75 	bl	80012bc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d803      	bhi.n	80035e6 <HAL_SPI_Receive+0x19c>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Receive+0x1a2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035f0:	e04e      	b.n	8003690 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1c8      	bne.n	8003590 <HAL_SPI_Receive+0x146>
 80035fe:	e034      	b.n	800366a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d115      	bne.n	800363a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	b292      	uxth	r2, r2
 800361a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003638:	e011      	b.n	800365e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363a:	f7fd fe3f 	bl	80012bc <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d803      	bhi.n	8003652 <HAL_SPI_Receive+0x208>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d102      	bne.n	8003658 <HAL_SPI_Receive+0x20e>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800365c:	e018      	b.n	8003690 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ca      	bne.n	8003600 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fb48 	bl	8003d04 <SPI_EndRxTransaction>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
 800368c:	e000      	b.n	8003690 <HAL_SPI_Receive+0x246>
  }

error :
 800368e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08a      	sub	sp, #40	; 0x28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x26>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e1fb      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x41e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d8:	f7fd fdf0 	bl	80012bc <HAL_GetTick>
 80036dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036f4:	7efb      	ldrb	r3, [r7, #27]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00e      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x6e>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003700:	d106      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x66>
 800370a:	7efb      	ldrb	r3, [r7, #27]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d003      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003710:	2302      	movs	r3, #2
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003716:	e1cd      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_SPI_TransmitReceive+0x80>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_SPI_TransmitReceive+0x80>
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003730:	e1c0      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2205      	movs	r2, #5
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	887a      	ldrh	r2, [r7, #2]
 8003756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003788:	d802      	bhi.n	8003790 <HAL_SPI_TransmitReceive+0xe6>
 800378a:	8a3b      	ldrh	r3, [r7, #16]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d908      	bls.n	80037a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e007      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d007      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d8:	d97c      	bls.n	80038d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x13e>
 80037e2:	8a7b      	ldrh	r3, [r7, #18]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d169      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380c:	e056      	b.n	80038bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d11b      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x1aa>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x1aa>
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	2b01      	cmp	r3, #1
 800382a:	d113      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	1c9a      	adds	r2, r3, #2
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d11c      	bne.n	800389c <HAL_SPI_TransmitReceive+0x1f2>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	b292      	uxth	r2, r2
 800387a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800389c:	f7fd fd0e 	bl	80012bc <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d807      	bhi.n	80038bc <HAL_SPI_TransmitReceive+0x212>
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d003      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038ba:	e0fb      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1a3      	bne.n	800380e <HAL_SPI_TransmitReceive+0x164>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d19d      	bne.n	800380e <HAL_SPI_TransmitReceive+0x164>
 80038d2:	e0df      	b.n	8003a94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x23a>
 80038dc:	8a7b      	ldrh	r3, [r7, #18]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	f040 80cb 	bne.w	8003a7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d912      	bls.n	8003914 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b02      	subs	r3, #2
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003912:	e0b2      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393a:	e09e      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d134      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x30a>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02f      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x30a>
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	2b01      	cmp	r3, #1
 8003958:	d12c      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d912      	bls.n	800398a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b02      	subs	r3, #2
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003988:	e012      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d148      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x3aa>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d042      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d923      	bls.n	8003a22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	b292      	uxth	r2, r2
 80039e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b02      	subs	r3, #2
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d81f      	bhi.n	8003a50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e016      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f103 020c 	add.w	r2, r3, #12
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a54:	f7fd fc32 	bl	80012bc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d803      	bhi.n	8003a6c <HAL_SPI_TransmitReceive+0x3c2>
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d102      	bne.n	8003a72 <HAL_SPI_TransmitReceive+0x3c8>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a78:	e01c      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f af5b 	bne.w	800393c <HAL_SPI_TransmitReceive+0x292>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f47f af54 	bne.w	800393c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f98b 	bl	8003db4 <SPI_EndRxTxTransaction>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
 8003ab0:	e000      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ae0:	f7fd fbec 	bl	80012bc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003af0:	f7fd fbe4 	bl	80012bc <HAL_GetTick>
 8003af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	0d1b      	lsrs	r3, r3, #20
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b06:	e054      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d050      	beq.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b10:	f7fd fbd4 	bl	80012bc <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d902      	bls.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d13d      	bne.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d111      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d004      	beq.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d107      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d10f      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e017      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d19b      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000000c 	.word	0x2000000c

08003be0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bee:	f7fd fb65 	bl	80012bc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bfe:	f7fd fb5d 	bl	80012bc <HAL_GetTick>
 8003c02:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c04:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00da      	lsls	r2, r3, #3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	0d1b      	lsrs	r3, r3, #20
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c1c:	e062      	b.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c24:	d109      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003c38:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d050      	beq.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c42:	f7fd fb3b 	bl	80012bc <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d902      	bls.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13d      	bne.n	8003cd4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c70:	d111      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7a:	d004      	beq.n	8003c86 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d107      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d10f      	bne.n	8003cc0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e010      	b.n	8003cf6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d194      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d18:	d111      	bne.n	8003d3e <SPI_EndRxTransaction+0x3a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d004      	beq.n	8003d2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d107      	bne.n	8003d3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fec1 	bl	8003ad0 <SPI_WaitFlagStateUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e023      	b.n	8003dac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6c:	d11d      	bne.n	8003daa <SPI_EndRxTransaction+0xa6>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d76:	d004      	beq.n	8003d82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d113      	bne.n	8003daa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff ff26 	bl	8003be0 <SPI_WaitFifoStateUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e000      	b.n	8003dac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff07 	bl	8003be0 <SPI_WaitFifoStateUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e027      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fe6c 	bl	8003ad0 <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e014      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fee0 	bl	8003be0 <SPI_WaitFifoStateUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e000      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e040      	b.n	8003ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f80e 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fb26 	bl	80044d0 <UART_SetConfig>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fda4 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fe2b 	bl	8004b28 <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	f040 8082 	bne.w	8003ffa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Transmit+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07a      	b.n	8003ffc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e073      	b.n	8003ffc <HAL_UART_Transmit+0x120>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	; 0x21
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2a:	f7fd f9c7 	bl	80012bc <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d108      	bne.n	8003f5c <HAL_UART_Transmit+0x80>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f6c:	e02d      	b.n	8003fca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fe1e 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e039      	b.n	8003ffc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e008      	b.n	8003fb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	b292      	uxth	r2, r2
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1cb      	bne.n	8003f6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	; 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fdea 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e005      	b.n	8003ffc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004016:	2b20      	cmp	r3, #32
 8004018:	d131      	bne.n	800407e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_Receive_IT+0x22>
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e02a      	b.n	8004080 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_UART_Receive_IT+0x34>
 8004034:	2302      	movs	r3, #2
 8004036:	e023      	b.n	8004080 <HAL_UART_Receive_IT+0x7c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_UART_Receive_IT+0x84>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800406c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	461a      	mov	r2, r3
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fe1d 	bl	8004cb4 <UART_Start_Receive_IT>
 800407a:	4603      	mov	r3, r0
 800407c:	e000      	b.n	8004080 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40008000 	.word	0x40008000

0800408c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 81ce 	beq.w	8004476 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
      }
      return;
 80040e2:	e1c8      	b.n	8004476 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80e3 	beq.w	80042b2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4ba6      	ldr	r3, [pc, #664]	; (8004394 <HAL_UART_IRQHandler+0x308>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80d8 	beq.w	80042b2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_UART_IRQHandler+0xa2>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_UART_IRQHandler+0xce>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2202      	movs	r2, #2
 8004148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_UART_IRQHandler+0xfa>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2204      	movs	r2, #4
 8004174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_UART_IRQHandler+0x15e>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8142 	beq.w	800447a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004220:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d004      	beq.n	800423a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004236:	2b00      	cmp	r3, #0
 8004238:	d031      	beq.n	800429e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fdc2 	bl	8004dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d123      	bne.n	8004296 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	2b00      	cmp	r3, #0
 8004264:	d013      	beq.n	800428e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a4b      	ldr	r2, [pc, #300]	; (8004398 <HAL_UART_IRQHandler+0x30c>)
 800426c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd f9a1 	bl	80015ba <HAL_DMA_Abort_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d017      	beq.n	80042ae <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e00f      	b.n	80042ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f908 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e00b      	b.n	80042ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f904 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e007      	b.n	80042ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f900 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042ac:	e0e5      	b.n	800447a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	bf00      	nop
    return;
 80042b0:	e0e3      	b.n	800447a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 80a9 	bne.w	800440e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a3 	beq.w	800440e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 809d 	beq.w	800440e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2210      	movs	r2, #16
 80042da:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d158      	bne.n	800439c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80042f4:	893b      	ldrh	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80c1 	beq.w	800447e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004302:	893a      	ldrh	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	f080 80ba 	bcs.w	800447e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d12a      	bne.n	8004378 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0210 	bic.w	r2, r2, #16
 800436c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd f8e3 	bl	800153e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004384:	b29b      	uxth	r3, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f893 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004392:	e074      	b.n	800447e <HAL_UART_IRQHandler+0x3f2>
 8004394:	04000120 	.word	0x04000120
 8004398:	08004e23 	.word	0x08004e23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d060      	beq.n	8004482 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0210 	bic.w	r2, r2, #16
 8004400:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f856 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800440c:	e039      	b.n	8004482 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_UART_IRQHandler+0x3a8>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800442a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fdff 	bl	8005030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004432:	e029      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01a      	beq.n	8004486 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
    }
    return;
 8004458:	e015      	b.n	8004486 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <HAL_UART_IRQHandler+0x3fc>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fced 	bl	8004e4e <UART_EndTransmit_IT>
    return;
 8004474:	e008      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004476:	bf00      	nop
 8004478:	e006      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
    return;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
      return;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004486:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4bad      	ldr	r3, [pc, #692]	; (80047b0 <UART_SetConfig+0x2e0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	430b      	orrs	r3, r1
 8004506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4aa2      	ldr	r2, [pc, #648]	; (80047b4 <UART_SetConfig+0x2e4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a99      	ldr	r2, [pc, #612]	; (80047b8 <UART_SetConfig+0x2e8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d121      	bne.n	800459a <UART_SetConfig+0xca>
 8004556:	4b99      	ldr	r3, [pc, #612]	; (80047bc <UART_SetConfig+0x2ec>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d817      	bhi.n	8004594 <UART_SetConfig+0xc4>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0x9c>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	08004589 	.word	0x08004589
 8004574:	08004583 	.word	0x08004583
 8004578:	0800458f 	.word	0x0800458f
 800457c:	2301      	movs	r3, #1
 800457e:	76fb      	strb	r3, [r7, #27]
 8004580:	e0e7      	b.n	8004752 <UART_SetConfig+0x282>
 8004582:	2302      	movs	r3, #2
 8004584:	76fb      	strb	r3, [r7, #27]
 8004586:	e0e4      	b.n	8004752 <UART_SetConfig+0x282>
 8004588:	2304      	movs	r3, #4
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e0e1      	b.n	8004752 <UART_SetConfig+0x282>
 800458e:	2308      	movs	r3, #8
 8004590:	76fb      	strb	r3, [r7, #27]
 8004592:	e0de      	b.n	8004752 <UART_SetConfig+0x282>
 8004594:	2310      	movs	r3, #16
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e0db      	b.n	8004752 <UART_SetConfig+0x282>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a88      	ldr	r2, [pc, #544]	; (80047c0 <UART_SetConfig+0x2f0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d132      	bne.n	800460a <UART_SetConfig+0x13a>
 80045a4:	4b85      	ldr	r3, [pc, #532]	; (80047bc <UART_SetConfig+0x2ec>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d828      	bhi.n	8004604 <UART_SetConfig+0x134>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0xe8>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	08004605 	.word	0x08004605
 80045c0:	08004605 	.word	0x08004605
 80045c4:	08004605 	.word	0x08004605
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	08004605 	.word	0x08004605
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004605 	.word	0x08004605
 80045d8:	080045f3 	.word	0x080045f3
 80045dc:	08004605 	.word	0x08004605
 80045e0:	08004605 	.word	0x08004605
 80045e4:	08004605 	.word	0x08004605
 80045e8:	080045ff 	.word	0x080045ff
 80045ec:	2300      	movs	r3, #0
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	e0af      	b.n	8004752 <UART_SetConfig+0x282>
 80045f2:	2302      	movs	r3, #2
 80045f4:	76fb      	strb	r3, [r7, #27]
 80045f6:	e0ac      	b.n	8004752 <UART_SetConfig+0x282>
 80045f8:	2304      	movs	r3, #4
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e0a9      	b.n	8004752 <UART_SetConfig+0x282>
 80045fe:	2308      	movs	r3, #8
 8004600:	76fb      	strb	r3, [r7, #27]
 8004602:	e0a6      	b.n	8004752 <UART_SetConfig+0x282>
 8004604:	2310      	movs	r3, #16
 8004606:	76fb      	strb	r3, [r7, #27]
 8004608:	e0a3      	b.n	8004752 <UART_SetConfig+0x282>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6d      	ldr	r2, [pc, #436]	; (80047c4 <UART_SetConfig+0x2f4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d120      	bne.n	8004656 <UART_SetConfig+0x186>
 8004614:	4b69      	ldr	r3, [pc, #420]	; (80047bc <UART_SetConfig+0x2ec>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800461e:	2b30      	cmp	r3, #48	; 0x30
 8004620:	d013      	beq.n	800464a <UART_SetConfig+0x17a>
 8004622:	2b30      	cmp	r3, #48	; 0x30
 8004624:	d814      	bhi.n	8004650 <UART_SetConfig+0x180>
 8004626:	2b20      	cmp	r3, #32
 8004628:	d009      	beq.n	800463e <UART_SetConfig+0x16e>
 800462a:	2b20      	cmp	r3, #32
 800462c:	d810      	bhi.n	8004650 <UART_SetConfig+0x180>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <UART_SetConfig+0x168>
 8004632:	2b10      	cmp	r3, #16
 8004634:	d006      	beq.n	8004644 <UART_SetConfig+0x174>
 8004636:	e00b      	b.n	8004650 <UART_SetConfig+0x180>
 8004638:	2300      	movs	r3, #0
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e089      	b.n	8004752 <UART_SetConfig+0x282>
 800463e:	2302      	movs	r3, #2
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e086      	b.n	8004752 <UART_SetConfig+0x282>
 8004644:	2304      	movs	r3, #4
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e083      	b.n	8004752 <UART_SetConfig+0x282>
 800464a:	2308      	movs	r3, #8
 800464c:	76fb      	strb	r3, [r7, #27]
 800464e:	e080      	b.n	8004752 <UART_SetConfig+0x282>
 8004650:	2310      	movs	r3, #16
 8004652:	76fb      	strb	r3, [r7, #27]
 8004654:	e07d      	b.n	8004752 <UART_SetConfig+0x282>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <UART_SetConfig+0x2f8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d120      	bne.n	80046a2 <UART_SetConfig+0x1d2>
 8004660:	4b56      	ldr	r3, [pc, #344]	; (80047bc <UART_SetConfig+0x2ec>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800466a:	2bc0      	cmp	r3, #192	; 0xc0
 800466c:	d013      	beq.n	8004696 <UART_SetConfig+0x1c6>
 800466e:	2bc0      	cmp	r3, #192	; 0xc0
 8004670:	d814      	bhi.n	800469c <UART_SetConfig+0x1cc>
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d009      	beq.n	800468a <UART_SetConfig+0x1ba>
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d810      	bhi.n	800469c <UART_SetConfig+0x1cc>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <UART_SetConfig+0x1b4>
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x1c0>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x1cc>
 8004684:	2300      	movs	r3, #0
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	e063      	b.n	8004752 <UART_SetConfig+0x282>
 800468a:	2302      	movs	r3, #2
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e060      	b.n	8004752 <UART_SetConfig+0x282>
 8004690:	2304      	movs	r3, #4
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	e05d      	b.n	8004752 <UART_SetConfig+0x282>
 8004696:	2308      	movs	r3, #8
 8004698:	76fb      	strb	r3, [r7, #27]
 800469a:	e05a      	b.n	8004752 <UART_SetConfig+0x282>
 800469c:	2310      	movs	r3, #16
 800469e:	76fb      	strb	r3, [r7, #27]
 80046a0:	e057      	b.n	8004752 <UART_SetConfig+0x282>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a49      	ldr	r2, [pc, #292]	; (80047cc <UART_SetConfig+0x2fc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d125      	bne.n	80046f8 <UART_SetConfig+0x228>
 80046ac:	4b43      	ldr	r3, [pc, #268]	; (80047bc <UART_SetConfig+0x2ec>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ba:	d017      	beq.n	80046ec <UART_SetConfig+0x21c>
 80046bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c0:	d817      	bhi.n	80046f2 <UART_SetConfig+0x222>
 80046c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c6:	d00b      	beq.n	80046e0 <UART_SetConfig+0x210>
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d811      	bhi.n	80046f2 <UART_SetConfig+0x222>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <UART_SetConfig+0x20a>
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d006      	beq.n	80046e6 <UART_SetConfig+0x216>
 80046d8:	e00b      	b.n	80046f2 <UART_SetConfig+0x222>
 80046da:	2300      	movs	r3, #0
 80046dc:	76fb      	strb	r3, [r7, #27]
 80046de:	e038      	b.n	8004752 <UART_SetConfig+0x282>
 80046e0:	2302      	movs	r3, #2
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e035      	b.n	8004752 <UART_SetConfig+0x282>
 80046e6:	2304      	movs	r3, #4
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e032      	b.n	8004752 <UART_SetConfig+0x282>
 80046ec:	2308      	movs	r3, #8
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e02f      	b.n	8004752 <UART_SetConfig+0x282>
 80046f2:	2310      	movs	r3, #16
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e02c      	b.n	8004752 <UART_SetConfig+0x282>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <UART_SetConfig+0x2e4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d125      	bne.n	800474e <UART_SetConfig+0x27e>
 8004702:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <UART_SetConfig+0x2ec>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800470c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004710:	d017      	beq.n	8004742 <UART_SetConfig+0x272>
 8004712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004716:	d817      	bhi.n	8004748 <UART_SetConfig+0x278>
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471c:	d00b      	beq.n	8004736 <UART_SetConfig+0x266>
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d811      	bhi.n	8004748 <UART_SetConfig+0x278>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <UART_SetConfig+0x260>
 8004728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472c:	d006      	beq.n	800473c <UART_SetConfig+0x26c>
 800472e:	e00b      	b.n	8004748 <UART_SetConfig+0x278>
 8004730:	2300      	movs	r3, #0
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e00d      	b.n	8004752 <UART_SetConfig+0x282>
 8004736:	2302      	movs	r3, #2
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e00a      	b.n	8004752 <UART_SetConfig+0x282>
 800473c:	2304      	movs	r3, #4
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	e007      	b.n	8004752 <UART_SetConfig+0x282>
 8004742:	2308      	movs	r3, #8
 8004744:	76fb      	strb	r3, [r7, #27]
 8004746:	e004      	b.n	8004752 <UART_SetConfig+0x282>
 8004748:	2310      	movs	r3, #16
 800474a:	76fb      	strb	r3, [r7, #27]
 800474c:	e001      	b.n	8004752 <UART_SetConfig+0x282>
 800474e:	2310      	movs	r3, #16
 8004750:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <UART_SetConfig+0x2e4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 8087 	bne.w	800486c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800475e:	7efb      	ldrb	r3, [r7, #27]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d837      	bhi.n	80047d4 <UART_SetConfig+0x304>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x29c>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004791 	.word	0x08004791
 8004770:	080047d5 	.word	0x080047d5
 8004774:	08004799 	.word	0x08004799
 8004778:	080047d5 	.word	0x080047d5
 800477c:	0800479f 	.word	0x0800479f
 8004780:	080047d5 	.word	0x080047d5
 8004784:	080047d5 	.word	0x080047d5
 8004788:	080047d5 	.word	0x080047d5
 800478c:	080047a7 	.word	0x080047a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004790:	f7fd ff02 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8004794:	6178      	str	r0, [r7, #20]
        break;
 8004796:	e022      	b.n	80047de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <UART_SetConfig+0x300>)
 800479a:	617b      	str	r3, [r7, #20]
        break;
 800479c:	e01f      	b.n	80047de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479e:	f7fd fe63 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80047a2:	6178      	str	r0, [r7, #20]
        break;
 80047a4:	e01b      	b.n	80047de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047aa:	617b      	str	r3, [r7, #20]
        break;
 80047ac:	e017      	b.n	80047de <UART_SetConfig+0x30e>
 80047ae:	bf00      	nop
 80047b0:	efff69f3 	.word	0xefff69f3
 80047b4:	40008000 	.word	0x40008000
 80047b8:	40013800 	.word	0x40013800
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40004400 	.word	0x40004400
 80047c4:	40004800 	.word	0x40004800
 80047c8:	40004c00 	.word	0x40004c00
 80047cc:	40005000 	.word	0x40005000
 80047d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	76bb      	strb	r3, [r7, #26]
        break;
 80047dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80f1 	beq.w	80049c8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d305      	bcc.n	8004802 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d902      	bls.n	8004808 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	76bb      	strb	r3, [r7, #26]
 8004806:	e0df      	b.n	80049c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4618      	mov	r0, r3
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	020b      	lsls	r3, r1, #8
 800481a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800481e:	0202      	lsls	r2, r0, #8
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	6849      	ldr	r1, [r1, #4]
 8004824:	0849      	lsrs	r1, r1, #1
 8004826:	4608      	mov	r0, r1
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	1814      	adds	r4, r2, r0
 800482e:	eb43 0501 	adc.w	r5, r3, r1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	4620      	mov	r0, r4
 800483e:	4629      	mov	r1, r5
 8004840:	f7fb fd16 	bl	8000270 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	d308      	bcc.n	8004866 <UART_SetConfig+0x396>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d204      	bcs.n	8004866 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	e0b0      	b.n	80049c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	76bb      	strb	r3, [r7, #26]
 800486a:	e0ad      	b.n	80049c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d15c      	bne.n	8004930 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004876:	7efb      	ldrb	r3, [r7, #27]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d828      	bhi.n	80048ce <UART_SetConfig+0x3fe>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x3b4>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048cf 	.word	0x080048cf
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
 80048a4:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd fe76 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80048ac:	6178      	str	r0, [r7, #20]
        break;
 80048ae:	e013      	b.n	80048d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fd fe88 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 80048b4:	6178      	str	r0, [r7, #20]
        break;
 80048b6:	e00f      	b.n	80048d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <UART_SetConfig+0x510>)
 80048ba:	617b      	str	r3, [r7, #20]
        break;
 80048bc:	e00c      	b.n	80048d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fd fdd3 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80048c2:	6178      	str	r0, [r7, #20]
        break;
 80048c4:	e008      	b.n	80048d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	617b      	str	r3, [r7, #20]
        break;
 80048cc:	e004      	b.n	80048d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	76bb      	strb	r3, [r7, #26]
        break;
 80048d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d074      	beq.n	80049c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	005a      	lsls	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d916      	bls.n	800492a <UART_SetConfig+0x45a>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004902:	d212      	bcs.n	800492a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f023 030f 	bic.w	r3, r3, #15
 800490c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	b29a      	uxth	r2, r3
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	4313      	orrs	r3, r2
 800491e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	89fa      	ldrh	r2, [r7, #14]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e04e      	b.n	80049c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	76bb      	strb	r3, [r7, #26]
 800492e:	e04b      	b.n	80049c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004930:	7efb      	ldrb	r3, [r7, #27]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d827      	bhi.n	8004986 <UART_SetConfig+0x4b6>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x46c>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fd fe1a 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8004964:	6178      	str	r0, [r7, #20]
        break;
 8004966:	e013      	b.n	8004990 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fd fe2c 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 800496c:	6178      	str	r0, [r7, #20]
        break;
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <UART_SetConfig+0x510>)
 8004972:	617b      	str	r3, [r7, #20]
        break;
 8004974:	e00c      	b.n	8004990 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fd fd77 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 800497a:	6178      	str	r0, [r7, #20]
        break;
 800497c:	e008      	b.n	8004990 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	617b      	str	r3, [r7, #20]
        break;
 8004984:	e004      	b.n	8004990 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	76bb      	strb	r3, [r7, #26]
        break;
 800498e:	bf00      	nop
    }

    if (pclk != 0U)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d018      	beq.n	80049c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	085a      	lsrs	r2, r3, #1
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d908      	bls.n	80049c4 <UART_SetConfig+0x4f4>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d204      	bcs.n	80049c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	e001      	b.n	80049c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	bf00      	nop
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae2:	d10a      	bne.n	8004afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b38:	f7fc fbc0 	bl	80012bc <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d10e      	bne.n	8004b6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f82d 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e023      	b.n	8004bb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d10e      	bne.n	8004b96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f817 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e00d      	b.n	8004bb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bca:	e05e      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d05a      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd4:	f7fc fb72 	bl	80012bc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <UART_WaitOnFlagUntilTimeout+0x30>
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11b      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bf8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e043      	b.n	8004caa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02c      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3e:	d124      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c48:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c58:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e00f      	b.n	8004caa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d091      	beq.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d10e      	bne.n	8004d06 <UART_Start_Receive_IT+0x52>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <UART_Start_Receive_IT+0x48>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cfa:	e02d      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	22ff      	movs	r2, #255	; 0xff
 8004d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d04:	e028      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <UART_Start_Receive_IT+0x76>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <UART_Start_Receive_IT+0x6c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d1e:	e01b      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	227f      	movs	r2, #127	; 0x7f
 8004d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d28:	e016      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d32:	d10d      	bne.n	8004d50 <UART_Start_Receive_IT+0x9c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <UART_Start_Receive_IT+0x92>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	227f      	movs	r2, #127	; 0x7f
 8004d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d44:	e008      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	223f      	movs	r2, #63	; 0x3f
 8004d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d4e:	e003      	b.n	8004d58 <UART_Start_Receive_IT+0xa4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2222      	movs	r2, #34	; 0x22
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d107      	bne.n	8004d90 <UART_Start_Receive_IT+0xdc>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <UART_Start_Receive_IT+0x108>)
 8004d8c:	665a      	str	r2, [r3, #100]	; 0x64
 8004d8e:	e002      	b.n	8004d96 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <UART_Start_Receive_IT+0x10c>)
 8004d94:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004dac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	08004f59 	.word	0x08004f59
 8004dc0:	08004e81 	.word	0x08004e81

08004dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0210 	bic.w	r2, r2, #16
 8004e02:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fb2f 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fb0c 	bl	8004490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e8e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e94:	2b22      	cmp	r3, #34	; 0x22
 8004e96:	d151      	bne.n	8004f3c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e9e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ea0:	89bb      	ldrh	r3, [r7, #12]
 8004ea2:	b2d9      	uxtb	r1, r3
 8004ea4:	89fb      	ldrh	r3, [r7, #14]
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	400a      	ands	r2, r1
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d13a      	bne.n	8004f50 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ee8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10f      	bne.n	8004f2e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0210 	bic.w	r2, r2, #16
 8004f1c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fac6 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
 8004f2c:	e002      	b.n	8004f34 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fd7a 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f3a:	e009      	b.n	8004f50 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	8b1b      	ldrh	r3, [r3, #24]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0208 	orr.w	r2, r2, #8
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	831a      	strh	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6c:	2b22      	cmp	r3, #34	; 0x22
 8004f6e:	d151      	bne.n	8005014 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f76:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f7e:	89ba      	ldrh	r2, [r7, #12]
 8004f80:	89fb      	ldrh	r3, [r7, #14]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d13a      	bne.n	8005028 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10f      	bne.n	8005006 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0210 	bic.w	r2, r2, #16
 8004ff4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fa5a 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
 8005004:	e002      	b.n	800500c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fd0e 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005012:	e009      	b.n	8005028 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	8b1b      	ldrh	r3, [r3, #24]
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0208 	orr.w	r2, r2, #8
 8005024:	b292      	uxth	r2, r2
 8005026:	831a      	strh	r2, [r3, #24]
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e03c      	b.n	80050d0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fb ff94 	bl	8000f98 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f85b 	bl	8005144 <USART_SetConfig>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e01b      	b.n	80050d0 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f991 	bl	80053f0 <USART_CheckIdleState>
 80050ce:	4603      	mov	r3, r0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80050e8:	e018      	b.n	800511c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d014      	beq.n	800511c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f2:	f7fc f8e3 	bl	80012bc <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d302      	bcc.n	8005108 <USART_WaitOnFlagUntilTimeout+0x30>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e00f      	b.n	800513c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	429a      	cmp	r2, r3
 8005138:	d0d7      	beq.n	80050ea <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b9a      	ldr	r3, [pc, #616]	; (80053dc <USART_SetConfig+0x298>)
 8005172:	4013      	ands	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	430b      	orrs	r3, r1
 800517c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800517e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005182:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	4313      	orrs	r3, r2
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a87      	ldr	r2, [pc, #540]	; (80053e0 <USART_SetConfig+0x29c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d121      	bne.n	800520a <USART_SetConfig+0xc6>
 80051c6:	4b87      	ldr	r3, [pc, #540]	; (80053e4 <USART_SetConfig+0x2a0>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d817      	bhi.n	8005204 <USART_SetConfig+0xc0>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USART_SetConfig+0x98>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	080051f3 	.word	0x080051f3
 80051e8:	080051ff 	.word	0x080051ff
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e06b      	b.n	80052ca <USART_SetConfig+0x186>
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e068      	b.n	80052ca <USART_SetConfig+0x186>
 80051f8:	2304      	movs	r3, #4
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e065      	b.n	80052ca <USART_SetConfig+0x186>
 80051fe:	2308      	movs	r3, #8
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e062      	b.n	80052ca <USART_SetConfig+0x186>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e05f      	b.n	80052ca <USART_SetConfig+0x186>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a76      	ldr	r2, [pc, #472]	; (80053e8 <USART_SetConfig+0x2a4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d132      	bne.n	800527a <USART_SetConfig+0x136>
 8005214:	4b73      	ldr	r3, [pc, #460]	; (80053e4 <USART_SetConfig+0x2a0>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d828      	bhi.n	8005274 <USART_SetConfig+0x130>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <USART_SetConfig+0xe4>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800525d 	.word	0x0800525d
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	08005269 	.word	0x08005269
 800523c:	08005275 	.word	0x08005275
 8005240:	08005275 	.word	0x08005275
 8005244:	08005275 	.word	0x08005275
 8005248:	08005263 	.word	0x08005263
 800524c:	08005275 	.word	0x08005275
 8005250:	08005275 	.word	0x08005275
 8005254:	08005275 	.word	0x08005275
 8005258:	0800526f 	.word	0x0800526f
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e033      	b.n	80052ca <USART_SetConfig+0x186>
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e030      	b.n	80052ca <USART_SetConfig+0x186>
 8005268:	2304      	movs	r3, #4
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e02d      	b.n	80052ca <USART_SetConfig+0x186>
 800526e:	2308      	movs	r3, #8
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e02a      	b.n	80052ca <USART_SetConfig+0x186>
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e027      	b.n	80052ca <USART_SetConfig+0x186>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a5b      	ldr	r2, [pc, #364]	; (80053ec <USART_SetConfig+0x2a8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d120      	bne.n	80052c6 <USART_SetConfig+0x182>
 8005284:	4b57      	ldr	r3, [pc, #348]	; (80053e4 <USART_SetConfig+0x2a0>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800528e:	2b30      	cmp	r3, #48	; 0x30
 8005290:	d013      	beq.n	80052ba <USART_SetConfig+0x176>
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d814      	bhi.n	80052c0 <USART_SetConfig+0x17c>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d009      	beq.n	80052ae <USART_SetConfig+0x16a>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d810      	bhi.n	80052c0 <USART_SetConfig+0x17c>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <USART_SetConfig+0x164>
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d006      	beq.n	80052b4 <USART_SetConfig+0x170>
 80052a6:	e00b      	b.n	80052c0 <USART_SetConfig+0x17c>
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e00d      	b.n	80052ca <USART_SetConfig+0x186>
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e00a      	b.n	80052ca <USART_SetConfig+0x186>
 80052b4:	2304      	movs	r3, #4
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e007      	b.n	80052ca <USART_SetConfig+0x186>
 80052ba:	2308      	movs	r3, #8
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e004      	b.n	80052ca <USART_SetConfig+0x186>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e001      	b.n	80052ca <USART_SetConfig+0x186>
 80052c6:	2310      	movs	r3, #16
 80052c8:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d85a      	bhi.n	8005386 <USART_SetConfig+0x242>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <USART_SetConfig+0x194>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	0800531b 	.word	0x0800531b
 80052e0:	08005339 	.word	0x08005339
 80052e4:	08005387 	.word	0x08005387
 80052e8:	08005353 	.word	0x08005353
 80052ec:	08005387 	.word	0x08005387
 80052f0:	08005387 	.word	0x08005387
 80052f4:	08005387 	.word	0x08005387
 80052f8:	08005371 	.word	0x08005371
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fc:	f7fd f94c 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8005300:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	005a      	lsls	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005318:	e038      	b.n	800538c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800531a:	f7fd f953 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 800531e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	005a      	lsls	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	441a      	add	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005336:	e029      	b.n	800538c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005342:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6852      	ldr	r2, [r2, #4]
 800534a:	fbb3 f3f2 	udiv	r3, r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005350:	e01c      	b.n	800538c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fd f889 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8005356:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	005a      	lsls	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800536e:	e00d      	b.n	800538c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005384:	e002      	b.n	800538c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	77bb      	strb	r3, [r7, #30]
      break;
 800538a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <USART_SetConfig+0x27c>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d212      	bcs.n	80053c0 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	89fa      	ldrh	r2, [r7, #14]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e001      	b.n	80053c4 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80053d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	efff69f3 	.word	0xefff69f3
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40004400 	.word	0x40004400
 80053ec:	40004800 	.word	0x40004800

080053f0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053fe:	f7fb ff5d 	bl	80012bc <HAL_GetTick>
 8005402:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b08      	cmp	r3, #8
 8005410:	d10e      	bne.n	8005430 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fe59 	bl	80050d8 <USART_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e01e      	b.n	800546e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b04      	cmp	r3, #4
 800543c:	d10e      	bne.n	800545c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800543e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fe43 	bl	80050d8 <USART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e008      	b.n	800546e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	; (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000018 	.word	0x20000018

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	; (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	; (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	; (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	; (80054c8 <__libc_init_array+0x44>)
 8005498:	f000 fc4e 	bl	8005d38 <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08005ddc 	.word	0x08005ddc
 80054c0:	08005ddc 	.word	0x08005ddc
 80054c4:	08005ddc 	.word	0x08005ddc
 80054c8:	08005de0 	.word	0x08005de0

080054cc <memset>:
 80054cc:	4402      	add	r2, r0
 80054ce:	4603      	mov	r3, r0
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d100      	bne.n	80054d6 <memset+0xa>
 80054d4:	4770      	bx	lr
 80054d6:	f803 1b01 	strb.w	r1, [r3], #1
 80054da:	e7f9      	b.n	80054d0 <memset+0x4>

080054dc <siprintf>:
 80054dc:	b40e      	push	{r1, r2, r3}
 80054de:	b500      	push	{lr}
 80054e0:	b09c      	sub	sp, #112	; 0x70
 80054e2:	ab1d      	add	r3, sp, #116	; 0x74
 80054e4:	9002      	str	r0, [sp, #8]
 80054e6:	9006      	str	r0, [sp, #24]
 80054e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054ec:	4809      	ldr	r0, [pc, #36]	; (8005514 <siprintf+0x38>)
 80054ee:	9107      	str	r1, [sp, #28]
 80054f0:	9104      	str	r1, [sp, #16]
 80054f2:	4909      	ldr	r1, [pc, #36]	; (8005518 <siprintf+0x3c>)
 80054f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f8:	9105      	str	r1, [sp, #20]
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	a902      	add	r1, sp, #8
 8005500:	f000 f868 	bl	80055d4 <_svfiprintf_r>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	b01c      	add	sp, #112	; 0x70
 800550c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005510:	b003      	add	sp, #12
 8005512:	4770      	bx	lr
 8005514:	20000018 	.word	0x20000018
 8005518:	ffff0208 	.word	0xffff0208

0800551c <__ssputs_r>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	688e      	ldr	r6, [r1, #8]
 8005522:	429e      	cmp	r6, r3
 8005524:	4682      	mov	sl, r0
 8005526:	460c      	mov	r4, r1
 8005528:	4690      	mov	r8, r2
 800552a:	461f      	mov	r7, r3
 800552c:	d838      	bhi.n	80055a0 <__ssputs_r+0x84>
 800552e:	898a      	ldrh	r2, [r1, #12]
 8005530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005534:	d032      	beq.n	800559c <__ssputs_r+0x80>
 8005536:	6825      	ldr	r5, [r4, #0]
 8005538:	6909      	ldr	r1, [r1, #16]
 800553a:	eba5 0901 	sub.w	r9, r5, r1
 800553e:	6965      	ldr	r5, [r4, #20]
 8005540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005548:	3301      	adds	r3, #1
 800554a:	444b      	add	r3, r9
 800554c:	106d      	asrs	r5, r5, #1
 800554e:	429d      	cmp	r5, r3
 8005550:	bf38      	it	cc
 8005552:	461d      	movcc	r5, r3
 8005554:	0553      	lsls	r3, r2, #21
 8005556:	d531      	bpl.n	80055bc <__ssputs_r+0xa0>
 8005558:	4629      	mov	r1, r5
 800555a:	f000 fb47 	bl	8005bec <_malloc_r>
 800555e:	4606      	mov	r6, r0
 8005560:	b950      	cbnz	r0, 8005578 <__ssputs_r+0x5c>
 8005562:	230c      	movs	r3, #12
 8005564:	f8ca 3000 	str.w	r3, [sl]
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	6921      	ldr	r1, [r4, #16]
 800557a:	464a      	mov	r2, r9
 800557c:	f000 fabe 	bl	8005afc <memcpy>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	6126      	str	r6, [r4, #16]
 800558e:	6165      	str	r5, [r4, #20]
 8005590:	444e      	add	r6, r9
 8005592:	eba5 0509 	sub.w	r5, r5, r9
 8005596:	6026      	str	r6, [r4, #0]
 8005598:	60a5      	str	r5, [r4, #8]
 800559a:	463e      	mov	r6, r7
 800559c:	42be      	cmp	r6, r7
 800559e:	d900      	bls.n	80055a2 <__ssputs_r+0x86>
 80055a0:	463e      	mov	r6, r7
 80055a2:	4632      	mov	r2, r6
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	4641      	mov	r1, r8
 80055a8:	f000 fab6 	bl	8005b18 <memmove>
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	1b9b      	subs	r3, r3, r6
 80055b2:	4432      	add	r2, r6
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	2000      	movs	r0, #0
 80055ba:	e7db      	b.n	8005574 <__ssputs_r+0x58>
 80055bc:	462a      	mov	r2, r5
 80055be:	f000 fb6f 	bl	8005ca0 <_realloc_r>
 80055c2:	4606      	mov	r6, r0
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1e1      	bne.n	800558c <__ssputs_r+0x70>
 80055c8:	6921      	ldr	r1, [r4, #16]
 80055ca:	4650      	mov	r0, sl
 80055cc:	f000 fabe 	bl	8005b4c <_free_r>
 80055d0:	e7c7      	b.n	8005562 <__ssputs_r+0x46>
	...

080055d4 <_svfiprintf_r>:
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	4698      	mov	r8, r3
 80055da:	898b      	ldrh	r3, [r1, #12]
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	b09d      	sub	sp, #116	; 0x74
 80055e0:	4607      	mov	r7, r0
 80055e2:	460d      	mov	r5, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	d50e      	bpl.n	8005606 <_svfiprintf_r+0x32>
 80055e8:	690b      	ldr	r3, [r1, #16]
 80055ea:	b963      	cbnz	r3, 8005606 <_svfiprintf_r+0x32>
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	f000 fafd 	bl	8005bec <_malloc_r>
 80055f2:	6028      	str	r0, [r5, #0]
 80055f4:	6128      	str	r0, [r5, #16]
 80055f6:	b920      	cbnz	r0, 8005602 <_svfiprintf_r+0x2e>
 80055f8:	230c      	movs	r3, #12
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	e0d1      	b.n	80057a6 <_svfiprintf_r+0x1d2>
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	616b      	str	r3, [r5, #20]
 8005606:	2300      	movs	r3, #0
 8005608:	9309      	str	r3, [sp, #36]	; 0x24
 800560a:	2320      	movs	r3, #32
 800560c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005610:	f8cd 800c 	str.w	r8, [sp, #12]
 8005614:	2330      	movs	r3, #48	; 0x30
 8005616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057c0 <_svfiprintf_r+0x1ec>
 800561a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800561e:	f04f 0901 	mov.w	r9, #1
 8005622:	4623      	mov	r3, r4
 8005624:	469a      	mov	sl, r3
 8005626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800562a:	b10a      	cbz	r2, 8005630 <_svfiprintf_r+0x5c>
 800562c:	2a25      	cmp	r2, #37	; 0x25
 800562e:	d1f9      	bne.n	8005624 <_svfiprintf_r+0x50>
 8005630:	ebba 0b04 	subs.w	fp, sl, r4
 8005634:	d00b      	beq.n	800564e <_svfiprintf_r+0x7a>
 8005636:	465b      	mov	r3, fp
 8005638:	4622      	mov	r2, r4
 800563a:	4629      	mov	r1, r5
 800563c:	4638      	mov	r0, r7
 800563e:	f7ff ff6d 	bl	800551c <__ssputs_r>
 8005642:	3001      	adds	r0, #1
 8005644:	f000 80aa 	beq.w	800579c <_svfiprintf_r+0x1c8>
 8005648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800564a:	445a      	add	r2, fp
 800564c:	9209      	str	r2, [sp, #36]	; 0x24
 800564e:	f89a 3000 	ldrb.w	r3, [sl]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a2 	beq.w	800579c <_svfiprintf_r+0x1c8>
 8005658:	2300      	movs	r3, #0
 800565a:	f04f 32ff 	mov.w	r2, #4294967295
 800565e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005662:	f10a 0a01 	add.w	sl, sl, #1
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	9307      	str	r3, [sp, #28]
 800566a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800566e:	931a      	str	r3, [sp, #104]	; 0x68
 8005670:	4654      	mov	r4, sl
 8005672:	2205      	movs	r2, #5
 8005674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005678:	4851      	ldr	r0, [pc, #324]	; (80057c0 <_svfiprintf_r+0x1ec>)
 800567a:	f7fa fda9 	bl	80001d0 <memchr>
 800567e:	9a04      	ldr	r2, [sp, #16]
 8005680:	b9d8      	cbnz	r0, 80056ba <_svfiprintf_r+0xe6>
 8005682:	06d0      	lsls	r0, r2, #27
 8005684:	bf44      	itt	mi
 8005686:	2320      	movmi	r3, #32
 8005688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800568c:	0711      	lsls	r1, r2, #28
 800568e:	bf44      	itt	mi
 8005690:	232b      	movmi	r3, #43	; 0x2b
 8005692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005696:	f89a 3000 	ldrb.w	r3, [sl]
 800569a:	2b2a      	cmp	r3, #42	; 0x2a
 800569c:	d015      	beq.n	80056ca <_svfiprintf_r+0xf6>
 800569e:	9a07      	ldr	r2, [sp, #28]
 80056a0:	4654      	mov	r4, sl
 80056a2:	2000      	movs	r0, #0
 80056a4:	f04f 0c0a 	mov.w	ip, #10
 80056a8:	4621      	mov	r1, r4
 80056aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ae:	3b30      	subs	r3, #48	; 0x30
 80056b0:	2b09      	cmp	r3, #9
 80056b2:	d94e      	bls.n	8005752 <_svfiprintf_r+0x17e>
 80056b4:	b1b0      	cbz	r0, 80056e4 <_svfiprintf_r+0x110>
 80056b6:	9207      	str	r2, [sp, #28]
 80056b8:	e014      	b.n	80056e4 <_svfiprintf_r+0x110>
 80056ba:	eba0 0308 	sub.w	r3, r0, r8
 80056be:	fa09 f303 	lsl.w	r3, r9, r3
 80056c2:	4313      	orrs	r3, r2
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	46a2      	mov	sl, r4
 80056c8:	e7d2      	b.n	8005670 <_svfiprintf_r+0x9c>
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	1d19      	adds	r1, r3, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	9103      	str	r1, [sp, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfbb      	ittet	lt
 80056d6:	425b      	neglt	r3, r3
 80056d8:	f042 0202 	orrlt.w	r2, r2, #2
 80056dc:	9307      	strge	r3, [sp, #28]
 80056de:	9307      	strlt	r3, [sp, #28]
 80056e0:	bfb8      	it	lt
 80056e2:	9204      	strlt	r2, [sp, #16]
 80056e4:	7823      	ldrb	r3, [r4, #0]
 80056e6:	2b2e      	cmp	r3, #46	; 0x2e
 80056e8:	d10c      	bne.n	8005704 <_svfiprintf_r+0x130>
 80056ea:	7863      	ldrb	r3, [r4, #1]
 80056ec:	2b2a      	cmp	r3, #42	; 0x2a
 80056ee:	d135      	bne.n	800575c <_svfiprintf_r+0x188>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	9203      	str	r2, [sp, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bfb8      	it	lt
 80056fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005700:	3402      	adds	r4, #2
 8005702:	9305      	str	r3, [sp, #20]
 8005704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057d0 <_svfiprintf_r+0x1fc>
 8005708:	7821      	ldrb	r1, [r4, #0]
 800570a:	2203      	movs	r2, #3
 800570c:	4650      	mov	r0, sl
 800570e:	f7fa fd5f 	bl	80001d0 <memchr>
 8005712:	b140      	cbz	r0, 8005726 <_svfiprintf_r+0x152>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	eba0 000a 	sub.w	r0, r0, sl
 800571a:	fa03 f000 	lsl.w	r0, r3, r0
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	4303      	orrs	r3, r0
 8005722:	3401      	adds	r4, #1
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572a:	4826      	ldr	r0, [pc, #152]	; (80057c4 <_svfiprintf_r+0x1f0>)
 800572c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005730:	2206      	movs	r2, #6
 8005732:	f7fa fd4d 	bl	80001d0 <memchr>
 8005736:	2800      	cmp	r0, #0
 8005738:	d038      	beq.n	80057ac <_svfiprintf_r+0x1d8>
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <_svfiprintf_r+0x1f4>)
 800573c:	bb1b      	cbnz	r3, 8005786 <_svfiprintf_r+0x1b2>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	3307      	adds	r3, #7
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	3308      	adds	r3, #8
 8005748:	9303      	str	r3, [sp, #12]
 800574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574c:	4433      	add	r3, r6
 800574e:	9309      	str	r3, [sp, #36]	; 0x24
 8005750:	e767      	b.n	8005622 <_svfiprintf_r+0x4e>
 8005752:	fb0c 3202 	mla	r2, ip, r2, r3
 8005756:	460c      	mov	r4, r1
 8005758:	2001      	movs	r0, #1
 800575a:	e7a5      	b.n	80056a8 <_svfiprintf_r+0xd4>
 800575c:	2300      	movs	r3, #0
 800575e:	3401      	adds	r4, #1
 8005760:	9305      	str	r3, [sp, #20]
 8005762:	4619      	mov	r1, r3
 8005764:	f04f 0c0a 	mov.w	ip, #10
 8005768:	4620      	mov	r0, r4
 800576a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800576e:	3a30      	subs	r2, #48	; 0x30
 8005770:	2a09      	cmp	r2, #9
 8005772:	d903      	bls.n	800577c <_svfiprintf_r+0x1a8>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0c5      	beq.n	8005704 <_svfiprintf_r+0x130>
 8005778:	9105      	str	r1, [sp, #20]
 800577a:	e7c3      	b.n	8005704 <_svfiprintf_r+0x130>
 800577c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005780:	4604      	mov	r4, r0
 8005782:	2301      	movs	r3, #1
 8005784:	e7f0      	b.n	8005768 <_svfiprintf_r+0x194>
 8005786:	ab03      	add	r3, sp, #12
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	462a      	mov	r2, r5
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <_svfiprintf_r+0x1f8>)
 800578e:	a904      	add	r1, sp, #16
 8005790:	4638      	mov	r0, r7
 8005792:	f3af 8000 	nop.w
 8005796:	1c42      	adds	r2, r0, #1
 8005798:	4606      	mov	r6, r0
 800579a:	d1d6      	bne.n	800574a <_svfiprintf_r+0x176>
 800579c:	89ab      	ldrh	r3, [r5, #12]
 800579e:	065b      	lsls	r3, r3, #25
 80057a0:	f53f af2c 	bmi.w	80055fc <_svfiprintf_r+0x28>
 80057a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a6:	b01d      	add	sp, #116	; 0x74
 80057a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ac:	ab03      	add	r3, sp, #12
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <_svfiprintf_r+0x1f8>)
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	4638      	mov	r0, r7
 80057b8:	f000 f87a 	bl	80058b0 <_printf_i>
 80057bc:	e7eb      	b.n	8005796 <_svfiprintf_r+0x1c2>
 80057be:	bf00      	nop
 80057c0:	08005da0 	.word	0x08005da0
 80057c4:	08005daa 	.word	0x08005daa
 80057c8:	00000000 	.word	0x00000000
 80057cc:	0800551d 	.word	0x0800551d
 80057d0:	08005da6 	.word	0x08005da6

080057d4 <_printf_common>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	4616      	mov	r6, r2
 80057da:	4699      	mov	r9, r3
 80057dc:	688a      	ldr	r2, [r1, #8]
 80057de:	690b      	ldr	r3, [r1, #16]
 80057e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bfb8      	it	lt
 80057e8:	4613      	movlt	r3, r2
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f0:	4607      	mov	r7, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	b10a      	cbz	r2, 80057fa <_printf_common+0x26>
 80057f6:	3301      	adds	r3, #1
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	0699      	lsls	r1, r3, #26
 80057fe:	bf42      	ittt	mi
 8005800:	6833      	ldrmi	r3, [r6, #0]
 8005802:	3302      	addmi	r3, #2
 8005804:	6033      	strmi	r3, [r6, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	f015 0506 	ands.w	r5, r5, #6
 800580c:	d106      	bne.n	800581c <_printf_common+0x48>
 800580e:	f104 0a19 	add.w	sl, r4, #25
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	6832      	ldr	r2, [r6, #0]
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	42ab      	cmp	r3, r5
 800581a:	dc26      	bgt.n	800586a <_printf_common+0x96>
 800581c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005820:	1e13      	subs	r3, r2, #0
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	bf18      	it	ne
 8005826:	2301      	movne	r3, #1
 8005828:	0692      	lsls	r2, r2, #26
 800582a:	d42b      	bmi.n	8005884 <_printf_common+0xb0>
 800582c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005830:	4649      	mov	r1, r9
 8005832:	4638      	mov	r0, r7
 8005834:	47c0      	blx	r8
 8005836:	3001      	adds	r0, #1
 8005838:	d01e      	beq.n	8005878 <_printf_common+0xa4>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	68e5      	ldr	r5, [r4, #12]
 800583e:	6832      	ldr	r2, [r6, #0]
 8005840:	f003 0306 	and.w	r3, r3, #6
 8005844:	2b04      	cmp	r3, #4
 8005846:	bf08      	it	eq
 8005848:	1aad      	subeq	r5, r5, r2
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	bf0c      	ite	eq
 8005850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005854:	2500      	movne	r5, #0
 8005856:	4293      	cmp	r3, r2
 8005858:	bfc4      	itt	gt
 800585a:	1a9b      	subgt	r3, r3, r2
 800585c:	18ed      	addgt	r5, r5, r3
 800585e:	2600      	movs	r6, #0
 8005860:	341a      	adds	r4, #26
 8005862:	42b5      	cmp	r5, r6
 8005864:	d11a      	bne.n	800589c <_printf_common+0xc8>
 8005866:	2000      	movs	r0, #0
 8005868:	e008      	b.n	800587c <_printf_common+0xa8>
 800586a:	2301      	movs	r3, #1
 800586c:	4652      	mov	r2, sl
 800586e:	4649      	mov	r1, r9
 8005870:	4638      	mov	r0, r7
 8005872:	47c0      	blx	r8
 8005874:	3001      	adds	r0, #1
 8005876:	d103      	bne.n	8005880 <_printf_common+0xac>
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	3501      	adds	r5, #1
 8005882:	e7c6      	b.n	8005812 <_printf_common+0x3e>
 8005884:	18e1      	adds	r1, r4, r3
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	2030      	movs	r0, #48	; 0x30
 800588a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800588e:	4422      	add	r2, r4
 8005890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005898:	3302      	adds	r3, #2
 800589a:	e7c7      	b.n	800582c <_printf_common+0x58>
 800589c:	2301      	movs	r3, #1
 800589e:	4622      	mov	r2, r4
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c0      	blx	r8
 80058a6:	3001      	adds	r0, #1
 80058a8:	d0e6      	beq.n	8005878 <_printf_common+0xa4>
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7d9      	b.n	8005862 <_printf_common+0x8e>
	...

080058b0 <_printf_i>:
 80058b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	4691      	mov	r9, r2
 80058b8:	7e27      	ldrb	r7, [r4, #24]
 80058ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058bc:	2f78      	cmp	r7, #120	; 0x78
 80058be:	4680      	mov	r8, r0
 80058c0:	469a      	mov	sl, r3
 80058c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c6:	d807      	bhi.n	80058d8 <_printf_i+0x28>
 80058c8:	2f62      	cmp	r7, #98	; 0x62
 80058ca:	d80a      	bhi.n	80058e2 <_printf_i+0x32>
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	f000 80d8 	beq.w	8005a82 <_printf_i+0x1d2>
 80058d2:	2f58      	cmp	r7, #88	; 0x58
 80058d4:	f000 80a3 	beq.w	8005a1e <_printf_i+0x16e>
 80058d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058e0:	e03a      	b.n	8005958 <_printf_i+0xa8>
 80058e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058e6:	2b15      	cmp	r3, #21
 80058e8:	d8f6      	bhi.n	80058d8 <_printf_i+0x28>
 80058ea:	a001      	add	r0, pc, #4	; (adr r0, 80058f0 <_printf_i+0x40>)
 80058ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058f0:	08005949 	.word	0x08005949
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	080058d9 	.word	0x080058d9
 80058fc:	080058d9 	.word	0x080058d9
 8005900:	080058d9 	.word	0x080058d9
 8005904:	080058d9 	.word	0x080058d9
 8005908:	0800595d 	.word	0x0800595d
 800590c:	080058d9 	.word	0x080058d9
 8005910:	080058d9 	.word	0x080058d9
 8005914:	080058d9 	.word	0x080058d9
 8005918:	080058d9 	.word	0x080058d9
 800591c:	08005a69 	.word	0x08005a69
 8005920:	0800598d 	.word	0x0800598d
 8005924:	08005a4b 	.word	0x08005a4b
 8005928:	080058d9 	.word	0x080058d9
 800592c:	080058d9 	.word	0x080058d9
 8005930:	08005a8b 	.word	0x08005a8b
 8005934:	080058d9 	.word	0x080058d9
 8005938:	0800598d 	.word	0x0800598d
 800593c:	080058d9 	.word	0x080058d9
 8005940:	080058d9 	.word	0x080058d9
 8005944:	08005a53 	.word	0x08005a53
 8005948:	680b      	ldr	r3, [r1, #0]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	600a      	str	r2, [r1, #0]
 8005950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005958:	2301      	movs	r3, #1
 800595a:	e0a3      	b.n	8005aa4 <_printf_i+0x1f4>
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	6808      	ldr	r0, [r1, #0]
 8005960:	062e      	lsls	r6, r5, #24
 8005962:	f100 0304 	add.w	r3, r0, #4
 8005966:	d50a      	bpl.n	800597e <_printf_i+0xce>
 8005968:	6805      	ldr	r5, [r0, #0]
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	2d00      	cmp	r5, #0
 800596e:	da03      	bge.n	8005978 <_printf_i+0xc8>
 8005970:	232d      	movs	r3, #45	; 0x2d
 8005972:	426d      	negs	r5, r5
 8005974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005978:	485e      	ldr	r0, [pc, #376]	; (8005af4 <_printf_i+0x244>)
 800597a:	230a      	movs	r3, #10
 800597c:	e019      	b.n	80059b2 <_printf_i+0x102>
 800597e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005982:	6805      	ldr	r5, [r0, #0]
 8005984:	600b      	str	r3, [r1, #0]
 8005986:	bf18      	it	ne
 8005988:	b22d      	sxthne	r5, r5
 800598a:	e7ef      	b.n	800596c <_printf_i+0xbc>
 800598c:	680b      	ldr	r3, [r1, #0]
 800598e:	6825      	ldr	r5, [r4, #0]
 8005990:	1d18      	adds	r0, r3, #4
 8005992:	6008      	str	r0, [r1, #0]
 8005994:	0628      	lsls	r0, r5, #24
 8005996:	d501      	bpl.n	800599c <_printf_i+0xec>
 8005998:	681d      	ldr	r5, [r3, #0]
 800599a:	e002      	b.n	80059a2 <_printf_i+0xf2>
 800599c:	0669      	lsls	r1, r5, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0xe8>
 80059a0:	881d      	ldrh	r5, [r3, #0]
 80059a2:	4854      	ldr	r0, [pc, #336]	; (8005af4 <_printf_i+0x244>)
 80059a4:	2f6f      	cmp	r7, #111	; 0x6f
 80059a6:	bf0c      	ite	eq
 80059a8:	2308      	moveq	r3, #8
 80059aa:	230a      	movne	r3, #10
 80059ac:	2100      	movs	r1, #0
 80059ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059b2:	6866      	ldr	r6, [r4, #4]
 80059b4:	60a6      	str	r6, [r4, #8]
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	bfa2      	ittt	ge
 80059ba:	6821      	ldrge	r1, [r4, #0]
 80059bc:	f021 0104 	bicge.w	r1, r1, #4
 80059c0:	6021      	strge	r1, [r4, #0]
 80059c2:	b90d      	cbnz	r5, 80059c8 <_printf_i+0x118>
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	d04d      	beq.n	8005a64 <_printf_i+0x1b4>
 80059c8:	4616      	mov	r6, r2
 80059ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80059ce:	fb03 5711 	mls	r7, r3, r1, r5
 80059d2:	5dc7      	ldrb	r7, [r0, r7]
 80059d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059d8:	462f      	mov	r7, r5
 80059da:	42bb      	cmp	r3, r7
 80059dc:	460d      	mov	r5, r1
 80059de:	d9f4      	bls.n	80059ca <_printf_i+0x11a>
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10b      	bne.n	80059fc <_printf_i+0x14c>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	07df      	lsls	r7, r3, #31
 80059e8:	d508      	bpl.n	80059fc <_printf_i+0x14c>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6861      	ldr	r1, [r4, #4]
 80059ee:	4299      	cmp	r1, r3
 80059f0:	bfde      	ittt	le
 80059f2:	2330      	movle	r3, #48	; 0x30
 80059f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059fc:	1b92      	subs	r2, r2, r6
 80059fe:	6122      	str	r2, [r4, #16]
 8005a00:	f8cd a000 	str.w	sl, [sp]
 8005a04:	464b      	mov	r3, r9
 8005a06:	aa03      	add	r2, sp, #12
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f7ff fee2 	bl	80057d4 <_printf_common>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d14c      	bne.n	8005aae <_printf_i+0x1fe>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b004      	add	sp, #16
 8005a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1e:	4835      	ldr	r0, [pc, #212]	; (8005af4 <_printf_i+0x244>)
 8005a20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	680e      	ldr	r6, [r1, #0]
 8005a28:	061f      	lsls	r7, r3, #24
 8005a2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a2e:	600e      	str	r6, [r1, #0]
 8005a30:	d514      	bpl.n	8005a5c <_printf_i+0x1ac>
 8005a32:	07d9      	lsls	r1, r3, #31
 8005a34:	bf44      	itt	mi
 8005a36:	f043 0320 	orrmi.w	r3, r3, #32
 8005a3a:	6023      	strmi	r3, [r4, #0]
 8005a3c:	b91d      	cbnz	r5, 8005a46 <_printf_i+0x196>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f023 0320 	bic.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	2310      	movs	r3, #16
 8005a48:	e7b0      	b.n	80059ac <_printf_i+0xfc>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f043 0320 	orr.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2378      	movs	r3, #120	; 0x78
 8005a54:	4828      	ldr	r0, [pc, #160]	; (8005af8 <_printf_i+0x248>)
 8005a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a5a:	e7e3      	b.n	8005a24 <_printf_i+0x174>
 8005a5c:	065e      	lsls	r6, r3, #25
 8005a5e:	bf48      	it	mi
 8005a60:	b2ad      	uxthmi	r5, r5
 8005a62:	e7e6      	b.n	8005a32 <_printf_i+0x182>
 8005a64:	4616      	mov	r6, r2
 8005a66:	e7bb      	b.n	80059e0 <_printf_i+0x130>
 8005a68:	680b      	ldr	r3, [r1, #0]
 8005a6a:	6826      	ldr	r6, [r4, #0]
 8005a6c:	6960      	ldr	r0, [r4, #20]
 8005a6e:	1d1d      	adds	r5, r3, #4
 8005a70:	600d      	str	r5, [r1, #0]
 8005a72:	0635      	lsls	r5, r6, #24
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	d501      	bpl.n	8005a7c <_printf_i+0x1cc>
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <_printf_i+0x1d2>
 8005a7c:	0671      	lsls	r1, r6, #25
 8005a7e:	d5fb      	bpl.n	8005a78 <_printf_i+0x1c8>
 8005a80:	8018      	strh	r0, [r3, #0]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	4616      	mov	r6, r2
 8005a88:	e7ba      	b.n	8005a00 <_printf_i+0x150>
 8005a8a:	680b      	ldr	r3, [r1, #0]
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	600a      	str	r2, [r1, #0]
 8005a90:	681e      	ldr	r6, [r3, #0]
 8005a92:	6862      	ldr	r2, [r4, #4]
 8005a94:	2100      	movs	r1, #0
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7fa fb9a 	bl	80001d0 <memchr>
 8005a9c:	b108      	cbz	r0, 8005aa2 <_printf_i+0x1f2>
 8005a9e:	1b80      	subs	r0, r0, r6
 8005aa0:	6060      	str	r0, [r4, #4]
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aac:	e7a8      	b.n	8005a00 <_printf_i+0x150>
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	47d0      	blx	sl
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d0ab      	beq.n	8005a14 <_printf_i+0x164>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	079b      	lsls	r3, r3, #30
 8005ac0:	d413      	bmi.n	8005aea <_printf_i+0x23a>
 8005ac2:	68e0      	ldr	r0, [r4, #12]
 8005ac4:	9b03      	ldr	r3, [sp, #12]
 8005ac6:	4298      	cmp	r0, r3
 8005ac8:	bfb8      	it	lt
 8005aca:	4618      	movlt	r0, r3
 8005acc:	e7a4      	b.n	8005a18 <_printf_i+0x168>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d09b      	beq.n	8005a14 <_printf_i+0x164>
 8005adc:	3501      	adds	r5, #1
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	9903      	ldr	r1, [sp, #12]
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	42ab      	cmp	r3, r5
 8005ae6:	dcf2      	bgt.n	8005ace <_printf_i+0x21e>
 8005ae8:	e7eb      	b.n	8005ac2 <_printf_i+0x212>
 8005aea:	2500      	movs	r5, #0
 8005aec:	f104 0619 	add.w	r6, r4, #25
 8005af0:	e7f5      	b.n	8005ade <_printf_i+0x22e>
 8005af2:	bf00      	nop
 8005af4:	08005db1 	.word	0x08005db1
 8005af8:	08005dc2 	.word	0x08005dc2

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <memmove>:
 8005b18:	4288      	cmp	r0, r1
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	eb01 0402 	add.w	r4, r1, r2
 8005b20:	d902      	bls.n	8005b28 <memmove+0x10>
 8005b22:	4284      	cmp	r4, r0
 8005b24:	4623      	mov	r3, r4
 8005b26:	d807      	bhi.n	8005b38 <memmove+0x20>
 8005b28:	1e43      	subs	r3, r0, #1
 8005b2a:	42a1      	cmp	r1, r4
 8005b2c:	d008      	beq.n	8005b40 <memmove+0x28>
 8005b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b36:	e7f8      	b.n	8005b2a <memmove+0x12>
 8005b38:	4402      	add	r2, r0
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	428a      	cmp	r2, r1
 8005b3e:	d100      	bne.n	8005b42 <memmove+0x2a>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b4a:	e7f7      	b.n	8005b3c <memmove+0x24>

08005b4c <_free_r>:
 8005b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d048      	beq.n	8005be4 <_free_r+0x98>
 8005b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b56:	9001      	str	r0, [sp, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b5e:	bfb8      	it	lt
 8005b60:	18e4      	addlt	r4, r4, r3
 8005b62:	f000 f8d3 	bl	8005d0c <__malloc_lock>
 8005b66:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <_free_r+0x9c>)
 8005b68:	9801      	ldr	r0, [sp, #4]
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	4615      	mov	r5, r2
 8005b6e:	b933      	cbnz	r3, 8005b7e <_free_r+0x32>
 8005b70:	6063      	str	r3, [r4, #4]
 8005b72:	6014      	str	r4, [r2, #0]
 8005b74:	b003      	add	sp, #12
 8005b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b7a:	f000 b8cd 	b.w	8005d18 <__malloc_unlock>
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	d90b      	bls.n	8005b9a <_free_r+0x4e>
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	1862      	adds	r2, r4, r1
 8005b86:	4293      	cmp	r3, r2
 8005b88:	bf04      	itt	eq
 8005b8a:	681a      	ldreq	r2, [r3, #0]
 8005b8c:	685b      	ldreq	r3, [r3, #4]
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	bf04      	itt	eq
 8005b92:	1852      	addeq	r2, r2, r1
 8005b94:	6022      	streq	r2, [r4, #0]
 8005b96:	602c      	str	r4, [r5, #0]
 8005b98:	e7ec      	b.n	8005b74 <_free_r+0x28>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x58>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x4e>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1855      	adds	r5, r2, r1
 8005ba8:	42a5      	cmp	r5, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x78>
 8005bac:	6824      	ldr	r4, [r4, #0]
 8005bae:	4421      	add	r1, r4
 8005bb0:	1854      	adds	r4, r2, r1
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1dd      	bne.n	8005b74 <_free_r+0x28>
 8005bb8:	681c      	ldr	r4, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	6053      	str	r3, [r2, #4]
 8005bbe:	4421      	add	r1, r4
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	e7d7      	b.n	8005b74 <_free_r+0x28>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x80>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	6003      	str	r3, [r0, #0]
 8005bca:	e7d3      	b.n	8005b74 <_free_r+0x28>
 8005bcc:	6825      	ldr	r5, [r4, #0]
 8005bce:	1961      	adds	r1, r4, r5
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf04      	itt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	bf04      	itt	eq
 8005bdc:	1949      	addeq	r1, r1, r5
 8005bde:	6021      	streq	r1, [r4, #0]
 8005be0:	6054      	str	r4, [r2, #4]
 8005be2:	e7c7      	b.n	8005b74 <_free_r+0x28>
 8005be4:	b003      	add	sp, #12
 8005be6:	bd30      	pop	{r4, r5, pc}
 8005be8:	2000a0b0 	.word	0x2000a0b0

08005bec <_malloc_r>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	1ccd      	adds	r5, r1, #3
 8005bf0:	f025 0503 	bic.w	r5, r5, #3
 8005bf4:	3508      	adds	r5, #8
 8005bf6:	2d0c      	cmp	r5, #12
 8005bf8:	bf38      	it	cc
 8005bfa:	250c      	movcc	r5, #12
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	4606      	mov	r6, r0
 8005c00:	db01      	blt.n	8005c06 <_malloc_r+0x1a>
 8005c02:	42a9      	cmp	r1, r5
 8005c04:	d903      	bls.n	8005c0e <_malloc_r+0x22>
 8005c06:	230c      	movs	r3, #12
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0e:	f000 f87d 	bl	8005d0c <__malloc_lock>
 8005c12:	4921      	ldr	r1, [pc, #132]	; (8005c98 <_malloc_r+0xac>)
 8005c14:	680a      	ldr	r2, [r1, #0]
 8005c16:	4614      	mov	r4, r2
 8005c18:	b99c      	cbnz	r4, 8005c42 <_malloc_r+0x56>
 8005c1a:	4f20      	ldr	r7, [pc, #128]	; (8005c9c <_malloc_r+0xb0>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	b923      	cbnz	r3, 8005c2a <_malloc_r+0x3e>
 8005c20:	4621      	mov	r1, r4
 8005c22:	4630      	mov	r0, r6
 8005c24:	f000 f862 	bl	8005cec <_sbrk_r>
 8005c28:	6038      	str	r0, [r7, #0]
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 f85d 	bl	8005cec <_sbrk_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d123      	bne.n	8005c7e <_malloc_r+0x92>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 f86c 	bl	8005d18 <__malloc_unlock>
 8005c40:	e7e3      	b.n	8005c0a <_malloc_r+0x1e>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	1b5b      	subs	r3, r3, r5
 8005c46:	d417      	bmi.n	8005c78 <_malloc_r+0x8c>
 8005c48:	2b0b      	cmp	r3, #11
 8005c4a:	d903      	bls.n	8005c54 <_malloc_r+0x68>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	441c      	add	r4, r3
 8005c50:	6025      	str	r5, [r4, #0]
 8005c52:	e004      	b.n	8005c5e <_malloc_r+0x72>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	42a2      	cmp	r2, r4
 8005c58:	bf0c      	ite	eq
 8005c5a:	600b      	streq	r3, [r1, #0]
 8005c5c:	6053      	strne	r3, [r2, #4]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f85a 	bl	8005d18 <__malloc_unlock>
 8005c64:	f104 000b 	add.w	r0, r4, #11
 8005c68:	1d23      	adds	r3, r4, #4
 8005c6a:	f020 0007 	bic.w	r0, r0, #7
 8005c6e:	1ac2      	subs	r2, r0, r3
 8005c70:	d0cc      	beq.n	8005c0c <_malloc_r+0x20>
 8005c72:	1a1b      	subs	r3, r3, r0
 8005c74:	50a3      	str	r3, [r4, r2]
 8005c76:	e7c9      	b.n	8005c0c <_malloc_r+0x20>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	6864      	ldr	r4, [r4, #4]
 8005c7c:	e7cc      	b.n	8005c18 <_malloc_r+0x2c>
 8005c7e:	1cc4      	adds	r4, r0, #3
 8005c80:	f024 0403 	bic.w	r4, r4, #3
 8005c84:	42a0      	cmp	r0, r4
 8005c86:	d0e3      	beq.n	8005c50 <_malloc_r+0x64>
 8005c88:	1a21      	subs	r1, r4, r0
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f82e 	bl	8005cec <_sbrk_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	d1dd      	bne.n	8005c50 <_malloc_r+0x64>
 8005c94:	e7cf      	b.n	8005c36 <_malloc_r+0x4a>
 8005c96:	bf00      	nop
 8005c98:	2000a0b0 	.word	0x2000a0b0
 8005c9c:	2000a0b4 	.word	0x2000a0b4

08005ca0 <_realloc_r>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	460e      	mov	r6, r1
 8005ca8:	b921      	cbnz	r1, 8005cb4 <_realloc_r+0x14>
 8005caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cae:	4611      	mov	r1, r2
 8005cb0:	f7ff bf9c 	b.w	8005bec <_malloc_r>
 8005cb4:	b922      	cbnz	r2, 8005cc0 <_realloc_r+0x20>
 8005cb6:	f7ff ff49 	bl	8005b4c <_free_r>
 8005cba:	4625      	mov	r5, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc0:	f000 f830 	bl	8005d24 <_malloc_usable_size_r>
 8005cc4:	42a0      	cmp	r0, r4
 8005cc6:	d20f      	bcs.n	8005ce8 <_realloc_r+0x48>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f7ff ff8e 	bl	8005bec <_malloc_r>
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d0f2      	beq.n	8005cbc <_realloc_r+0x1c>
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4622      	mov	r2, r4
 8005cda:	f7ff ff0f 	bl	8005afc <memcpy>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff ff33 	bl	8005b4c <_free_r>
 8005ce6:	e7e9      	b.n	8005cbc <_realloc_r+0x1c>
 8005ce8:	4635      	mov	r5, r6
 8005cea:	e7e7      	b.n	8005cbc <_realloc_r+0x1c>

08005cec <_sbrk_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d06      	ldr	r5, [pc, #24]	; (8005d08 <_sbrk_r+0x1c>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fb f9e6 	bl	80010c8 <_sbrk>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_sbrk_r+0x1a>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_sbrk_r+0x1a>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	2000a214 	.word	0x2000a214

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f000 b811 	b.w	8005d34 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	2000a21c 	.word	0x2000a21c

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f000 b80c 	b.w	8005d36 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	2000a21c 	.word	0x2000a21c

08005d24 <_malloc_usable_size_r>:
 8005d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d28:	1f18      	subs	r0, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfbc      	itt	lt
 8005d2e:	580b      	ldrlt	r3, [r1, r0]
 8005d30:	18c0      	addlt	r0, r0, r3
 8005d32:	4770      	bx	lr

08005d34 <__retarget_lock_acquire_recursive>:
 8005d34:	4770      	bx	lr

08005d36 <__retarget_lock_release_recursive>:
 8005d36:	4770      	bx	lr

08005d38 <_init>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	bf00      	nop
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr

08005d44 <_fini>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr
