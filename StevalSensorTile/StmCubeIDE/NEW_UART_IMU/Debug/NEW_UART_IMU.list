
NEW_UART_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc0  08005dc0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc8  08005dc8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061a0  2000007c  08005e4c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000621c  08005e4c  0002621c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011058  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002326  00000000  00000000  00031104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262e1  00000000  00000000  00034ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efcd  00000000  00000000  0005b1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef22e  00000000  00000000  0006a176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001593a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  001593f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d24 	.word	0x08005d24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005d24 	.word	0x08005d24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800056c:	f000 fe33 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f8ac 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f98a 	bl	800088c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000578:	f000 f8ee 	bl	8000758 <MX_SPI2_Init>
  MX_UART5_Init();
 800057c:	f000 f92a 	bl	80007d4 <MX_UART5_Init>
  MX_USART2_Init();
 8000580:	f000 f958 	bl	8000834 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	Error_Handler_1();
 8000584:	f000 faa6 	bl	8000ad4 <Error_Handler_1>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	4842      	ldr	r0, [pc, #264]	; (8000698 <main+0x130>)
 8000590:	f001 f9f4 	bl	800197c <HAL_GPIO_WritePin>

	lsm6dsm_init();
 8000594:	f000 fadc 	bl	8000b50 <lsm6dsm_init>
	HAL_Delay(200);
 8000598:	20c8      	movs	r0, #200	; 0xc8
 800059a:	f000 fe91 	bl	80012c0 <HAL_Delay>

	whoami(); // check if device can be found
 800059e:	f000 fa2d 	bl	80009fc <whoami>

	sftwRESET();
 80005a2:	f000 fa07 	bl	80009b4 <sftwRESET>
	lsm6dsm_init();
 80005a6:	f000 fad3 	bl	8000b50 <lsm6dsm_init>
	HAL_Delay(200);
 80005aa:	20c8      	movs	r0, #200	; 0xc8
 80005ac:	f000 fe88 	bl	80012c0 <HAL_Delay>

	// set UART5 interrupt
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 80005b0:	2207      	movs	r2, #7
 80005b2:	493a      	ldr	r1, [pc, #232]	; (800069c <main+0x134>)
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <main+0x138>)
 80005b6:	f003 fd1b 	bl	8003ff0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // Switch on LED
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4838      	ldr	r0, [pc, #224]	; (80006a4 <main+0x13c>)
 80005c2:	f001 f9db 	bl	800197c <HAL_GPIO_WritePin>
	i=0;
 80005c6:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <main+0x140>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	801a      	strh	r2, [r3, #0]

  while (1)
  {
	  // read continously data
	  if(flag==1)
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <main+0x144>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d1fb      	bne.n	80005cc <main+0x64>
//		  	result=isKthBitSet(bufp, 1);
		  	if(1)
		  	{
		  		// memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
		  		// interrupt if PWM occurs
		  		if(i<4096)
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <main+0x140>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005dc:	d257      	bcs.n	800068e <main+0x126>
		  		{

		  			lsm6dsm_acceleration_raw_get(data_raw_acceleration);
 80005de:	4834      	ldr	r0, [pc, #208]	; (80006b0 <main+0x148>)
 80005e0:	f000 fafc 	bl	8000bdc <lsm6dsm_acceleration_raw_get>
		  			acc_x=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[0]);
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <main+0x148>)
 80005e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fade 	bl	8000bac <lsm6dsm_from_fs4g_to_mg>
 80005f0:	eef0 7a40 	vmov.f32	s15, s0
 80005f4:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0x14c>)
 80005f6:	edc3 7a00 	vstr	s15, [r3]
		  			acc_y=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[1]);
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <main+0x148>)
 80005fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fad3 	bl	8000bac <lsm6dsm_from_fs4g_to_mg>
 8000606:	eef0 7a40 	vmov.f32	s15, s0
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <main+0x150>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
		  			acc_z=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[2]);
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <main+0x148>)
 8000612:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fac8 	bl	8000bac <lsm6dsm_from_fs4g_to_mg>
 800061c:	eef0 7a40 	vmov.f32	s15, s0
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <main+0x154>)
 8000622:	edc3 7a00 	vstr	s15, [r3]
		  			accel_data_x[i]=(int16_t)acc_x;
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <main+0x14c>)
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <main+0x140>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000636:	ee17 3a90 	vmov	r3, s15
 800063a:	b219      	sxth	r1, r3
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <main+0x158>)
 800063e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			accel_data_y[i]=(int16_t)acc_y;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <main+0x150>)
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0x140>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000652:	ee17 3a90 	vmov	r3, s15
 8000656:	b219      	sxth	r1, r3
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <main+0x15c>)
 800065a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			accel_data_z[i]=(int16_t)acc_z;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <main+0x154>)
 8000660:	edd3 7a00 	vldr	s15, [r3]
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x140>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066e:	ee17 3a90 	vmov	r3, s15
 8000672:	b219      	sxth	r1, r3
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <main+0x160>)
 8000676:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			// time[i]=HAL_GetTick();
		  			i++;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <main+0x140>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <main+0x140>)
 8000684:	801a      	strh	r2, [r3, #0]
		  			flag=0;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x144>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e79e      	b.n	80005cc <main+0x64>
		  		}
		  		else{
		  			i=0;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <main+0x140>)
 8000690:	2200      	movs	r2, #0
 8000692:	801a      	strh	r2, [r3, #0]
	  if(flag==1)
 8000694:	e79a      	b.n	80005cc <main+0x64>
 8000696:	bf00      	nop
 8000698:	48000400 	.word	0x48000400
 800069c:	20000098 	.word	0x20000098
 80006a0:	20006124 	.word	0x20006124
 80006a4:	48001800 	.word	0x48001800
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	20000008 	.word	0x20000008
 80006b0:	200060a4 	.word	0x200060a4
 80006b4:	200061fc 	.word	0x200061fc
 80006b8:	20006120 	.word	0x20006120
 80006bc:	20006204 	.word	0x20006204
 80006c0:	200000a4 	.word	0x200000a4
 80006c4:	200020a4 	.word	0x200020a4
 80006c8:	200040a4 	.word	0x200040a4

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	; 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	; 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 feec 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f2:	f001 f981 	bl	80019f8 <HAL_PWREx_ControlVoltageScaling>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006fc:	f000 fb4a 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2310      	movs	r3, #16
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070e:	2300      	movs	r3, #0
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f9d4 	bl	8001ac4 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000722:	f000 fb37 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fda5 	bl	8002290 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800074c:	f000 fb22 	bl	8000d94 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_SPI2_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_SPI2_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_SPI2_Init+0x74>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_SPI2_Init+0x74>)
 800076c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000770:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI2_Init+0x74>)
 8000774:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000778:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI2_Init+0x74>)
 800077c:	2202      	movs	r2, #2
 800077e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI2_Init+0x74>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI2_Init+0x74>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_SPI2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI2_Init+0x74>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI2_Init+0x74>)
 80007ba:	f002 fc2b 	bl	8003014 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 fae6 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200060b8 	.word	0x200060b8
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_UART5_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_UART5_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_UART5_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_UART5_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_UART5_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_UART5_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_UART5_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_UART5_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_UART5_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_UART5_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_UART5_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_UART5_Init+0x58>)
 8000818:	f003 fb08 	bl	8003e2c <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 fab7 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20006124 	.word	0x20006124
 8000830:	40005000 	.word	0x40005000

08000834 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_USART2_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_USART2_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_Init+0x50>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_USART2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_USART2_Init+0x50>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_USART2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_USART2_Init+0x50>)
 8000872:	f004 fbdd 	bl	8005030 <HAL_USART_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 fa8a 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200061ac 	.word	0x200061ac
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a3f      	ldr	r2, [pc, #252]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a39      	ldr	r2, [pc, #228]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80008ea:	f001 f8db 	bl	8001aa4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0x118>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_GPIO_Init+0x118>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <MX_GPIO_Init+0x118>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_GPIO_Init+0x118>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	4820      	ldr	r0, [pc, #128]	; (80009a8 <MX_GPIO_Init+0x11c>)
 8000926:	f001 f829 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_GPIO_Init+0x120>)
 8000932:	f001 f823 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4816      	ldr	r0, [pc, #88]	; (80009a8 <MX_GPIO_Init+0x11c>)
 8000950:	f000 fe6a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWMI_RAS_Pin */
  GPIO_InitStruct.Pin = PWMI_RAS_Pin;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_GPIO_Init+0x124>)
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWMI_RAS_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_GPIO_Init+0x120>)
 800096a:	f000 fe5d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <MX_GPIO_Init+0x120>)
 8000988:	f000 fe4e 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2017      	movs	r0, #23
 8000992:	f000 fd94 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000996:	2017      	movs	r0, #23
 8000998:	f000 fdad 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48001800 	.word	0x48001800
 80009ac:	48000400 	.word	0x48000400
 80009b0:	10110000 	.word	0x10110000

080009b4 <sftwRESET>:

/* USER CODE BEGIN 4 */
uint8_t sftwRESET(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint32_t len =1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
	uint8_t bufp;
	uint8_t read_reg;
	// LSM6DS3H_REG_CTRL3_C
	// set 3-wire SPI mode
	// set block data update
	bufp=0b11111110;
 80009be:	23fe      	movs	r3, #254	; 0xfe
 80009c0:	70bb      	strb	r3, [r7, #2]
	uint8_t reg=LSM6DS3H_REG_CTRL3_C;
 80009c2:	2312      	movs	r3, #18
 80009c4:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_read(&hspi2, reg, &read_reg, len);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	1c7a      	adds	r2, r7, #1
 80009cc:	78f9      	ldrb	r1, [r7, #3]
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <sftwRESET+0x44>)
 80009d0:	f000 f950 	bl	8000c74 <lsm6ds3_read>
	bufp&=read_reg;
 80009d4:	78ba      	ldrb	r2, [r7, #2]
 80009d6:	787b      	ldrb	r3, [r7, #1]
 80009d8:	4013      	ands	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	70bb      	strb	r3, [r7, #2]
	lsm6ds3_write(&hspi2,reg, &bufp, len);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	1cba      	adds	r2, r7, #2
 80009e4:	78f9      	ldrb	r1, [r7, #3]
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <sftwRESET+0x44>)
 80009e8:	f000 f98a 	bl	8000d00 <lsm6ds3_write>
}
 80009ec:	bf00      	nop
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200060b8 	.word	0x200060b8

080009fc <whoami>:


void whoami(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	// adr_WHO_AM_I has to be 0x6a
	uint8_t who_am_i=0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71bb      	strb	r3, [r7, #6]
	uint8_t who_am_i_reg=0x0f;
 8000a06:	230f      	movs	r3, #15
 8000a08:	71fb      	strb	r3, [r7, #7]

	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000a0a:	1dba      	adds	r2, r7, #6
 8000a0c:	79f9      	ldrb	r1, [r7, #7]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <whoami+0x40>)
 8000a12:	f000 f92f 	bl	8000c74 <lsm6ds3_read>

	if(who_am_i!=0x6a)
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	2b6a      	cmp	r3, #106	; 0x6a
 8000a1a:	d00a      	beq.n	8000a32 <whoami+0x36>
		// error when jumping in here
		// device not found!!!
		// possible problems can be wrong DEBUG port is used
		while(1)
		{
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000a1c:	1dba      	adds	r2, r7, #6
 8000a1e:	79f9      	ldrb	r1, [r7, #7]
 8000a20:	2301      	movs	r3, #1
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <whoami+0x40>)
 8000a24:	f000 f926 	bl	8000c74 <lsm6ds3_read>
			if(who_am_i==0x6a){break;}
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b6a      	cmp	r3, #106	; 0x6a
 8000a2c:	d000      	beq.n	8000a30 <whoami+0x34>
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000a2e:	e7f5      	b.n	8000a1c <whoami+0x20>
			if(who_am_i==0x6a){break;}
 8000a30:	bf00      	nop
		}
	}
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200060b8 	.word	0x200060b8

08000a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0c6      	sub	sp, #280	; 0x118
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	6018      	str	r0, [r3, #0]
	// __NOP(); // used to debug the Callback
	int size;
	char data_s[256];
	uint16_t length_data_array=4096;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

	for(int j=0; j<length_data_array;j++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a58:	e01c      	b.n	8000a94 <HAL_UART_RxCpltCallback+0x54>
	{
		size=sprintf(data_s, "%05d\n",accel_data_z[j]);
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_UART_RxCpltCallback+0x7c>)
 8000a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4915      	ldr	r1, [pc, #84]	; (8000ac0 <HAL_UART_RxCpltCallback+0x80>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 fd2b 	bl	80054c8 <siprintf>
 8000a72:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		HAL_UART_Transmit(&huart5,(uint8_t *)data_s, size, Timeout);
 8000a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_UART_RxCpltCallback+0x84>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f107 010c 	add.w	r1, r7, #12
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <HAL_UART_RxCpltCallback+0x88>)
 8000a86:	f003 fa1f 	bl	8003ec8 <HAL_UART_Transmit>
	for(int j=0; j<length_data_array;j++)
 8000a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a94:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8000a98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbdc      	blt.n	8000a5a <HAL_UART_RxCpltCallback+0x1a>
	//		size = sprintf(data_s, "X: %d,Y: %d,Z :%d\r\n",accel_data_x[j],accel_data_y[j],accel_data_z[j]);
	}
	i=0;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_UART_RxCpltCallback+0x8c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <HAL_UART_RxCpltCallback+0x90>)
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <HAL_UART_RxCpltCallback+0x88>)
 8000aac:	f003 faa0 	bl	8003ff0 <HAL_UART_Receive_IT>
}
 8000ab0:	bf00      	nop
 8000ab2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200040a4 	.word	0x200040a4
 8000ac0:	08005d3c 	.word	0x08005d3c
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20006124 	.word	0x20006124
 8000acc:	200000a0 	.word	0x200000a0
 8000ad0:	20000098 	.word	0x20000098

08000ad4 <Error_Handler_1>:

static void Error_Handler_1(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <Error_Handler_1+0x78>)
 8000ae0:	f000 ff4c 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000ae4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ae8:	f000 fbea 	bl	80012c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	4816      	ldr	r0, [pc, #88]	; (8000b4c <Error_Handler_1+0x78>)
 8000af4:	f000 ff42 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000af8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000afc:	f000 fbe0 	bl	80012c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <Error_Handler_1+0x78>)
 8000b08:	f000 ff38 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b10:	f000 fbd6 	bl	80012c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <Error_Handler_1+0x78>)
 8000b1c:	f000 ff2e 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000b20:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b24:	f000 fbcc 	bl	80012c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <Error_Handler_1+0x78>)
 8000b30:	f000 ff24 	bl	800197c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000b34:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b38:	f000 fbc2 	bl	80012c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	4802      	ldr	r0, [pc, #8]	; (8000b4c <Error_Handler_1+0x78>)
 8000b44:	f000 ff1a 	bl	800197c <HAL_GPIO_WritePin>
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48001800 	.word	0x48001800

08000b50 <lsm6dsm_init>:

void lsm6dsm_init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint32_t len =1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
	uint8_t bufp;
	uint8_t read_reg;
	// LSM6DS3H_REG_CTRL3_C
	// set 3-wire SPI mode
	// set block data update
	bufp=0b01001100;
 8000b5a:	234c      	movs	r3, #76	; 0x4c
 8000b5c:	70bb      	strb	r3, [r7, #2]
	uint8_t reg=LSM6DS3H_REG_CTRL3_C;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2,reg, &bufp, len);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	1cba      	adds	r2, r7, #2
 8000b68:	78f9      	ldrb	r1, [r7, #3]
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <lsm6dsm_init+0x58>)
 8000b6c:	f000 f8c8 	bl	8000d00 <lsm6ds3_write>
	// Values for acceleration
	// ODR_XL set to 6.66kHz
	// FS of accelerometer set to +- 4g
	// BW0_XL BW set to 400Hz

	bufp=0b10011000;
 8000b70:	2398      	movs	r3, #152	; 0x98
 8000b72:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL1_XL;
 8000b74:	2310      	movs	r3, #16
 8000b76:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_read(&hspi2, reg, &read_reg, len);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	1c7a      	adds	r2, r7, #1
 8000b7e:	78f9      	ldrb	r1, [r7, #3]
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <lsm6dsm_init+0x58>)
 8000b82:	f000 f877 	bl	8000c74 <lsm6ds3_read>
	bufp|=read_reg;
 8000b86:	78ba      	ldrb	r2, [r7, #2]
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	70bb      	strb	r3, [r7, #2]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1cba      	adds	r2, r7, #2
 8000b96:	78f9      	ldrb	r1, [r7, #3]
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <lsm6dsm_init+0x58>)
 8000b9a:	f000 f8b1 	bl	8000d00 <lsm6ds3_write>
//	// disable FIFO
//	reg=0x0a; //LSM6ds3h_reg_ctrl5
//	bufp=00000000;
//	lsm6ds3_write(&hspi2, reg, &bufp, len);

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200060b8 	.word	0x200060b8

08000bac <lsm6dsm_from_fs4g_to_mg>:
{
  return ((float)lsb * 0.061f);
}

float lsm6dsm_from_fs4g_to_mg(int16_t lsb)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb * 0.122f);
 8000bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000bd8 <lsm6dsm_from_fs4g_to_mg+0x2c>
 8000bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	3df9db23 	.word	0x3df9db23

08000bdc <lsm6dsm_acceleration_raw_get>:
	return 0;

}

int32_t lsm6dsm_acceleration_raw_get(int16_t *val)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint8_t buff[6];
  int32_t ret;

  lsm6ds3_read(&hspi2, LSM6DS3H_REG_OUTX_L_XL, &buff, 6);
 8000be4:	f107 020c 	add.w	r2, r7, #12
 8000be8:	2306      	movs	r3, #6
 8000bea:	2128      	movs	r1, #40	; 0x28
 8000bec:	4820      	ldr	r0, [pc, #128]	; (8000c70 <lsm6dsm_acceleration_raw_get+0x94>)
 8000bee:	f000 f841 	bl	8000c74 <lsm6ds3_read>
  val[0] = (int16_t)buff[1];
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	7b3b      	ldrb	r3, [r7, #12]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	b212      	sxth	r2, r2
 8000c1c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3302      	adds	r3, #2
 8000c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3302      	adds	r3, #2
 8000c38:	b212      	sxth	r2, r2
 8000c3a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000c3c:	7c7a      	ldrb	r2, [r7, #17]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3304      	adds	r3, #4
 8000c42:	b212      	sxth	r2, r2
 8000c44:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	7c3b      	ldrb	r3, [r7, #16]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	b212      	sxth	r2, r2
 8000c62:	801a      	strh	r2, [r3, #0]

  return ret;
 8000c64:	697b      	ldr	r3, [r7, #20]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200060b8 	.word	0x200060b8

08000c74 <lsm6ds3_read>:
	return 0;

}

static int32_t lsm6ds3_read(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	460b      	mov	r3, r1
 8000c82:	72fb      	strb	r3, [r7, #11]
 8000c84:	4613      	mov	r3, r2
 8000c86:	813b      	strh	r3, [r7, #8]
	reg |= 0x80; // set MSB to one for read operation
 8000c88:	7afb      	ldrb	r3, [r7, #11]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <lsm6ds3_read+0x80>)
 8000c9a:	f000 fe6f 	bl	800197c <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <lsm6ds3_read+0x84>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f107 010b 	add.w	r1, r7, #11
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f002 fa56 	bl	800315a <HAL_SPI_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <lsm6ds3_read+0x88>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Receive(handle, bufp, len, TIMEOUT_DURATION);
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <lsm6ds3_read+0x84>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	893a      	ldrh	r2, [r7, #8]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f002 fbb9 	bl	8003436 <HAL_SPI_Receive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <lsm6ds3_read+0x88>)
 8000cca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <lsm6ds3_read+0x80>)
 8000cd4:	f000 fe52 	bl	800197c <HAL_GPIO_WritePin>
	while(status_spi!=HAL_OK)
 8000cd8:	bf00      	nop
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <lsm6ds3_read+0x88>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <lsm6ds3_read+0x74>
	{
		// spi communication isnt finished or something failed
		return -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e000      	b.n	8000cea <lsm6ds3_read+0x76>
	}
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000611c 	.word	0x2000611c

08000d00 <lsm6ds3_write>:

static int32_t lsm6ds3_write(void *handle, uint8_t reg,uint8_t *bufp,uint16_t len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	72fb      	strb	r3, [r7, #11]
 8000d10:	4613      	mov	r3, r2
 8000d12:	813b      	strh	r3, [r7, #8]
	reg |= 0x00;
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <lsm6ds3_write+0x68>)
 8000d20:	f000 fe2c 	bl	800197c <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <lsm6ds3_write+0x6c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f107 010b 	add.w	r1, r7, #11
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f002 fa13 	bl	800315a <HAL_SPI_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <lsm6ds3_write+0x70>)
 8000d3a:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Transmit(handle, bufp, len, TIMEOUT_DURATION);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <lsm6ds3_write+0x6c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	893a      	ldrh	r2, [r7, #8]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f002 fa08 	bl	800315a <HAL_SPI_Transmit>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <lsm6ds3_write+0x70>)
 8000d50:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <lsm6ds3_write+0x68>)
 8000d5a:	f000 fe0f 	bl	800197c <HAL_GPIO_WritePin>

  return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	2000611c 	.word	0x2000611c

08000d74 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
//		accel_data_y[i]=(int16_t)acc_y;
//		accel_data_z[i]=(int16_t)acc_z;
//		i++;
//	}
//	else{i=0;}
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000008 	.word	0x20000008

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	; 0x60
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x7c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d128      	bne.n	8000e5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8000e3a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_SPI_MspInit+0x84>)
 8000e58:	f000 fbe6 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40003800 	.word	0x40003800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ac      	sub	sp, #176	; 0xb0
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2288      	movs	r2, #136	; 0x88
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fb11 	bl	80054b8 <memset>
  if(huart->Instance==UART5)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a36      	ldr	r2, [pc, #216]	; (8000f74 <HAL_UART_MspInit+0x104>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d164      	bne.n	8000f6a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fbf5 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff ff6c 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_UART_MspInit+0x108>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f04:	2304      	movs	r3, #4
 8000f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0x10c>)
 8000f2a:	f000 fb7d 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f52:	4619      	mov	r1, r3
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <HAL_UART_MspInit+0x110>)
 8000f56:	f000 fb67 	bl	8001628 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2035      	movs	r0, #53	; 0x35
 8000f60:	f000 faad 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f64:	2035      	movs	r0, #53	; 0x35
 8000f66:	f000 fac6 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	37b0      	adds	r7, #176	; 0xb0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005000 	.word	0x40005000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	48000800 	.word	0x48000800

08000f84 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0ac      	sub	sp, #176	; 0xb0
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2288      	movs	r2, #136	; 0x88
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fa87 	bl	80054b8 <memset>
  if(husart->Instance==USART2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <HAL_USART_MspInit+0xb0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d13b      	bne.n	800102c <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fb6b 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000fcc:	f7ff fee2 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_USART_MspInit+0xb4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8001000:	231c      	movs	r3, #28
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001018:	2307      	movs	r3, #7
 800101a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 fafe 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	37b0      	adds	r7, #176	; 0xb0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40004400 	.word	0x40004400
 8001038:	40021000 	.word	0x40021000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f8fa 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001094:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001098:	f000 fc88 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <UART5_IRQHandler+0x10>)
 80010a6:	f002 ffe7 	bl	8004078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20006124 	.word	0x20006124

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f004 f9be 	bl	8005464 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20018000 	.word	0x20018000
 8001114:	00000400 	.word	0x00000400
 8001118:	200060ac 	.word	0x200060ac
 800111c:	20006220 	.word	0x20006220

08001120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <SystemInit+0x5c>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <SystemInit+0x5c>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <SystemInit+0x60>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <SystemInit+0x60>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <SystemInit+0x60>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <SystemInit+0x60>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <SystemInit+0x60>)
 800114c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001150:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001154:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <SystemInit+0x60>)
 8001158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800115c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SystemInit+0x60>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SystemInit+0x60>)
 8001164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SystemInit+0x60>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	40021000 	.word	0x40021000

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ffca 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800118c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800119e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
	ldr	r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a8:	f842 3b04 	str.w	r3, [r2], #4

080011ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <LoopForever+0x16>)
	cmp	r2, r3
 80011ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 f95d 	bl	8005470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff f9d7 	bl	8000568 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011c0:	08005dd0 	.word	0x08005dd0
	ldr	r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011c8:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80011cc:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80011d0:	2000621c 	.word	0x2000621c

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>

080011d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f961 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f80e 	bl	8001208 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e001      	b.n	80011fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f8:	f7ff fdd2 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_InitTick+0x6c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d023      	beq.n	8001264 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_InitTick+0x70>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x6c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f96d 	bl	8001512 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10f      	bne.n	800125e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d809      	bhi.n	8001258 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f937 	bl	80014be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_InitTick+0x74>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e007      	b.n	8001268 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e004      	b.n	8001268 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e001      	b.n	8001268 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000014 	.word	0x20000014
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000010 	.word	0x20000010

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000014 	.word	0x20000014
 80012a4:	20006208 	.word	0x20006208

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20006208 	.word	0x20006208

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000014 	.word	0x20000014

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d008      	beq.n	8001554 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e022      	b.n	800159a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 021c 	and.w	r2, r3, #28
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f202 	lsl.w	r2, r1, r2
 8001586:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d005      	beq.n	80015ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e029      	b.n	800161e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 020e 	bic.w	r2, r2, #14
 80015d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 021c 	and.w	r2, r3, #28
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
    }
  }
  return status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e17f      	b.n	8001938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8171 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d00b      	beq.n	8001670 <HAL_GPIO_Init+0x48>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001664:	2b11      	cmp	r3, #17
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b12      	cmp	r3, #18
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d118      	bne.n	8001710 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x128>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80ac 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f2:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_GPIO_Init+0x334>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181c:	d025      	beq.n	800186a <HAL_GPIO_Init+0x242>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_GPIO_Init+0x338>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x33c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <HAL_GPIO_Init+0x340>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_GPIO_Init+0x344>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <HAL_GPIO_Init+0x348>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <HAL_GPIO_Init+0x34c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x22a>
 800184e:	2306      	movs	r3, #6
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001852:	2307      	movs	r3, #7
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x244>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x334>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_GPIO_Init+0x350>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x350>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x350>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_GPIO_Init+0x350>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae78 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	48001800 	.word	0x48001800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f9d2 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a06:	d130      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d038      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2232      	movs	r2, #50	; 0x32
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3c:	e002      	b.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d102      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f2      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d110      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e00f      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d007      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6053      	str	r3, [r2, #4]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3d4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	4ba1      	ldr	r3, [pc, #644]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae0:	4b9e      	ldr	r3, [pc, #632]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80e4 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4a>
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	f040 808b 	bne.w	8001c1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 8087 	bne.w	8001c1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0e:	4b93      	ldr	r3, [pc, #588]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e3ac      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_RCC_OscConfig+0x7c>
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3e:	e005      	b.n	8001b4c <HAL_RCC_OscConfig+0x88>
 8001b40:	4b86      	ldr	r3, [pc, #536]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d223      	bcs.n	8001b98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fd41 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e38d      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b64:	4b7d      	ldr	r3, [pc, #500]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7c      	ldr	r2, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4977      	ldr	r1, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4972      	ldr	r1, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	e025      	b.n	8001be4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b98:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	496a      	ldr	r1, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb6:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	4965      	ldr	r1, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd01 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e34d      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be4:	f000 fc36 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	495a      	ldr	r1, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x29c>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_OscConfig+0x2a0>)
 8001c02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x2a4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fafd 	bl	8001208 <HAL_InitTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d052      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	e331      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d032      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb3a 	bl	80012a8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c38:	f7ff fb36 	bl	80012a8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e31a      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	493b      	ldr	r1, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	4936      	ldr	r1, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	e01a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a33      	ldr	r2, [pc, #204]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb07 	bl	80012a8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fb03 	bl	80012a8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e2e7      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1da>
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d074      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x21a>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d064      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d160      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e2c4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x24a>
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e01d      	b.n	8001d4a <HAL_RCC_OscConfig+0x286>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x26e>
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x286>
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff faa9 	bl	80012a8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d58:	e011      	b.n	8001d7e <HAL_RCC_OscConfig+0x2ba>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08005d44 	.word	0x08005d44
 8001d64:	2000000c 	.word	0x2000000c
 8001d68:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fa9c 	bl	80012a8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e280      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4baf      	ldr	r3, [pc, #700]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x2a8>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fa8c 	bl	80012a8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fa88 	bl	80012a8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e26c      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	4ba5      	ldr	r3, [pc, #660]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d0>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d060      	beq.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x310>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d116      	bne.n	8001e02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x328>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e249      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	4990      	ldr	r1, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	e040      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d023      	beq.n	8001e52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	4b8c      	ldr	r3, [pc, #560]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8b      	ldr	r2, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff fa47 	bl	80012a8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa43 	bl	80012a8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e227      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	497c      	ldr	r1, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e018      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a79      	ldr	r2, [pc, #484]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fa23 	bl	80012a8 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff fa1f 	bl	80012a8 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e203      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f9fe 	bl	80012a8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f9fa 	bl	80012a8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1de      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x3ec>
 8001ed0:	e01b      	b.n	8001f0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f9e1 	bl	80012a8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eea:	f7ff f9dd 	bl	80012a8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1c1      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ef      	bne.n	8001eea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a6 	beq.w	8002064 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f9a4 	bl	80012a8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7ff f9a0 	bl	80012a8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e184      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9a:	e024      	b.n	8001fe6 <HAL_RCC_OscConfig+0x522>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d110      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x502>
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc4:	e00f      	b.n	8001fe6 <HAL_RCC_OscConfig+0x522>
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f95b 	bl	80012a8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f957 	bl	80012a8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e139      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x578>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ed      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x532>
 800201a:	e01a      	b.n	8002052 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff f944 	bl	80012a8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7ff f940 	bl	80012a8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d906      	bls.n	8002044 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e122      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002044:	4b90      	ldr	r3, [pc, #576]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e8      	bne.n	8002024 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a8a      	ldr	r2, [pc, #552]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8108 	beq.w	800227e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	2b02      	cmp	r3, #2
 8002074:	f040 80d0 	bne.w	8002218 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002078:	4b83      	ldr	r3, [pc, #524]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	429a      	cmp	r2, r3
 800208a:	d130      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	3b01      	subs	r3, #1
 8002098:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d127      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11f      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	2a07      	cmp	r2, #7
 80020ba:	bf14      	ite	ne
 80020bc:	2201      	movne	r2, #1
 80020be:	2200      	moveq	r2, #0
 80020c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d06e      	beq.n	80021cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d069      	beq.n	80021c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020f4:	4b64      	ldr	r3, [pc, #400]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b7      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002110:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211c:	f7ff f8c4 	bl	80012a8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f8c0 	bl	80012a8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0a4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002136:	4b54      	ldr	r3, [pc, #336]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x7c8>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002152:	3a01      	subs	r2, #1
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215c:	0212      	lsls	r2, r2, #8
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0552      	lsls	r2, r2, #21
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	0652      	lsls	r2, r2, #25
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217c:	0912      	lsrs	r2, r2, #4
 800217e:	0452      	lsls	r2, r2, #17
 8002180:	430a      	orrs	r2, r1
 8002182:	4941      	ldr	r1, [pc, #260]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a0:	f7ff f882 	bl	80012a8 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f87e 	bl	80012a8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e062      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c6:	e05a      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e059      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d152      	bne.n	800227e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f0:	f7ff f85a 	bl	80012a8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f856 	bl	80012a8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e03a      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x734>
 8002216:	e032      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d02d      	beq.n	800227a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002248:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800224c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002250:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f829 	bl	80012a8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f825 	bl	80012a8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e009      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x796>
 8002278:	e001      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	f99d808c 	.word	0xf99d808c

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0c8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4961      	ldr	r1, [pc, #388]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b0      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d04c      	beq.n	800237a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d121      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e09e      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d115      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e092      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e086      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e07e      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 0203 	bic.w	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	493f      	ldr	r1, [pc, #252]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234a:	f7fe ffad 	bl	80012a8 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002350:	e00a      	b.n	8002368 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7fe ffa9 	bl	80012a8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e066      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 020c 	and.w	r2, r3, #12
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	429a      	cmp	r2, r3
 8002378:	d1eb      	bne.n	8002352 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	492c      	ldr	r1, [pc, #176]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4924      	ldr	r1, [pc, #144]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e036      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4910      	ldr	r1, [pc, #64]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002406:	f000 f825 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490c      	ldr	r1, [pc, #48]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe feec 	bl	8001208 <HAL_InitTick>
 8002430:	4603      	mov	r3, r0
 8002432:	72fb      	strb	r3, [r7, #11]

  return status;
 8002434:	7afb      	ldrb	r3, [r7, #11]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	08005d44 	.word	0x08005d44
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000010 	.word	0x20000010

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x34>
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11e      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e004      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d134      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0xa6>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d003      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xac>
 80024f8:	e005      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e002      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0e5b      	lsrs	r3, r3, #25
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800254c:	69bb      	ldr	r3, [r7, #24]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	08005d5c 	.word	0x08005d5c
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	2000000c 	.word	0x2000000c

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4904      	ldr	r1, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08005d54 	.word	0x08005d54

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b4:	f7ff ffda 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0adb      	lsrs	r3, r3, #11
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08005d54 	.word	0x08005d54

080025dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025f4:	f7ff f9f2 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 80025f8:	6178      	str	r0, [r7, #20]
 80025fa:	e014      	b.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002614:	f7ff f9e2 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 8002618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262c:	d10b      	bne.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d919      	bls.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2ba0      	cmp	r3, #160	; 0xa0
 8002638:	d902      	bls.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263a:	2302      	movs	r3, #2
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	e013      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e010      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d902      	bls.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800264c:	2303      	movs	r3, #3
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e00a      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d102      	bne.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002658:	2302      	movs	r3, #2
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e004      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d101      	bne.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002664:	2301      	movs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0207 	bic.w	r2, r3, #7
 8002670:	4909      	ldr	r1, [pc, #36]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	429a      	cmp	r2, r3
 8002684:	d001      	beq.n	800268a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	40022000 	.word	0x40022000

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a8:	2300      	movs	r3, #0
 80026aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d041      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c0:	d02a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c6:	d824      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026d2:	d81e      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026dc:	d010      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026de:	e018      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e0:	4b86      	ldr	r3, [pc, #536]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a85      	ldr	r2, [pc, #532]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ec:	e015      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fabb 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fe:	e00c      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3320      	adds	r3, #32
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fba6 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002710:	e003      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	74fb      	strb	r3, [r7, #19]
      break;
 8002716:	e000      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272e:	4973      	ldr	r1, [pc, #460]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002736:	e001      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d041      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002750:	d02a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002756:	d824      	bhi.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800275e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002762:	d81e      	bhi.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d010      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800276e:	e018      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277c:	e015      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa73 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278e:	e00c      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3320      	adds	r3, #32
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb5e 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a0:	e003      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	74fb      	strb	r3, [r7, #19]
      break;
 80027a6:	e000      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027be:	494f      	ldr	r1, [pc, #316]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027c6:	e001      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a0 	beq.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a40      	ldr	r2, [pc, #256]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281c:	f7fe fd44 	bl	80012a8 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fd40 	bl	80012a8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	74fb      	strb	r3, [r7, #19]
        break;
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d15c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	d019      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fcff 	bl	80012a8 <HAL_GetTick>
 80028aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	e00b      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fcfb 	bl	80012a8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d902      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	74fb      	strb	r3, [r7, #19]
            break;
 80028c4:	e006      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ec      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028f2:	e009      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
 80028f8:	e006      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002908:	7c7b      	ldrb	r3, [r7, #17]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b9e      	ldr	r3, [pc, #632]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4a9d      	ldr	r2, [pc, #628]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002926:	4b98      	ldr	r3, [pc, #608]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	4994      	ldr	r1, [pc, #592]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002948:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 020c 	bic.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	498c      	ldr	r1, [pc, #560]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296a:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4983      	ldr	r1, [pc, #524]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800298c:	4b7e      	ldr	r3, [pc, #504]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	497b      	ldr	r1, [pc, #492]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ae:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	4972      	ldr	r1, [pc, #456]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d0:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	496a      	ldr	r1, [pc, #424]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	4961      	ldr	r1, [pc, #388]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a14:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	4959      	ldr	r1, [pc, #356]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a36:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a44:	4950      	ldr	r1, [pc, #320]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a58:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	4948      	ldr	r1, [pc, #288]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	493f      	ldr	r1, [pc, #252]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d028      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aba:	d106      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac6:	60d3      	str	r3, [r2, #12]
 8002ac8:	e011      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8c8 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	491f      	ldr	r1, [pc, #124]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b24:	60d3      	str	r3, [r2, #12]
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f899 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02b      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a02      	ldr	r2, [pc, #8]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
 8002b84:	e014      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f867 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	4928      	ldr	r1, [pc, #160]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2102      	movs	r1, #2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f844 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	74bb      	strb	r3, [r7, #18]
 8002bf6:	e011      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3320      	adds	r3, #32
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f925 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5a:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7e:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d018      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d047      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e044      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d018      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x86>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d825      	bhi.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x62>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d009      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x74>
 8002cd0:	e020      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e01a      	b.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce4:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e013      	b.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d12:	e006      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e004      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	4944      	ldr	r1, [pc, #272]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d17d      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d4c:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe faa6 	bl	80012a8 <HAL_GetTick>
 8002d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d5e:	e009      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d60:	f7fe faa2 	bl	80012a8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
        break;
 8002d72:	e005      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ef      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d160      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	0211      	lsls	r1, r2, #8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	0912      	lsrs	r2, r2, #4
 8002da4:	0452      	lsls	r2, r2, #17
 8002da6:	430a      	orrs	r2, r1
 8002da8:	492a      	ldr	r1, [pc, #168]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]
 8002dae:	e027      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d112      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	0211      	lsls	r1, r2, #8
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6912      	ldr	r2, [r2, #16]
 8002dcc:	0852      	lsrs	r2, r2, #1
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0552      	lsls	r2, r2, #21
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	491f      	ldr	r1, [pc, #124]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	610b      	str	r3, [r1, #16]
 8002dda:	e011      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	0211      	lsls	r1, r2, #8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6952      	ldr	r2, [r2, #20]
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0652      	lsls	r2, r2, #25
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4916      	ldr	r1, [pc, #88]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fa4c 	bl	80012a8 <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e14:	f7fe fa48 	bl	80012a8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
          break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
       ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d047      	beq.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e044      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d018      	beq.n	8002ede <RCCEx_PLLSAI2_Config+0x86>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d825      	bhi.n	8002efc <RCCEx_PLLSAI2_Config+0xa4>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x62>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d009      	beq.n	8002ecc <RCCEx_PLLSAI2_Config+0x74>
 8002eb8:	e020      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eba:	4b55      	ldr	r3, [pc, #340]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e01a      	b.n	8002f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e013      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ede:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efa:	e006      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e004      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4939      	ldr	r1, [pc, #228]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d167      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a35      	ldr	r2, [pc, #212]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe f9b2 	bl	80012a8 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f48:	f7fe f9ae 	bl	80012a8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ef      	bne.n	8002f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d14a      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0912      	lsrs	r2, r2, #4
 8002f8c:	0452      	lsls	r2, r2, #17
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	491f      	ldr	r1, [pc, #124]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	614b      	str	r3, [r1, #20]
 8002f96:	e011      	b.n	8002fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	4916      	ldr	r1, [pc, #88]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f96e 	bl	80012a8 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fd0:	f7fe f96a 	bl	80012a8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e095      	b.n	8003152 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003036:	d009      	beq.n	800304c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
 800303e:	e005      	b.n	800304c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd febe 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800308c:	d902      	bls.n	8003094 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e002      	b.n	800309a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030a2:	d007      	beq.n	80030b4 <HAL_SPI_Init+0xa0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	ea42 0103 	orr.w	r1, r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	f003 0204 	and.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003130:	ea42 0103 	orr.w	r1, r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b088      	sub	sp, #32
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_SPI_Transmit+0x22>
 8003178:	2302      	movs	r3, #2
 800317a:	e158      	b.n	800342e <HAL_SPI_Transmit+0x2d4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003184:	f7fe f890 	bl	80012a8 <HAL_GetTick>
 8003188:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800319e:	e13d      	b.n	800341c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Transmit+0x52>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031b0:	e134      	b.n	800341c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fc:	d10f      	bne.n	800321e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d007      	beq.n	800323c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003244:	d94b      	bls.n	80032de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0xfa>
 800324e:	8afb      	ldrh	r3, [r7, #22]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d13e      	bne.n	80032d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003278:	e02b      	b.n	80032d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d112      	bne.n	80032ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ac:	e011      	b.n	80032d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ae:	f7fd fffb 	bl	80012a8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d803      	bhi.n	80032c6 <HAL_SPI_Transmit+0x16c>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d102      	bne.n	80032cc <HAL_SPI_Transmit+0x172>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032d0:	e0a4      	b.n	800341c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ce      	bne.n	800327a <HAL_SPI_Transmit+0x120>
 80032dc:	e07c      	b.n	80033d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0x192>
 80032e6:	8afb      	ldrh	r3, [r7, #22]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d170      	bne.n	80033ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d912      	bls.n	800331c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b02      	subs	r3, #2
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800331a:	e058      	b.n	80033ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003342:	e044      	b.n	80033ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d12b      	bne.n	80033aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d912      	bls.n	8003382 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b02      	subs	r3, #2
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003380:	e025      	b.n	80033ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033a8:	e011      	b.n	80033ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fd ff7d 	bl	80012a8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x268>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x26e>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033cc:	e026      	b.n	800341c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1b5      	bne.n	8003344 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fcdf 	bl	8003da0 <SPI_EndRxTxTransaction>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e000      	b.n	800341c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800341a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b088      	sub	sp, #32
 800343a:	af02      	add	r7, sp, #8
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003452:	d112      	bne.n	800347a <HAL_SPI_Receive+0x44>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10e      	bne.n	800347a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2204      	movs	r2, #4
 8003460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f910 	bl	8003696 <HAL_SPI_TransmitReceive>
 8003476:	4603      	mov	r3, r0
 8003478:	e109      	b.n	800368e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_SPI_Receive+0x52>
 8003484:	2302      	movs	r3, #2
 8003486:	e102      	b.n	800368e <HAL_SPI_Receive+0x258>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003490:	f7fd ff0a 	bl	80012a8 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d002      	beq.n	80034a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a6:	e0e9      	b.n	800367c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Receive+0x7e>
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b8:	e0e0      	b.n	800367c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2204      	movs	r2, #4
 80034be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003504:	d908      	bls.n	8003518 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	e007      	b.n	8003528 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d10f      	bne.n	8003552 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003578:	d867      	bhi.n	800364a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800357a:	e030      	b.n	80035de <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d117      	bne.n	80035ba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f103 020c 	add.w	r2, r3, #12
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	7812      	ldrb	r2, [r2, #0]
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035b8:	e011      	b.n	80035de <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ba:	f7fd fe75 	bl	80012a8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d803      	bhi.n	80035d2 <HAL_SPI_Receive+0x19c>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Receive+0x1a2>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035dc:	e04e      	b.n	800367c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1c8      	bne.n	800357c <HAL_SPI_Receive+0x146>
 80035ea:	e034      	b.n	8003656 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d115      	bne.n	8003626 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	b292      	uxth	r2, r2
 8003606:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	1c9a      	adds	r2, r3, #2
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003624:	e011      	b.n	800364a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003626:	f7fd fe3f 	bl	80012a8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_Receive+0x208>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d102      	bne.n	8003644 <HAL_SPI_Receive+0x20e>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003648:	e018      	b.n	800367c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ca      	bne.n	80035ec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fb48 	bl	8003cf0 <SPI_EndRxTransaction>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
 8003678:	e000      	b.n	800367c <HAL_SPI_Receive+0x246>
  }

error :
 800367a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800368c:	7dfb      	ldrb	r3, [r7, #23]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036a4:	2301      	movs	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x26>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e1fb      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x41e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036c4:	f7fd fdf0 	bl	80012a8 <HAL_GetTick>
 80036c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036e0:	7efb      	ldrb	r3, [r7, #27]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d00e      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x6e>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ec:	d106      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x66>
 80036f6:	7efb      	ldrb	r3, [r7, #27]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d003      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003702:	e1cd      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x80>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x80>
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800371c:	e1c0      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b04      	cmp	r3, #4
 8003728:	d003      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2205      	movs	r2, #5
 800372e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003774:	d802      	bhi.n	800377c <HAL_SPI_TransmitReceive+0xe6>
 8003776:	8a3b      	ldrh	r3, [r7, #16]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d908      	bls.n	800378e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e007      	b.n	800379e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800379c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d007      	beq.n	80037bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c4:	d97c      	bls.n	80038c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x13e>
 80037ce:	8a7b      	ldrh	r3, [r7, #18]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d169      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f8:	e056      	b.n	80038a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11b      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1aa>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1aa>
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2b01      	cmp	r3, #1
 8003816:	d113      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d11c      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x1f2>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	b292      	uxth	r2, r2
 8003866:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003888:	f7fd fd0e 	bl	80012a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	429a      	cmp	r2, r3
 8003896:	d807      	bhi.n	80038a8 <HAL_SPI_TransmitReceive+0x212>
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d003      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038a6:	e0fb      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1a3      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x164>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d19d      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x164>
 80038be:	e0df      	b.n	8003a80 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x23a>
 80038c8:	8a7b      	ldrh	r3, [r7, #18]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 80cb 	bne.w	8003a66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d912      	bls.n	8003900 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	1c9a      	adds	r2, r3, #2
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b02      	subs	r3, #2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fe:	e0b2      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003926:	e09e      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d134      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x30a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02f      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x30a>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b01      	cmp	r3, #1
 8003944:	d12c      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d912      	bls.n	8003976 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b02      	subs	r3, #2
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003974:	e012      	b.n	800399c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d148      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x3aa>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d042      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d923      	bls.n	8003a0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	b292      	uxth	r2, r2
 80039d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b02      	subs	r3, #2
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d81f      	bhi.n	8003a3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	e016      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f103 020c 	add.w	r2, r3, #12
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a40:	f7fd fc32 	bl	80012a8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d803      	bhi.n	8003a58 <HAL_SPI_TransmitReceive+0x3c2>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d102      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x3c8>
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a64:	e01c      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f af5b 	bne.w	8003928 <HAL_SPI_TransmitReceive+0x292>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f47f af54 	bne.w	8003928 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f98b 	bl	8003da0 <SPI_EndRxTxTransaction>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
 8003a9c:	e000      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3728      	adds	r7, #40	; 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003acc:	f7fd fbec 	bl	80012a8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003adc:	f7fd fbe4 	bl	80012a8 <HAL_GetTick>
 8003ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	e054      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d050      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afc:	f7fd fbd4 	bl	80012a8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13d      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d111      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d004      	beq.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d107      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d10f      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e017      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d19b      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bda:	f7fd fb65 	bl	80012a8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bea:	f7fd fb5d 	bl	80012a8 <HAL_GetTick>
 8003bee:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bf0:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	0d1b      	lsrs	r3, r3, #20
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c08:	e062      	b.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c10:	d109      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003c24:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d050      	beq.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2e:	f7fd fb3b 	bl	80012a8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d902      	bls.n	8003c44 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13d      	bne.n	8003cc0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5c:	d111      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d004      	beq.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d107      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8a:	d10f      	bne.n	8003cac <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e010      	b.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d194      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d04:	d111      	bne.n	8003d2a <SPI_EndRxTransaction+0x3a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d004      	beq.n	8003d1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d107      	bne.n	8003d2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff fec1 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e023      	b.n	8003d98 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d58:	d11d      	bne.n	8003d96 <SPI_EndRxTransaction+0xa6>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	d004      	beq.n	8003d6e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d113      	bne.n	8003d96 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ff26 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e000      	b.n	8003d98 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff07 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e027      	b.n	8003e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fe6c 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e014      	b.n	8003e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fee0 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e000      	b.n	8003e24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e040      	b.n	8003ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd f80e 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb26 	bl	80044bc <UART_SetConfig>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e022      	b.n	8003ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fda4 	bl	80049d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fe2b 	bl	8004b14 <UART_CheckIdleState>
 8003ebe:	4603      	mov	r3, r0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	f040 8082 	bne.w	8003fe6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_Transmit+0x26>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07a      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Transmit+0x38>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e073      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fd f9c7 	bl	80012a8 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x80>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f58:	e02d      	b.n	8003fb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fe1e 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e039      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f86:	b292      	uxth	r2, r2
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e008      	b.n	8003fa4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1cb      	bne.n	8003f5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2140      	movs	r1, #64	; 0x40
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fdea 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e005      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	2b20      	cmp	r3, #32
 8004004:	d131      	bne.n	800406a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_UART_Receive_IT+0x22>
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e02a      	b.n	800406c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_UART_Receive_IT+0x34>
 8004020:	2302      	movs	r3, #2
 8004022:	e023      	b.n	800406c <HAL_UART_Receive_IT+0x7c>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_UART_Receive_IT+0x84>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004058:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fe1d 	bl	8004ca0 <UART_Start_Receive_IT>
 8004066:	4603      	mov	r3, r0
 8004068:	e000      	b.n	800406c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40008000 	.word	0x40008000

08004078 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f640 030f 	movw	r3, #2063	; 0x80f
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 81ce 	beq.w	8004462 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
      }
      return;
 80040ce:	e1c8      	b.n	8004462 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80e3 	beq.w	800429e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4ba6      	ldr	r3, [pc, #664]	; (8004380 <HAL_UART_IRQHandler+0x308>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80d8 	beq.w	800429e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_UART_IRQHandler+0xa2>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2201      	movs	r2, #1
 8004108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_UART_IRQHandler+0xce>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2202      	movs	r2, #2
 8004134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_UART_IRQHandler+0xfa>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2208      	movs	r2, #8
 8004196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419e:	f043 0208 	orr.w	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d011      	beq.n	80041d6 <HAL_UART_IRQHandler+0x15e>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8142 	beq.w	8004466 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d004      	beq.n	8004226 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d031      	beq.n	800428a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fdc2 	bl	8004db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d123      	bne.n	8004282 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	2b00      	cmp	r3, #0
 8004250:	d013      	beq.n	800427a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a4b      	ldr	r2, [pc, #300]	; (8004384 <HAL_UART_IRQHandler+0x30c>)
 8004258:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f9a1 	bl	80015a6 <HAL_DMA_Abort_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004274:	4610      	mov	r0, r2
 8004276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	e00f      	b.n	800429a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f908 	bl	8004490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e00b      	b.n	800429a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f904 	bl	8004490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	e007      	b.n	800429a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f900 	bl	8004490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004298:	e0e5      	b.n	8004466 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429a:	bf00      	nop
    return;
 800429c:	e0e3      	b.n	8004466 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 80a9 	bne.w	80043fa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80a3 	beq.w	80043fa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 809d 	beq.w	80043fa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2210      	movs	r2, #16
 80042c6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d158      	bne.n	8004388 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80042e0:	893b      	ldrh	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80c1 	beq.w	800446a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042ee:	893a      	ldrh	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	f080 80ba 	bcs.w	800446a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	893a      	ldrh	r2, [r7, #8]
 80042fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d12a      	bne.n	8004364 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0210 	bic.w	r2, r2, #16
 8004358:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd f8e3 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004370:	b29b      	uxth	r3, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f893 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800437e:	e074      	b.n	800446a <HAL_UART_IRQHandler+0x3f2>
 8004380:	04000120 	.word	0x04000120
 8004384:	08004e0f 	.word	0x08004e0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d060      	beq.n	800446e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0210 	bic.w	r2, r2, #16
 80043ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f856 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043f8:	e039      	b.n	800446e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_UART_IRQHandler+0x3a8>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fdff 	bl	800501c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800441e:	e029      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
    }
    return;
 8004444:	e015      	b.n	8004472 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d011      	beq.n	8004474 <HAL_UART_IRQHandler+0x3fc>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fced 	bl	8004e3a <UART_EndTransmit_IT>
    return;
 8004460:	e008      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004462:	bf00      	nop
 8004464:	e006      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004466:	bf00      	nop
 8004468:	e004      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
      return;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
      return;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004472:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop

0800447c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4bad      	ldr	r3, [pc, #692]	; (800479c <UART_SetConfig+0x2e0>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	69f9      	ldr	r1, [r7, #28]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4aa2      	ldr	r2, [pc, #648]	; (80047a0 <UART_SetConfig+0x2e4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	4313      	orrs	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a99      	ldr	r2, [pc, #612]	; (80047a4 <UART_SetConfig+0x2e8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d121      	bne.n	8004586 <UART_SetConfig+0xca>
 8004542:	4b99      	ldr	r3, [pc, #612]	; (80047a8 <UART_SetConfig+0x2ec>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d817      	bhi.n	8004580 <UART_SetConfig+0xc4>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x9c>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	08004575 	.word	0x08004575
 8004560:	0800456f 	.word	0x0800456f
 8004564:	0800457b 	.word	0x0800457b
 8004568:	2301      	movs	r3, #1
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	e0e7      	b.n	800473e <UART_SetConfig+0x282>
 800456e:	2302      	movs	r3, #2
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e0e4      	b.n	800473e <UART_SetConfig+0x282>
 8004574:	2304      	movs	r3, #4
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e0e1      	b.n	800473e <UART_SetConfig+0x282>
 800457a:	2308      	movs	r3, #8
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e0de      	b.n	800473e <UART_SetConfig+0x282>
 8004580:	2310      	movs	r3, #16
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e0db      	b.n	800473e <UART_SetConfig+0x282>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a88      	ldr	r2, [pc, #544]	; (80047ac <UART_SetConfig+0x2f0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d132      	bne.n	80045f6 <UART_SetConfig+0x13a>
 8004590:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <UART_SetConfig+0x2ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d828      	bhi.n	80045f0 <UART_SetConfig+0x134>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0xe8>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045f1 	.word	0x080045f1
 80045ac:	080045f1 	.word	0x080045f1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045e5 	.word	0x080045e5
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	080045f1 	.word	0x080045f1
 80045c4:	080045df 	.word	0x080045df
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	080045eb 	.word	0x080045eb
 80045d8:	2300      	movs	r3, #0
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e0af      	b.n	800473e <UART_SetConfig+0x282>
 80045de:	2302      	movs	r3, #2
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e0ac      	b.n	800473e <UART_SetConfig+0x282>
 80045e4:	2304      	movs	r3, #4
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e0a9      	b.n	800473e <UART_SetConfig+0x282>
 80045ea:	2308      	movs	r3, #8
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e0a6      	b.n	800473e <UART_SetConfig+0x282>
 80045f0:	2310      	movs	r3, #16
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e0a3      	b.n	800473e <UART_SetConfig+0x282>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6d      	ldr	r2, [pc, #436]	; (80047b0 <UART_SetConfig+0x2f4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0x186>
 8004600:	4b69      	ldr	r3, [pc, #420]	; (80047a8 <UART_SetConfig+0x2ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800460a:	2b30      	cmp	r3, #48	; 0x30
 800460c:	d013      	beq.n	8004636 <UART_SetConfig+0x17a>
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	d814      	bhi.n	800463c <UART_SetConfig+0x180>
 8004612:	2b20      	cmp	r3, #32
 8004614:	d009      	beq.n	800462a <UART_SetConfig+0x16e>
 8004616:	2b20      	cmp	r3, #32
 8004618:	d810      	bhi.n	800463c <UART_SetConfig+0x180>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x168>
 800461e:	2b10      	cmp	r3, #16
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x174>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x180>
 8004624:	2300      	movs	r3, #0
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	e089      	b.n	800473e <UART_SetConfig+0x282>
 800462a:	2302      	movs	r3, #2
 800462c:	76fb      	strb	r3, [r7, #27]
 800462e:	e086      	b.n	800473e <UART_SetConfig+0x282>
 8004630:	2304      	movs	r3, #4
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	e083      	b.n	800473e <UART_SetConfig+0x282>
 8004636:	2308      	movs	r3, #8
 8004638:	76fb      	strb	r3, [r7, #27]
 800463a:	e080      	b.n	800473e <UART_SetConfig+0x282>
 800463c:	2310      	movs	r3, #16
 800463e:	76fb      	strb	r3, [r7, #27]
 8004640:	e07d      	b.n	800473e <UART_SetConfig+0x282>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5b      	ldr	r2, [pc, #364]	; (80047b4 <UART_SetConfig+0x2f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d120      	bne.n	800468e <UART_SetConfig+0x1d2>
 800464c:	4b56      	ldr	r3, [pc, #344]	; (80047a8 <UART_SetConfig+0x2ec>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004656:	2bc0      	cmp	r3, #192	; 0xc0
 8004658:	d013      	beq.n	8004682 <UART_SetConfig+0x1c6>
 800465a:	2bc0      	cmp	r3, #192	; 0xc0
 800465c:	d814      	bhi.n	8004688 <UART_SetConfig+0x1cc>
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d009      	beq.n	8004676 <UART_SetConfig+0x1ba>
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d810      	bhi.n	8004688 <UART_SetConfig+0x1cc>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <UART_SetConfig+0x1b4>
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d006      	beq.n	800467c <UART_SetConfig+0x1c0>
 800466e:	e00b      	b.n	8004688 <UART_SetConfig+0x1cc>
 8004670:	2300      	movs	r3, #0
 8004672:	76fb      	strb	r3, [r7, #27]
 8004674:	e063      	b.n	800473e <UART_SetConfig+0x282>
 8004676:	2302      	movs	r3, #2
 8004678:	76fb      	strb	r3, [r7, #27]
 800467a:	e060      	b.n	800473e <UART_SetConfig+0x282>
 800467c:	2304      	movs	r3, #4
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e05d      	b.n	800473e <UART_SetConfig+0x282>
 8004682:	2308      	movs	r3, #8
 8004684:	76fb      	strb	r3, [r7, #27]
 8004686:	e05a      	b.n	800473e <UART_SetConfig+0x282>
 8004688:	2310      	movs	r3, #16
 800468a:	76fb      	strb	r3, [r7, #27]
 800468c:	e057      	b.n	800473e <UART_SetConfig+0x282>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a49      	ldr	r2, [pc, #292]	; (80047b8 <UART_SetConfig+0x2fc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d125      	bne.n	80046e4 <UART_SetConfig+0x228>
 8004698:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <UART_SetConfig+0x2ec>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a6:	d017      	beq.n	80046d8 <UART_SetConfig+0x21c>
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d817      	bhi.n	80046de <UART_SetConfig+0x222>
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d00b      	beq.n	80046cc <UART_SetConfig+0x210>
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d811      	bhi.n	80046de <UART_SetConfig+0x222>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <UART_SetConfig+0x20a>
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d006      	beq.n	80046d2 <UART_SetConfig+0x216>
 80046c4:	e00b      	b.n	80046de <UART_SetConfig+0x222>
 80046c6:	2300      	movs	r3, #0
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e038      	b.n	800473e <UART_SetConfig+0x282>
 80046cc:	2302      	movs	r3, #2
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e035      	b.n	800473e <UART_SetConfig+0x282>
 80046d2:	2304      	movs	r3, #4
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e032      	b.n	800473e <UART_SetConfig+0x282>
 80046d8:	2308      	movs	r3, #8
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e02f      	b.n	800473e <UART_SetConfig+0x282>
 80046de:	2310      	movs	r3, #16
 80046e0:	76fb      	strb	r3, [r7, #27]
 80046e2:	e02c      	b.n	800473e <UART_SetConfig+0x282>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <UART_SetConfig+0x2e4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d125      	bne.n	800473a <UART_SetConfig+0x27e>
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <UART_SetConfig+0x2ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fc:	d017      	beq.n	800472e <UART_SetConfig+0x272>
 80046fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004702:	d817      	bhi.n	8004734 <UART_SetConfig+0x278>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004708:	d00b      	beq.n	8004722 <UART_SetConfig+0x266>
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470e:	d811      	bhi.n	8004734 <UART_SetConfig+0x278>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <UART_SetConfig+0x260>
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d006      	beq.n	8004728 <UART_SetConfig+0x26c>
 800471a:	e00b      	b.n	8004734 <UART_SetConfig+0x278>
 800471c:	2300      	movs	r3, #0
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e00d      	b.n	800473e <UART_SetConfig+0x282>
 8004722:	2302      	movs	r3, #2
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e00a      	b.n	800473e <UART_SetConfig+0x282>
 8004728:	2304      	movs	r3, #4
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e007      	b.n	800473e <UART_SetConfig+0x282>
 800472e:	2308      	movs	r3, #8
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e004      	b.n	800473e <UART_SetConfig+0x282>
 8004734:	2310      	movs	r3, #16
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e001      	b.n	800473e <UART_SetConfig+0x282>
 800473a:	2310      	movs	r3, #16
 800473c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <UART_SetConfig+0x2e4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	f040 8087 	bne.w	8004858 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474a:	7efb      	ldrb	r3, [r7, #27]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d837      	bhi.n	80047c0 <UART_SetConfig+0x304>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x29c>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800477d 	.word	0x0800477d
 800475c:	080047c1 	.word	0x080047c1
 8004760:	08004785 	.word	0x08004785
 8004764:	080047c1 	.word	0x080047c1
 8004768:	0800478b 	.word	0x0800478b
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047c1 	.word	0x080047c1
 8004778:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fd ff02 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004780:	6178      	str	r0, [r7, #20]
        break;
 8004782:	e022      	b.n	80047ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <UART_SetConfig+0x300>)
 8004786:	617b      	str	r3, [r7, #20]
        break;
 8004788:	e01f      	b.n	80047ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fd fe63 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 800478e:	6178      	str	r0, [r7, #20]
        break;
 8004790:	e01b      	b.n	80047ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	617b      	str	r3, [r7, #20]
        break;
 8004798:	e017      	b.n	80047ca <UART_SetConfig+0x30e>
 800479a:	bf00      	nop
 800479c:	efff69f3 	.word	0xefff69f3
 80047a0:	40008000 	.word	0x40008000
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40004400 	.word	0x40004400
 80047b0:	40004800 	.word	0x40004800
 80047b4:	40004c00 	.word	0x40004c00
 80047b8:	40005000 	.word	0x40005000
 80047bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	76bb      	strb	r3, [r7, #26]
        break;
 80047c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80f1 	beq.w	80049b4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d305      	bcc.n	80047ee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d902      	bls.n	80047f4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	76bb      	strb	r3, [r7, #26]
 80047f2:	e0df      	b.n	80049b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	020b      	lsls	r3, r1, #8
 8004806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800480a:	0202      	lsls	r2, r0, #8
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	6849      	ldr	r1, [r1, #4]
 8004810:	0849      	lsrs	r1, r1, #1
 8004812:	4608      	mov	r0, r1
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	1814      	adds	r4, r2, r0
 800481a:	eb43 0501 	adc.w	r5, r3, r1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	461a      	mov	r2, r3
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fd20 	bl	8000270 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483e:	d308      	bcc.n	8004852 <UART_SetConfig+0x396>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d204      	bcs.n	8004852 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e0b0      	b.n	80049b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	76bb      	strb	r3, [r7, #26]
 8004856:	e0ad      	b.n	80049b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	d15c      	bne.n	800491c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004862:	7efb      	ldrb	r3, [r7, #27]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d828      	bhi.n	80048ba <UART_SetConfig+0x3fe>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x3b4>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fd fe76 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004898:	6178      	str	r0, [r7, #20]
        break;
 800489a:	e013      	b.n	80048c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fd fe88 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 80048a0:	6178      	str	r0, [r7, #20]
        break;
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <UART_SetConfig+0x510>)
 80048a6:	617b      	str	r3, [r7, #20]
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fd fdd3 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80048ae:	6178      	str	r0, [r7, #20]
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	617b      	str	r3, [r7, #20]
        break;
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	76bb      	strb	r3, [r7, #26]
        break;
 80048c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d074      	beq.n	80049b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d916      	bls.n	8004916 <UART_SetConfig+0x45a>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d212      	bcs.n	8004916 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f023 030f 	bic.w	r3, r3, #15
 80048f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	b29a      	uxth	r2, r3
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	4313      	orrs	r3, r2
 800490a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	89fa      	ldrh	r2, [r7, #14]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e04e      	b.n	80049b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
 800491a:	e04b      	b.n	80049b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d827      	bhi.n	8004972 <UART_SetConfig+0x4b6>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x46c>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495d 	.word	0x0800495d
 8004934:	08004973 	.word	0x08004973
 8004938:	08004963 	.word	0x08004963
 800493c:	08004973 	.word	0x08004973
 8004940:	08004973 	.word	0x08004973
 8004944:	08004973 	.word	0x08004973
 8004948:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fd fe1a 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004950:	6178      	str	r0, [r7, #20]
        break;
 8004952:	e013      	b.n	800497c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fd fe2c 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e00f      	b.n	800497c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <UART_SetConfig+0x510>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e00c      	b.n	800497c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fd fd77 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e008      	b.n	800497c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e004      	b.n	800497c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	76bb      	strb	r3, [r7, #26]
        break;
 800497a:	bf00      	nop
    }

    if (pclk != 0U)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	085a      	lsrs	r2, r3, #1
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	441a      	add	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d908      	bls.n	80049b0 <UART_SetConfig+0x4f4>
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d204      	bcs.n	80049b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e001      	b.n	80049b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ca:	bf00      	nop
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d10a      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b24:	f7fc fbc0 	bl	80012a8 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d10e      	bne.n	8004b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f82d 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e023      	b.n	8004b9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d10e      	bne.n	8004b82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f817 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00d      	b.n	8004b9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	e05e      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d05a      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fc fb72 	bl	80012a8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11b      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004be4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e043      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02c      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d124      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c34:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c44:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00f      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d091      	beq.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d10e      	bne.n	8004cf2 <UART_Start_Receive_IT+0x52>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <UART_Start_Receive_IT+0x48>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ce6:	e02d      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	22ff      	movs	r2, #255	; 0xff
 8004cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cf0:	e028      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <UART_Start_Receive_IT+0x76>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <UART_Start_Receive_IT+0x6c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	22ff      	movs	r2, #255	; 0xff
 8004d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d0a:	e01b      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	227f      	movs	r2, #127	; 0x7f
 8004d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d14:	e016      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1e:	d10d      	bne.n	8004d3c <UART_Start_Receive_IT+0x9c>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <UART_Start_Receive_IT+0x92>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	227f      	movs	r2, #127	; 0x7f
 8004d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d30:	e008      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	223f      	movs	r2, #63	; 0x3f
 8004d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d3a:	e003      	b.n	8004d44 <UART_Start_Receive_IT+0xa4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2222      	movs	r2, #34	; 0x22
 8004d50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d107      	bne.n	8004d7c <UART_Start_Receive_IT+0xdc>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <UART_Start_Receive_IT+0x108>)
 8004d78:	665a      	str	r2, [r3, #100]	; 0x64
 8004d7a:	e002      	b.n	8004d82 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <UART_Start_Receive_IT+0x10c>)
 8004d80:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004d98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	08004f45 	.word	0x08004f45
 8004dac:	08004e6d 	.word	0x08004e6d

08004db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0210 	bic.w	r2, r2, #16
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fb2f 	bl	8004490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e50:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fb0c 	bl	800447c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e80:	2b22      	cmp	r3, #34	; 0x22
 8004e82:	d151      	bne.n	8004f28 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e8a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e8c:	89bb      	ldrh	r3, [r7, #12]
 8004e8e:	b2d9      	uxtb	r1, r3
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	400a      	ands	r2, r1
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13a      	bne.n	8004f3c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10f      	bne.n	8004f1a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0210 	bic.w	r2, r2, #16
 8004f08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fac6 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
 8004f18:	e002      	b.n	8004f20 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fd90 	bl	8000a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f26:	e009      	b.n	8004f3c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	8b1b      	ldrh	r3, [r3, #24]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	831a      	strh	r2, [r3, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f52:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	d151      	bne.n	8005000 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f62:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f6a:	89ba      	ldrh	r2, [r7, #12]
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d13a      	bne.n	8005014 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10f      	bne.n	8004ff2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0210 	bic.w	r2, r2, #16
 8004fe0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fa5a 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
 8004ff0:	e002      	b.n	8004ff8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fb fd24 	bl	8000a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ffe:	e009      	b.n	8005014 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	8b1b      	ldrh	r3, [r3, #24]
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	b292      	uxth	r2, r2
 8005012:	831a      	strh	r2, [r3, #24]
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e03c      	b.n	80050bc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fb ff94 	bl	8000f84 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f85b 	bl	8005130 <USART_SetConfig>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e01b      	b.n	80050bc <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005092:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f991 	bl	80053dc <USART_CheckIdleState>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80050d4:	e018      	b.n	8005108 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d014      	beq.n	8005108 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc f8e3 	bl	80012a8 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <USART_WaitOnFlagUntilTimeout+0x30>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e00f      	b.n	8005128 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4013      	ands	r3, r2
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	429a      	cmp	r2, r3
 8005124:	d0d7      	beq.n	80050d6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005154:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b9a      	ldr	r3, [pc, #616]	; (80053c8 <USART_SetConfig+0x298>)
 800515e:	4013      	ands	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	430b      	orrs	r3, r1
 8005168:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800516a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800516e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4313      	orrs	r3, r2
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a87      	ldr	r2, [pc, #540]	; (80053cc <USART_SetConfig+0x29c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d121      	bne.n	80051f6 <USART_SetConfig+0xc6>
 80051b2:	4b87      	ldr	r3, [pc, #540]	; (80053d0 <USART_SetConfig+0x2a0>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d817      	bhi.n	80051f0 <USART_SetConfig+0xc0>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <USART_SetConfig+0x98>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051e5 	.word	0x080051e5
 80051d0:	080051df 	.word	0x080051df
 80051d4:	080051eb 	.word	0x080051eb
 80051d8:	2301      	movs	r3, #1
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e06b      	b.n	80052b6 <USART_SetConfig+0x186>
 80051de:	2302      	movs	r3, #2
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e068      	b.n	80052b6 <USART_SetConfig+0x186>
 80051e4:	2304      	movs	r3, #4
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e065      	b.n	80052b6 <USART_SetConfig+0x186>
 80051ea:	2308      	movs	r3, #8
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e062      	b.n	80052b6 <USART_SetConfig+0x186>
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e05f      	b.n	80052b6 <USART_SetConfig+0x186>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a76      	ldr	r2, [pc, #472]	; (80053d4 <USART_SetConfig+0x2a4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d132      	bne.n	8005266 <USART_SetConfig+0x136>
 8005200:	4b73      	ldr	r3, [pc, #460]	; (80053d0 <USART_SetConfig+0x2a0>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d828      	bhi.n	8005260 <USART_SetConfig+0x130>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <USART_SetConfig+0xe4>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005249 	.word	0x08005249
 8005218:	08005261 	.word	0x08005261
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005255 	.word	0x08005255
 8005228:	08005261 	.word	0x08005261
 800522c:	08005261 	.word	0x08005261
 8005230:	08005261 	.word	0x08005261
 8005234:	0800524f 	.word	0x0800524f
 8005238:	08005261 	.word	0x08005261
 800523c:	08005261 	.word	0x08005261
 8005240:	08005261 	.word	0x08005261
 8005244:	0800525b 	.word	0x0800525b
 8005248:	2300      	movs	r3, #0
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e033      	b.n	80052b6 <USART_SetConfig+0x186>
 800524e:	2302      	movs	r3, #2
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e030      	b.n	80052b6 <USART_SetConfig+0x186>
 8005254:	2304      	movs	r3, #4
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e02d      	b.n	80052b6 <USART_SetConfig+0x186>
 800525a:	2308      	movs	r3, #8
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e02a      	b.n	80052b6 <USART_SetConfig+0x186>
 8005260:	2310      	movs	r3, #16
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e027      	b.n	80052b6 <USART_SetConfig+0x186>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a5b      	ldr	r2, [pc, #364]	; (80053d8 <USART_SetConfig+0x2a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d120      	bne.n	80052b2 <USART_SetConfig+0x182>
 8005270:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <USART_SetConfig+0x2a0>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800527a:	2b30      	cmp	r3, #48	; 0x30
 800527c:	d013      	beq.n	80052a6 <USART_SetConfig+0x176>
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	d814      	bhi.n	80052ac <USART_SetConfig+0x17c>
 8005282:	2b20      	cmp	r3, #32
 8005284:	d009      	beq.n	800529a <USART_SetConfig+0x16a>
 8005286:	2b20      	cmp	r3, #32
 8005288:	d810      	bhi.n	80052ac <USART_SetConfig+0x17c>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <USART_SetConfig+0x164>
 800528e:	2b10      	cmp	r3, #16
 8005290:	d006      	beq.n	80052a0 <USART_SetConfig+0x170>
 8005292:	e00b      	b.n	80052ac <USART_SetConfig+0x17c>
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e00d      	b.n	80052b6 <USART_SetConfig+0x186>
 800529a:	2302      	movs	r3, #2
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e00a      	b.n	80052b6 <USART_SetConfig+0x186>
 80052a0:	2304      	movs	r3, #4
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e007      	b.n	80052b6 <USART_SetConfig+0x186>
 80052a6:	2308      	movs	r3, #8
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e004      	b.n	80052b6 <USART_SetConfig+0x186>
 80052ac:	2310      	movs	r3, #16
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e001      	b.n	80052b6 <USART_SetConfig+0x186>
 80052b2:	2310      	movs	r3, #16
 80052b4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d85a      	bhi.n	8005372 <USART_SetConfig+0x242>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <USART_SetConfig+0x194>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	08005307 	.word	0x08005307
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005373 	.word	0x08005373
 80052d4:	0800533f 	.word	0x0800533f
 80052d8:	08005373 	.word	0x08005373
 80052dc:	08005373 	.word	0x08005373
 80052e0:	08005373 	.word	0x08005373
 80052e4:	0800535d 	.word	0x0800535d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fd f94c 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80052ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	005a      	lsls	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005304:	e038      	b.n	8005378 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005306:	f7fd f953 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 800530a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	005a      	lsls	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005322:	e029      	b.n	8005378 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800532e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	fbb3 f3f2 	udiv	r3, r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800533c:	e01c      	b.n	8005378 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fd f889 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8005342:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	005a      	lsls	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800535a:	e00d      	b.n	8005378 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005370:	e002      	b.n	8005378 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	77bb      	strb	r3, [r7, #30]
      break;
 8005376:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d916      	bls.n	80053ac <USART_SetConfig+0x27c>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d212      	bcs.n	80053ac <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f023 030f 	bic.w	r3, r3, #15
 800538e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	b29a      	uxth	r2, r3
 800539c:	89fb      	ldrh	r3, [r7, #14]
 800539e:	4313      	orrs	r3, r2
 80053a0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	89fa      	ldrh	r2, [r7, #14]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	e001      	b.n	80053b0 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80053bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	efff69f3 	.word	0xefff69f3
 80053cc:	40013800 	.word	0x40013800
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40004400 	.word	0x40004400
 80053d8:	40004800 	.word	0x40004800

080053dc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ea:	f7fb ff5d 	bl	80012a8 <HAL_GetTick>
 80053ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d10e      	bne.n	800541c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80053fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe59 	bl	80050c4 <USART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e01e      	b.n	800545a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d10e      	bne.n	8005448 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800542a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fe43 	bl	80050c4 <USART_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e008      	b.n	800545a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <__errno>:
 8005464:	4b01      	ldr	r3, [pc, #4]	; (800546c <__errno+0x8>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000018 	.word	0x20000018

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4d0d      	ldr	r5, [pc, #52]	; (80054a8 <__libc_init_array+0x38>)
 8005474:	4c0d      	ldr	r4, [pc, #52]	; (80054ac <__libc_init_array+0x3c>)
 8005476:	1b64      	subs	r4, r4, r5
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	2600      	movs	r6, #0
 800547c:	42a6      	cmp	r6, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	4d0b      	ldr	r5, [pc, #44]	; (80054b0 <__libc_init_array+0x40>)
 8005482:	4c0c      	ldr	r4, [pc, #48]	; (80054b4 <__libc_init_array+0x44>)
 8005484:	f000 fc4e 	bl	8005d24 <_init>
 8005488:	1b64      	subs	r4, r4, r5
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	2600      	movs	r6, #0
 800548e:	42a6      	cmp	r6, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	f855 3b04 	ldr.w	r3, [r5], #4
 8005498:	4798      	blx	r3
 800549a:	3601      	adds	r6, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a2:	4798      	blx	r3
 80054a4:	3601      	adds	r6, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	08005dc8 	.word	0x08005dc8
 80054ac:	08005dc8 	.word	0x08005dc8
 80054b0:	08005dc8 	.word	0x08005dc8
 80054b4:	08005dcc 	.word	0x08005dcc

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <siprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b500      	push	{lr}
 80054cc:	b09c      	sub	sp, #112	; 0x70
 80054ce:	ab1d      	add	r3, sp, #116	; 0x74
 80054d0:	9002      	str	r0, [sp, #8]
 80054d2:	9006      	str	r0, [sp, #24]
 80054d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <siprintf+0x38>)
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	9104      	str	r1, [sp, #16]
 80054de:	4909      	ldr	r1, [pc, #36]	; (8005504 <siprintf+0x3c>)
 80054e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	a902      	add	r1, sp, #8
 80054ec:	f000 f868 	bl	80055c0 <_svfiprintf_r>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	b01c      	add	sp, #112	; 0x70
 80054f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054fc:	b003      	add	sp, #12
 80054fe:	4770      	bx	lr
 8005500:	20000018 	.word	0x20000018
 8005504:	ffff0208 	.word	0xffff0208

08005508 <__ssputs_r>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	688e      	ldr	r6, [r1, #8]
 800550e:	429e      	cmp	r6, r3
 8005510:	4682      	mov	sl, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4690      	mov	r8, r2
 8005516:	461f      	mov	r7, r3
 8005518:	d838      	bhi.n	800558c <__ssputs_r+0x84>
 800551a:	898a      	ldrh	r2, [r1, #12]
 800551c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005520:	d032      	beq.n	8005588 <__ssputs_r+0x80>
 8005522:	6825      	ldr	r5, [r4, #0]
 8005524:	6909      	ldr	r1, [r1, #16]
 8005526:	eba5 0901 	sub.w	r9, r5, r1
 800552a:	6965      	ldr	r5, [r4, #20]
 800552c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005534:	3301      	adds	r3, #1
 8005536:	444b      	add	r3, r9
 8005538:	106d      	asrs	r5, r5, #1
 800553a:	429d      	cmp	r5, r3
 800553c:	bf38      	it	cc
 800553e:	461d      	movcc	r5, r3
 8005540:	0553      	lsls	r3, r2, #21
 8005542:	d531      	bpl.n	80055a8 <__ssputs_r+0xa0>
 8005544:	4629      	mov	r1, r5
 8005546:	f000 fb47 	bl	8005bd8 <_malloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	b950      	cbnz	r0, 8005564 <__ssputs_r+0x5c>
 800554e:	230c      	movs	r3, #12
 8005550:	f8ca 3000 	str.w	r3, [sl]
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	6921      	ldr	r1, [r4, #16]
 8005566:	464a      	mov	r2, r9
 8005568:	f000 fabe 	bl	8005ae8 <memcpy>
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	6126      	str	r6, [r4, #16]
 800557a:	6165      	str	r5, [r4, #20]
 800557c:	444e      	add	r6, r9
 800557e:	eba5 0509 	sub.w	r5, r5, r9
 8005582:	6026      	str	r6, [r4, #0]
 8005584:	60a5      	str	r5, [r4, #8]
 8005586:	463e      	mov	r6, r7
 8005588:	42be      	cmp	r6, r7
 800558a:	d900      	bls.n	800558e <__ssputs_r+0x86>
 800558c:	463e      	mov	r6, r7
 800558e:	4632      	mov	r2, r6
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	4641      	mov	r1, r8
 8005594:	f000 fab6 	bl	8005b04 <memmove>
 8005598:	68a3      	ldr	r3, [r4, #8]
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	1b9b      	subs	r3, r3, r6
 800559e:	4432      	add	r2, r6
 80055a0:	60a3      	str	r3, [r4, #8]
 80055a2:	6022      	str	r2, [r4, #0]
 80055a4:	2000      	movs	r0, #0
 80055a6:	e7db      	b.n	8005560 <__ssputs_r+0x58>
 80055a8:	462a      	mov	r2, r5
 80055aa:	f000 fb6f 	bl	8005c8c <_realloc_r>
 80055ae:	4606      	mov	r6, r0
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1e1      	bne.n	8005578 <__ssputs_r+0x70>
 80055b4:	6921      	ldr	r1, [r4, #16]
 80055b6:	4650      	mov	r0, sl
 80055b8:	f000 fabe 	bl	8005b38 <_free_r>
 80055bc:	e7c7      	b.n	800554e <__ssputs_r+0x46>
	...

080055c0 <_svfiprintf_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	4698      	mov	r8, r3
 80055c6:	898b      	ldrh	r3, [r1, #12]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	b09d      	sub	sp, #116	; 0x74
 80055cc:	4607      	mov	r7, r0
 80055ce:	460d      	mov	r5, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	d50e      	bpl.n	80055f2 <_svfiprintf_r+0x32>
 80055d4:	690b      	ldr	r3, [r1, #16]
 80055d6:	b963      	cbnz	r3, 80055f2 <_svfiprintf_r+0x32>
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	f000 fafd 	bl	8005bd8 <_malloc_r>
 80055de:	6028      	str	r0, [r5, #0]
 80055e0:	6128      	str	r0, [r5, #16]
 80055e2:	b920      	cbnz	r0, 80055ee <_svfiprintf_r+0x2e>
 80055e4:	230c      	movs	r3, #12
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e0d1      	b.n	8005792 <_svfiprintf_r+0x1d2>
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	616b      	str	r3, [r5, #20]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	2320      	movs	r3, #32
 80055f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005600:	2330      	movs	r3, #48	; 0x30
 8005602:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057ac <_svfiprintf_r+0x1ec>
 8005606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800560a:	f04f 0901 	mov.w	r9, #1
 800560e:	4623      	mov	r3, r4
 8005610:	469a      	mov	sl, r3
 8005612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005616:	b10a      	cbz	r2, 800561c <_svfiprintf_r+0x5c>
 8005618:	2a25      	cmp	r2, #37	; 0x25
 800561a:	d1f9      	bne.n	8005610 <_svfiprintf_r+0x50>
 800561c:	ebba 0b04 	subs.w	fp, sl, r4
 8005620:	d00b      	beq.n	800563a <_svfiprintf_r+0x7a>
 8005622:	465b      	mov	r3, fp
 8005624:	4622      	mov	r2, r4
 8005626:	4629      	mov	r1, r5
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff ff6d 	bl	8005508 <__ssputs_r>
 800562e:	3001      	adds	r0, #1
 8005630:	f000 80aa 	beq.w	8005788 <_svfiprintf_r+0x1c8>
 8005634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005636:	445a      	add	r2, fp
 8005638:	9209      	str	r2, [sp, #36]	; 0x24
 800563a:	f89a 3000 	ldrb.w	r3, [sl]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80a2 	beq.w	8005788 <_svfiprintf_r+0x1c8>
 8005644:	2300      	movs	r3, #0
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800564e:	f10a 0a01 	add.w	sl, sl, #1
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	9307      	str	r3, [sp, #28]
 8005656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565a:	931a      	str	r3, [sp, #104]	; 0x68
 800565c:	4654      	mov	r4, sl
 800565e:	2205      	movs	r2, #5
 8005660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005664:	4851      	ldr	r0, [pc, #324]	; (80057ac <_svfiprintf_r+0x1ec>)
 8005666:	f7fa fdb3 	bl	80001d0 <memchr>
 800566a:	9a04      	ldr	r2, [sp, #16]
 800566c:	b9d8      	cbnz	r0, 80056a6 <_svfiprintf_r+0xe6>
 800566e:	06d0      	lsls	r0, r2, #27
 8005670:	bf44      	itt	mi
 8005672:	2320      	movmi	r3, #32
 8005674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005678:	0711      	lsls	r1, r2, #28
 800567a:	bf44      	itt	mi
 800567c:	232b      	movmi	r3, #43	; 0x2b
 800567e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005682:	f89a 3000 	ldrb.w	r3, [sl]
 8005686:	2b2a      	cmp	r3, #42	; 0x2a
 8005688:	d015      	beq.n	80056b6 <_svfiprintf_r+0xf6>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	4654      	mov	r4, sl
 800568e:	2000      	movs	r0, #0
 8005690:	f04f 0c0a 	mov.w	ip, #10
 8005694:	4621      	mov	r1, r4
 8005696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569a:	3b30      	subs	r3, #48	; 0x30
 800569c:	2b09      	cmp	r3, #9
 800569e:	d94e      	bls.n	800573e <_svfiprintf_r+0x17e>
 80056a0:	b1b0      	cbz	r0, 80056d0 <_svfiprintf_r+0x110>
 80056a2:	9207      	str	r2, [sp, #28]
 80056a4:	e014      	b.n	80056d0 <_svfiprintf_r+0x110>
 80056a6:	eba0 0308 	sub.w	r3, r0, r8
 80056aa:	fa09 f303 	lsl.w	r3, r9, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	46a2      	mov	sl, r4
 80056b4:	e7d2      	b.n	800565c <_svfiprintf_r+0x9c>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	9103      	str	r1, [sp, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfbb      	ittet	lt
 80056c2:	425b      	neglt	r3, r3
 80056c4:	f042 0202 	orrlt.w	r2, r2, #2
 80056c8:	9307      	strge	r3, [sp, #28]
 80056ca:	9307      	strlt	r3, [sp, #28]
 80056cc:	bfb8      	it	lt
 80056ce:	9204      	strlt	r2, [sp, #16]
 80056d0:	7823      	ldrb	r3, [r4, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d10c      	bne.n	80056f0 <_svfiprintf_r+0x130>
 80056d6:	7863      	ldrb	r3, [r4, #1]
 80056d8:	2b2a      	cmp	r3, #42	; 0x2a
 80056da:	d135      	bne.n	8005748 <_svfiprintf_r+0x188>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfb8      	it	lt
 80056e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ec:	3402      	adds	r4, #2
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057bc <_svfiprintf_r+0x1fc>
 80056f4:	7821      	ldrb	r1, [r4, #0]
 80056f6:	2203      	movs	r2, #3
 80056f8:	4650      	mov	r0, sl
 80056fa:	f7fa fd69 	bl	80001d0 <memchr>
 80056fe:	b140      	cbz	r0, 8005712 <_svfiprintf_r+0x152>
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	eba0 000a 	sub.w	r0, r0, sl
 8005706:	fa03 f000 	lsl.w	r0, r3, r0
 800570a:	9b04      	ldr	r3, [sp, #16]
 800570c:	4303      	orrs	r3, r0
 800570e:	3401      	adds	r4, #1
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005716:	4826      	ldr	r0, [pc, #152]	; (80057b0 <_svfiprintf_r+0x1f0>)
 8005718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800571c:	2206      	movs	r2, #6
 800571e:	f7fa fd57 	bl	80001d0 <memchr>
 8005722:	2800      	cmp	r0, #0
 8005724:	d038      	beq.n	8005798 <_svfiprintf_r+0x1d8>
 8005726:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <_svfiprintf_r+0x1f4>)
 8005728:	bb1b      	cbnz	r3, 8005772 <_svfiprintf_r+0x1b2>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	3307      	adds	r3, #7
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	3308      	adds	r3, #8
 8005734:	9303      	str	r3, [sp, #12]
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	4433      	add	r3, r6
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	e767      	b.n	800560e <_svfiprintf_r+0x4e>
 800573e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005742:	460c      	mov	r4, r1
 8005744:	2001      	movs	r0, #1
 8005746:	e7a5      	b.n	8005694 <_svfiprintf_r+0xd4>
 8005748:	2300      	movs	r3, #0
 800574a:	3401      	adds	r4, #1
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	4619      	mov	r1, r3
 8005750:	f04f 0c0a 	mov.w	ip, #10
 8005754:	4620      	mov	r0, r4
 8005756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800575a:	3a30      	subs	r2, #48	; 0x30
 800575c:	2a09      	cmp	r2, #9
 800575e:	d903      	bls.n	8005768 <_svfiprintf_r+0x1a8>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0c5      	beq.n	80056f0 <_svfiprintf_r+0x130>
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	e7c3      	b.n	80056f0 <_svfiprintf_r+0x130>
 8005768:	fb0c 2101 	mla	r1, ip, r1, r2
 800576c:	4604      	mov	r4, r0
 800576e:	2301      	movs	r3, #1
 8005770:	e7f0      	b.n	8005754 <_svfiprintf_r+0x194>
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	462a      	mov	r2, r5
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <_svfiprintf_r+0x1f8>)
 800577a:	a904      	add	r1, sp, #16
 800577c:	4638      	mov	r0, r7
 800577e:	f3af 8000 	nop.w
 8005782:	1c42      	adds	r2, r0, #1
 8005784:	4606      	mov	r6, r0
 8005786:	d1d6      	bne.n	8005736 <_svfiprintf_r+0x176>
 8005788:	89ab      	ldrh	r3, [r5, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	f53f af2c 	bmi.w	80055e8 <_svfiprintf_r+0x28>
 8005790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005792:	b01d      	add	sp, #116	; 0x74
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	ab03      	add	r3, sp, #12
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	462a      	mov	r2, r5
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <_svfiprintf_r+0x1f8>)
 80057a0:	a904      	add	r1, sp, #16
 80057a2:	4638      	mov	r0, r7
 80057a4:	f000 f87a 	bl	800589c <_printf_i>
 80057a8:	e7eb      	b.n	8005782 <_svfiprintf_r+0x1c2>
 80057aa:	bf00      	nop
 80057ac:	08005d8c 	.word	0x08005d8c
 80057b0:	08005d96 	.word	0x08005d96
 80057b4:	00000000 	.word	0x00000000
 80057b8:	08005509 	.word	0x08005509
 80057bc:	08005d92 	.word	0x08005d92

080057c0 <_printf_common>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	4699      	mov	r9, r3
 80057c8:	688a      	ldr	r2, [r1, #8]
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfb8      	it	lt
 80057d4:	4613      	movlt	r3, r2
 80057d6:	6033      	str	r3, [r6, #0]
 80057d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057dc:	4607      	mov	r7, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b10a      	cbz	r2, 80057e6 <_printf_common+0x26>
 80057e2:	3301      	adds	r3, #1
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	6833      	ldrmi	r3, [r6, #0]
 80057ee:	3302      	addmi	r3, #2
 80057f0:	6033      	strmi	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d106      	bne.n	8005808 <_printf_common+0x48>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	6832      	ldr	r2, [r6, #0]
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc26      	bgt.n	8005856 <_printf_common+0x96>
 8005808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800580c:	1e13      	subs	r3, r2, #0
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	bf18      	it	ne
 8005812:	2301      	movne	r3, #1
 8005814:	0692      	lsls	r2, r2, #26
 8005816:	d42b      	bmi.n	8005870 <_printf_common+0xb0>
 8005818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581c:	4649      	mov	r1, r9
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d01e      	beq.n	8005864 <_printf_common+0xa4>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	68e5      	ldr	r5, [r4, #12]
 800582a:	6832      	ldr	r2, [r6, #0]
 800582c:	f003 0306 	and.w	r3, r3, #6
 8005830:	2b04      	cmp	r3, #4
 8005832:	bf08      	it	eq
 8005834:	1aad      	subeq	r5, r5, r2
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	bf0c      	ite	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	2500      	movne	r5, #0
 8005842:	4293      	cmp	r3, r2
 8005844:	bfc4      	itt	gt
 8005846:	1a9b      	subgt	r3, r3, r2
 8005848:	18ed      	addgt	r5, r5, r3
 800584a:	2600      	movs	r6, #0
 800584c:	341a      	adds	r4, #26
 800584e:	42b5      	cmp	r5, r6
 8005850:	d11a      	bne.n	8005888 <_printf_common+0xc8>
 8005852:	2000      	movs	r0, #0
 8005854:	e008      	b.n	8005868 <_printf_common+0xa8>
 8005856:	2301      	movs	r3, #1
 8005858:	4652      	mov	r2, sl
 800585a:	4649      	mov	r1, r9
 800585c:	4638      	mov	r0, r7
 800585e:	47c0      	blx	r8
 8005860:	3001      	adds	r0, #1
 8005862:	d103      	bne.n	800586c <_printf_common+0xac>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	3501      	adds	r5, #1
 800586e:	e7c6      	b.n	80057fe <_printf_common+0x3e>
 8005870:	18e1      	adds	r1, r4, r3
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	2030      	movs	r0, #48	; 0x30
 8005876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587a:	4422      	add	r2, r4
 800587c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005884:	3302      	adds	r3, #2
 8005886:	e7c7      	b.n	8005818 <_printf_common+0x58>
 8005888:	2301      	movs	r3, #1
 800588a:	4622      	mov	r2, r4
 800588c:	4649      	mov	r1, r9
 800588e:	4638      	mov	r0, r7
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d0e6      	beq.n	8005864 <_printf_common+0xa4>
 8005896:	3601      	adds	r6, #1
 8005898:	e7d9      	b.n	800584e <_printf_common+0x8e>
	...

0800589c <_printf_i>:
 800589c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	460c      	mov	r4, r1
 80058a2:	4691      	mov	r9, r2
 80058a4:	7e27      	ldrb	r7, [r4, #24]
 80058a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058a8:	2f78      	cmp	r7, #120	; 0x78
 80058aa:	4680      	mov	r8, r0
 80058ac:	469a      	mov	sl, r3
 80058ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b2:	d807      	bhi.n	80058c4 <_printf_i+0x28>
 80058b4:	2f62      	cmp	r7, #98	; 0x62
 80058b6:	d80a      	bhi.n	80058ce <_printf_i+0x32>
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	f000 80d8 	beq.w	8005a6e <_printf_i+0x1d2>
 80058be:	2f58      	cmp	r7, #88	; 0x58
 80058c0:	f000 80a3 	beq.w	8005a0a <_printf_i+0x16e>
 80058c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058cc:	e03a      	b.n	8005944 <_printf_i+0xa8>
 80058ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058d2:	2b15      	cmp	r3, #21
 80058d4:	d8f6      	bhi.n	80058c4 <_printf_i+0x28>
 80058d6:	a001      	add	r0, pc, #4	; (adr r0, 80058dc <_printf_i+0x40>)
 80058d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058dc:	08005935 	.word	0x08005935
 80058e0:	08005949 	.word	0x08005949
 80058e4:	080058c5 	.word	0x080058c5
 80058e8:	080058c5 	.word	0x080058c5
 80058ec:	080058c5 	.word	0x080058c5
 80058f0:	080058c5 	.word	0x080058c5
 80058f4:	08005949 	.word	0x08005949
 80058f8:	080058c5 	.word	0x080058c5
 80058fc:	080058c5 	.word	0x080058c5
 8005900:	080058c5 	.word	0x080058c5
 8005904:	080058c5 	.word	0x080058c5
 8005908:	08005a55 	.word	0x08005a55
 800590c:	08005979 	.word	0x08005979
 8005910:	08005a37 	.word	0x08005a37
 8005914:	080058c5 	.word	0x080058c5
 8005918:	080058c5 	.word	0x080058c5
 800591c:	08005a77 	.word	0x08005a77
 8005920:	080058c5 	.word	0x080058c5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058c5 	.word	0x080058c5
 800592c:	080058c5 	.word	0x080058c5
 8005930:	08005a3f 	.word	0x08005a3f
 8005934:	680b      	ldr	r3, [r1, #0]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	600a      	str	r2, [r1, #0]
 800593c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005944:	2301      	movs	r3, #1
 8005946:	e0a3      	b.n	8005a90 <_printf_i+0x1f4>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	6808      	ldr	r0, [r1, #0]
 800594c:	062e      	lsls	r6, r5, #24
 800594e:	f100 0304 	add.w	r3, r0, #4
 8005952:	d50a      	bpl.n	800596a <_printf_i+0xce>
 8005954:	6805      	ldr	r5, [r0, #0]
 8005956:	600b      	str	r3, [r1, #0]
 8005958:	2d00      	cmp	r5, #0
 800595a:	da03      	bge.n	8005964 <_printf_i+0xc8>
 800595c:	232d      	movs	r3, #45	; 0x2d
 800595e:	426d      	negs	r5, r5
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005964:	485e      	ldr	r0, [pc, #376]	; (8005ae0 <_printf_i+0x244>)
 8005966:	230a      	movs	r3, #10
 8005968:	e019      	b.n	800599e <_printf_i+0x102>
 800596a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800596e:	6805      	ldr	r5, [r0, #0]
 8005970:	600b      	str	r3, [r1, #0]
 8005972:	bf18      	it	ne
 8005974:	b22d      	sxthne	r5, r5
 8005976:	e7ef      	b.n	8005958 <_printf_i+0xbc>
 8005978:	680b      	ldr	r3, [r1, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	1d18      	adds	r0, r3, #4
 800597e:	6008      	str	r0, [r1, #0]
 8005980:	0628      	lsls	r0, r5, #24
 8005982:	d501      	bpl.n	8005988 <_printf_i+0xec>
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	e002      	b.n	800598e <_printf_i+0xf2>
 8005988:	0669      	lsls	r1, r5, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0xe8>
 800598c:	881d      	ldrh	r5, [r3, #0]
 800598e:	4854      	ldr	r0, [pc, #336]	; (8005ae0 <_printf_i+0x244>)
 8005990:	2f6f      	cmp	r7, #111	; 0x6f
 8005992:	bf0c      	ite	eq
 8005994:	2308      	moveq	r3, #8
 8005996:	230a      	movne	r3, #10
 8005998:	2100      	movs	r1, #0
 800599a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800599e:	6866      	ldr	r6, [r4, #4]
 80059a0:	60a6      	str	r6, [r4, #8]
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	bfa2      	ittt	ge
 80059a6:	6821      	ldrge	r1, [r4, #0]
 80059a8:	f021 0104 	bicge.w	r1, r1, #4
 80059ac:	6021      	strge	r1, [r4, #0]
 80059ae:	b90d      	cbnz	r5, 80059b4 <_printf_i+0x118>
 80059b0:	2e00      	cmp	r6, #0
 80059b2:	d04d      	beq.n	8005a50 <_printf_i+0x1b4>
 80059b4:	4616      	mov	r6, r2
 80059b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80059ba:	fb03 5711 	mls	r7, r3, r1, r5
 80059be:	5dc7      	ldrb	r7, [r0, r7]
 80059c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059c4:	462f      	mov	r7, r5
 80059c6:	42bb      	cmp	r3, r7
 80059c8:	460d      	mov	r5, r1
 80059ca:	d9f4      	bls.n	80059b6 <_printf_i+0x11a>
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d10b      	bne.n	80059e8 <_printf_i+0x14c>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	07df      	lsls	r7, r3, #31
 80059d4:	d508      	bpl.n	80059e8 <_printf_i+0x14c>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	6861      	ldr	r1, [r4, #4]
 80059da:	4299      	cmp	r1, r3
 80059dc:	bfde      	ittt	le
 80059de:	2330      	movle	r3, #48	; 0x30
 80059e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059e8:	1b92      	subs	r2, r2, r6
 80059ea:	6122      	str	r2, [r4, #16]
 80059ec:	f8cd a000 	str.w	sl, [sp]
 80059f0:	464b      	mov	r3, r9
 80059f2:	aa03      	add	r2, sp, #12
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff fee2 	bl	80057c0 <_printf_common>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d14c      	bne.n	8005a9a <_printf_i+0x1fe>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	b004      	add	sp, #16
 8005a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0a:	4835      	ldr	r0, [pc, #212]	; (8005ae0 <_printf_i+0x244>)
 8005a0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	680e      	ldr	r6, [r1, #0]
 8005a14:	061f      	lsls	r7, r3, #24
 8005a16:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a1a:	600e      	str	r6, [r1, #0]
 8005a1c:	d514      	bpl.n	8005a48 <_printf_i+0x1ac>
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	bf44      	itt	mi
 8005a22:	f043 0320 	orrmi.w	r3, r3, #32
 8005a26:	6023      	strmi	r3, [r4, #0]
 8005a28:	b91d      	cbnz	r5, 8005a32 <_printf_i+0x196>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f023 0320 	bic.w	r3, r3, #32
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2310      	movs	r3, #16
 8005a34:	e7b0      	b.n	8005998 <_printf_i+0xfc>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	2378      	movs	r3, #120	; 0x78
 8005a40:	4828      	ldr	r0, [pc, #160]	; (8005ae4 <_printf_i+0x248>)
 8005a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a46:	e7e3      	b.n	8005a10 <_printf_i+0x174>
 8005a48:	065e      	lsls	r6, r3, #25
 8005a4a:	bf48      	it	mi
 8005a4c:	b2ad      	uxthmi	r5, r5
 8005a4e:	e7e6      	b.n	8005a1e <_printf_i+0x182>
 8005a50:	4616      	mov	r6, r2
 8005a52:	e7bb      	b.n	80059cc <_printf_i+0x130>
 8005a54:	680b      	ldr	r3, [r1, #0]
 8005a56:	6826      	ldr	r6, [r4, #0]
 8005a58:	6960      	ldr	r0, [r4, #20]
 8005a5a:	1d1d      	adds	r5, r3, #4
 8005a5c:	600d      	str	r5, [r1, #0]
 8005a5e:	0635      	lsls	r5, r6, #24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	d501      	bpl.n	8005a68 <_printf_i+0x1cc>
 8005a64:	6018      	str	r0, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <_printf_i+0x1d2>
 8005a68:	0671      	lsls	r1, r6, #25
 8005a6a:	d5fb      	bpl.n	8005a64 <_printf_i+0x1c8>
 8005a6c:	8018      	strh	r0, [r3, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	4616      	mov	r6, r2
 8005a74:	e7ba      	b.n	80059ec <_printf_i+0x150>
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	600a      	str	r2, [r1, #0]
 8005a7c:	681e      	ldr	r6, [r3, #0]
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7fa fba4 	bl	80001d0 <memchr>
 8005a88:	b108      	cbz	r0, 8005a8e <_printf_i+0x1f2>
 8005a8a:	1b80      	subs	r0, r0, r6
 8005a8c:	6060      	str	r0, [r4, #4]
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	2300      	movs	r3, #0
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a98:	e7a8      	b.n	80059ec <_printf_i+0x150>
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d0ab      	beq.n	8005a00 <_printf_i+0x164>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	079b      	lsls	r3, r3, #30
 8005aac:	d413      	bmi.n	8005ad6 <_printf_i+0x23a>
 8005aae:	68e0      	ldr	r0, [r4, #12]
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bfb8      	it	lt
 8005ab6:	4618      	movlt	r0, r3
 8005ab8:	e7a4      	b.n	8005a04 <_printf_i+0x168>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4632      	mov	r2, r6
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d09b      	beq.n	8005a00 <_printf_i+0x164>
 8005ac8:	3501      	adds	r5, #1
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	9903      	ldr	r1, [sp, #12]
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dcf2      	bgt.n	8005aba <_printf_i+0x21e>
 8005ad4:	e7eb      	b.n	8005aae <_printf_i+0x212>
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	f104 0619 	add.w	r6, r4, #25
 8005adc:	e7f5      	b.n	8005aca <_printf_i+0x22e>
 8005ade:	bf00      	nop
 8005ae0:	08005d9d 	.word	0x08005d9d
 8005ae4:	08005dae 	.word	0x08005dae

08005ae8 <memcpy>:
 8005ae8:	440a      	add	r2, r1
 8005aea:	4291      	cmp	r1, r2
 8005aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af0:	d100      	bne.n	8005af4 <memcpy+0xc>
 8005af2:	4770      	bx	lr
 8005af4:	b510      	push	{r4, lr}
 8005af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d1f9      	bne.n	8005af6 <memcpy+0xe>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <memmove>:
 8005b04:	4288      	cmp	r0, r1
 8005b06:	b510      	push	{r4, lr}
 8005b08:	eb01 0402 	add.w	r4, r1, r2
 8005b0c:	d902      	bls.n	8005b14 <memmove+0x10>
 8005b0e:	4284      	cmp	r4, r0
 8005b10:	4623      	mov	r3, r4
 8005b12:	d807      	bhi.n	8005b24 <memmove+0x20>
 8005b14:	1e43      	subs	r3, r0, #1
 8005b16:	42a1      	cmp	r1, r4
 8005b18:	d008      	beq.n	8005b2c <memmove+0x28>
 8005b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b22:	e7f8      	b.n	8005b16 <memmove+0x12>
 8005b24:	4402      	add	r2, r0
 8005b26:	4601      	mov	r1, r0
 8005b28:	428a      	cmp	r2, r1
 8005b2a:	d100      	bne.n	8005b2e <memmove+0x2a>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b36:	e7f7      	b.n	8005b28 <memmove+0x24>

08005b38 <_free_r>:
 8005b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3a:	2900      	cmp	r1, #0
 8005b3c:	d048      	beq.n	8005bd0 <_free_r+0x98>
 8005b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b42:	9001      	str	r0, [sp, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4a:	bfb8      	it	lt
 8005b4c:	18e4      	addlt	r4, r4, r3
 8005b4e:	f000 f8d3 	bl	8005cf8 <__malloc_lock>
 8005b52:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <_free_r+0x9c>)
 8005b54:	9801      	ldr	r0, [sp, #4]
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	4615      	mov	r5, r2
 8005b5a:	b933      	cbnz	r3, 8005b6a <_free_r+0x32>
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6014      	str	r4, [r2, #0]
 8005b60:	b003      	add	sp, #12
 8005b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b66:	f000 b8cd 	b.w	8005d04 <__malloc_unlock>
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d90b      	bls.n	8005b86 <_free_r+0x4e>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1862      	adds	r2, r4, r1
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bf04      	itt	eq
 8005b76:	681a      	ldreq	r2, [r3, #0]
 8005b78:	685b      	ldreq	r3, [r3, #4]
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	bf04      	itt	eq
 8005b7e:	1852      	addeq	r2, r2, r1
 8005b80:	6022      	streq	r2, [r4, #0]
 8005b82:	602c      	str	r4, [r5, #0]
 8005b84:	e7ec      	b.n	8005b60 <_free_r+0x28>
 8005b86:	461a      	mov	r2, r3
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b10b      	cbz	r3, 8005b90 <_free_r+0x58>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d9fa      	bls.n	8005b86 <_free_r+0x4e>
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	1855      	adds	r5, r2, r1
 8005b94:	42a5      	cmp	r5, r4
 8005b96:	d10b      	bne.n	8005bb0 <_free_r+0x78>
 8005b98:	6824      	ldr	r4, [r4, #0]
 8005b9a:	4421      	add	r1, r4
 8005b9c:	1854      	adds	r4, r2, r1
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6011      	str	r1, [r2, #0]
 8005ba2:	d1dd      	bne.n	8005b60 <_free_r+0x28>
 8005ba4:	681c      	ldr	r4, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	6053      	str	r3, [r2, #4]
 8005baa:	4421      	add	r1, r4
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	e7d7      	b.n	8005b60 <_free_r+0x28>
 8005bb0:	d902      	bls.n	8005bb8 <_free_r+0x80>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	e7d3      	b.n	8005b60 <_free_r+0x28>
 8005bb8:	6825      	ldr	r5, [r4, #0]
 8005bba:	1961      	adds	r1, r4, r5
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf04      	itt	eq
 8005bc0:	6819      	ldreq	r1, [r3, #0]
 8005bc2:	685b      	ldreq	r3, [r3, #4]
 8005bc4:	6063      	str	r3, [r4, #4]
 8005bc6:	bf04      	itt	eq
 8005bc8:	1949      	addeq	r1, r1, r5
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	6054      	str	r4, [r2, #4]
 8005bce:	e7c7      	b.n	8005b60 <_free_r+0x28>
 8005bd0:	b003      	add	sp, #12
 8005bd2:	bd30      	pop	{r4, r5, pc}
 8005bd4:	200060b0 	.word	0x200060b0

08005bd8 <_malloc_r>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	1ccd      	adds	r5, r1, #3
 8005bdc:	f025 0503 	bic.w	r5, r5, #3
 8005be0:	3508      	adds	r5, #8
 8005be2:	2d0c      	cmp	r5, #12
 8005be4:	bf38      	it	cc
 8005be6:	250c      	movcc	r5, #12
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	4606      	mov	r6, r0
 8005bec:	db01      	blt.n	8005bf2 <_malloc_r+0x1a>
 8005bee:	42a9      	cmp	r1, r5
 8005bf0:	d903      	bls.n	8005bfa <_malloc_r+0x22>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfa:	f000 f87d 	bl	8005cf8 <__malloc_lock>
 8005bfe:	4921      	ldr	r1, [pc, #132]	; (8005c84 <_malloc_r+0xac>)
 8005c00:	680a      	ldr	r2, [r1, #0]
 8005c02:	4614      	mov	r4, r2
 8005c04:	b99c      	cbnz	r4, 8005c2e <_malloc_r+0x56>
 8005c06:	4f20      	ldr	r7, [pc, #128]	; (8005c88 <_malloc_r+0xb0>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	b923      	cbnz	r3, 8005c16 <_malloc_r+0x3e>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 f862 	bl	8005cd8 <_sbrk_r>
 8005c14:	6038      	str	r0, [r7, #0]
 8005c16:	4629      	mov	r1, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f85d 	bl	8005cd8 <_sbrk_r>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d123      	bne.n	8005c6a <_malloc_r+0x92>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f86c 	bl	8005d04 <__malloc_unlock>
 8005c2c:	e7e3      	b.n	8005bf6 <_malloc_r+0x1e>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	1b5b      	subs	r3, r3, r5
 8005c32:	d417      	bmi.n	8005c64 <_malloc_r+0x8c>
 8005c34:	2b0b      	cmp	r3, #11
 8005c36:	d903      	bls.n	8005c40 <_malloc_r+0x68>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	441c      	add	r4, r3
 8005c3c:	6025      	str	r5, [r4, #0]
 8005c3e:	e004      	b.n	8005c4a <_malloc_r+0x72>
 8005c40:	6863      	ldr	r3, [r4, #4]
 8005c42:	42a2      	cmp	r2, r4
 8005c44:	bf0c      	ite	eq
 8005c46:	600b      	streq	r3, [r1, #0]
 8005c48:	6053      	strne	r3, [r2, #4]
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f85a 	bl	8005d04 <__malloc_unlock>
 8005c50:	f104 000b 	add.w	r0, r4, #11
 8005c54:	1d23      	adds	r3, r4, #4
 8005c56:	f020 0007 	bic.w	r0, r0, #7
 8005c5a:	1ac2      	subs	r2, r0, r3
 8005c5c:	d0cc      	beq.n	8005bf8 <_malloc_r+0x20>
 8005c5e:	1a1b      	subs	r3, r3, r0
 8005c60:	50a3      	str	r3, [r4, r2]
 8005c62:	e7c9      	b.n	8005bf8 <_malloc_r+0x20>
 8005c64:	4622      	mov	r2, r4
 8005c66:	6864      	ldr	r4, [r4, #4]
 8005c68:	e7cc      	b.n	8005c04 <_malloc_r+0x2c>
 8005c6a:	1cc4      	adds	r4, r0, #3
 8005c6c:	f024 0403 	bic.w	r4, r4, #3
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d0e3      	beq.n	8005c3c <_malloc_r+0x64>
 8005c74:	1a21      	subs	r1, r4, r0
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f82e 	bl	8005cd8 <_sbrk_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1dd      	bne.n	8005c3c <_malloc_r+0x64>
 8005c80:	e7cf      	b.n	8005c22 <_malloc_r+0x4a>
 8005c82:	bf00      	nop
 8005c84:	200060b0 	.word	0x200060b0
 8005c88:	200060b4 	.word	0x200060b4

08005c8c <_realloc_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	4607      	mov	r7, r0
 8005c90:	4614      	mov	r4, r2
 8005c92:	460e      	mov	r6, r1
 8005c94:	b921      	cbnz	r1, 8005ca0 <_realloc_r+0x14>
 8005c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	f7ff bf9c 	b.w	8005bd8 <_malloc_r>
 8005ca0:	b922      	cbnz	r2, 8005cac <_realloc_r+0x20>
 8005ca2:	f7ff ff49 	bl	8005b38 <_free_r>
 8005ca6:	4625      	mov	r5, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cac:	f000 f830 	bl	8005d10 <_malloc_usable_size_r>
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d20f      	bcs.n	8005cd4 <_realloc_r+0x48>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ff8e 	bl	8005bd8 <_malloc_r>
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0f2      	beq.n	8005ca8 <_realloc_r+0x1c>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	f7ff ff0f 	bl	8005ae8 <memcpy>
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff33 	bl	8005b38 <_free_r>
 8005cd2:	e7e9      	b.n	8005ca8 <_realloc_r+0x1c>
 8005cd4:	4635      	mov	r5, r6
 8005cd6:	e7e7      	b.n	8005ca8 <_realloc_r+0x1c>

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	; (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fb f9e6 	bl	80010b4 <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	2000620c 	.word	0x2000620c

08005cf8 <__malloc_lock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_lock+0x8>)
 8005cfa:	f000 b811 	b.w	8005d20 <__retarget_lock_acquire_recursive>
 8005cfe:	bf00      	nop
 8005d00:	20006214 	.word	0x20006214

08005d04 <__malloc_unlock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__malloc_unlock+0x8>)
 8005d06:	f000 b80c 	b.w	8005d22 <__retarget_lock_release_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20006214 	.word	0x20006214

08005d10 <_malloc_usable_size_r>:
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f18      	subs	r0, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfbc      	itt	lt
 8005d1a:	580b      	ldrlt	r3, [r1, r0]
 8005d1c:	18c0      	addlt	r0, r0, r3
 8005d1e:	4770      	bx	lr

08005d20 <__retarget_lock_acquire_recursive>:
 8005d20:	4770      	bx	lr

08005d22 <__retarget_lock_release_recursive>:
 8005d22:	4770      	bx	lr

08005d24 <_init>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr

08005d30 <_fini>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr
