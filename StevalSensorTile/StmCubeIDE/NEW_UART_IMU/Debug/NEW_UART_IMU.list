
NEW_UART_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e8  080051e8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080051f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bce8  20000014  08005204  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bcfc  08005204  0002bcfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fafb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210e  00000000  00000000  0002fb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00031c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002539d  00000000  00000000  00033648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e749  00000000  00000000  000589e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eab02  00000000  00000000  0006712e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  00151c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005180 	.word	0x08005180

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005180 	.word	0x08005180

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fd0c 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f851 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f92f 	bl	8000730 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004d2:	f000 f893 	bl	80005fc <MX_SPI2_Init>
  MX_UART5_Init();
 80004d6:	f000 f8cf 	bl	8000678 <MX_UART5_Init>
  MX_USART2_Init();
 80004da:	f000 f8fd 	bl	80006d8 <MX_USART2_Init>

	// uint8_t CTRL3_C_reg=0x12;
	// uint8_t CTRL3_C_set_sim=0b00001100;
	// lsm6ds3_write(&hspi2, CTRL3_C_reg, &CTRL3_C_set_sim, 1);

	uint16_t i=0;
 80004de:	2300      	movs	r3, #0
 80004e0:	81fb      	strh	r3, [r7, #14]
	whoami(); // check if device can be found
 80004e2:	f000 f9c9 	bl	8000878 <whoami>

	// set UART5 interrupt
	HAL_UART_Receive_IT(&huart5, rxBuffer, 5);
 80004e6:	2205      	movs	r2, #5
 80004e8:	491b      	ldr	r1, [pc, #108]	; (8000558 <main+0x98>)
 80004ea:	481c      	ldr	r0, [pc, #112]	; (800055c <main+0x9c>)
 80004ec:	f003 fbe2 	bl	8003cb4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag==1)
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0xa0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d1fb      	bne.n	80004f0 <main+0x30>
	  {
		  i++;
 80004f8:	89fb      	ldrh	r3, [r7, #14]
 80004fa:	3301      	adds	r3, #1
 80004fc:	81fb      	strh	r3, [r7, #14]
		  lsm6dsm_read_accel(&acc_x,&acc_y,&acc_z);
 80004fe:	463a      	mov	r2, r7
 8000500:	1d39      	adds	r1, r7, #4
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fa2c 	bl	8000964 <lsm6dsm_read_accel>
		  flag=0;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <main+0xa0>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]

		  accel_data_x[i]=acc_x;
 8000512:	edd7 7a02 	vldr	s15, [r7, #8]
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800051c:	ee17 2a90 	vmov	r2, s15
 8000520:	b291      	uxth	r1, r2
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <main+0xa4>)
 8000524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  accel_data_y[i]=acc_y;
 8000528:	edd7 7a01 	vldr	s15, [r7, #4]
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000532:	ee17 2a90 	vmov	r2, s15
 8000536:	b291      	uxth	r1, r2
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <main+0xa8>)
 800053a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  accel_data_z[i]=acc_z;
 800053e:	edd7 7a00 	vldr	s15, [r7]
 8000542:	89fb      	ldrh	r3, [r7, #14]
 8000544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000548:	ee17 2a90 	vmov	r2, s15
 800054c:	b291      	uxth	r1, r2
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <main+0xac>)
 8000550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  if(flag==1)
 8000554:	e7cc      	b.n	80004f0 <main+0x30>
 8000556:	bf00      	nop
 8000558:	2000bca0 	.word	0x2000bca0
 800055c:	2000bc18 	.word	0x2000bc18
 8000560:	20000030 	.word	0x20000030
 8000564:	20000034 	.word	0x20000034
 8000568:	20003eb4 	.word	0x20003eb4
 800056c:	20007d34 	.word	0x20007d34

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fdf6 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f001 f891 	bl	80016bc <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fab0 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	; 0x60
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f8e3 	bl	8001788 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005c8:	f000 fa9c 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fcb5 	bl	8001f54 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 fa88 	bl	8000b04 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	; 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI2_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI2_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI2_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI2_Init+0x74>)
 8000610:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000614:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI2_Init+0x74>)
 8000618:	f44f 7240 	mov.w	r2, #768	; 0x300
 800061c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI2_Init+0x74>)
 8000620:	2202      	movs	r2, #2
 8000622:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_SPI2_Init+0x74>)
 8000626:	2201      	movs	r2, #1
 8000628:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI2_Init+0x74>)
 800062c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000630:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_SPI2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_SPI2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI2_Init+0x74>)
 800064c:	2207      	movs	r2, #7
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_SPI2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_SPI2_Init+0x74>)
 800065e:	f002 fb3b 	bl	8002cd8 <HAL_SPI_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 fa4c 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000bbb4 	.word	0x2000bbb4
 8000674:	40003800 	.word	0x40003800

08000678 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_UART5_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_UART5_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_UART5_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_UART5_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_UART5_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_UART5_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_UART5_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_UART5_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_UART5_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_UART5_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_UART5_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_UART5_Init+0x58>)
 80006bc:	f003 fa18 	bl	8003af0 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 fa1d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000bc18 	.word	0x2000bc18
 80006d4:	40005000 	.word	0x40005000

080006d8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_USART2_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_USART2_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_Init+0x50>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_USART2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_USART2_Init+0x50>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_USART2_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_USART2_Init+0x50>)
 8000716:	f004 faed 	bl	8004cf4 <HAL_USART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9f0 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000bca8 	.word	0x2000bca8
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b46      	ldr	r3, [pc, #280]	; (8000860 <MX_GPIO_Init+0x130>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a45      	ldr	r2, [pc, #276]	; (8000860 <MX_GPIO_Init+0x130>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b43      	ldr	r3, [pc, #268]	; (8000860 <MX_GPIO_Init+0x130>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b40      	ldr	r3, [pc, #256]	; (8000860 <MX_GPIO_Init+0x130>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a3f      	ldr	r2, [pc, #252]	; (8000860 <MX_GPIO_Init+0x130>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <MX_GPIO_Init+0x130>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_GPIO_Init+0x130>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a39      	ldr	r2, [pc, #228]	; (8000860 <MX_GPIO_Init+0x130>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_GPIO_Init+0x130>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800078e:	f000 ffeb 	bl	8001768 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_GPIO_Init+0x130>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a32      	ldr	r2, [pc, #200]	; (8000860 <MX_GPIO_Init+0x130>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_GPIO_Init+0x130>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_GPIO_Init+0x130>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <MX_GPIO_Init+0x130>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0x130>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	4826      	ldr	r0, [pc, #152]	; (8000864 <MX_GPIO_Init+0x134>)
 80007ca:	f000 ff39 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	4824      	ldr	r0, [pc, #144]	; (8000868 <MX_GPIO_Init+0x138>)
 80007d6:	f000 ff33 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	; (8000864 <MX_GPIO_Init+0x134>)
 80007f4:	f000 fd7a 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PWMI_RAS_Pin */
  GPIO_InitStruct.Pin = PWMI_RAS_Pin;
 80007f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_GPIO_Init+0x13c>)
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWMI_RAS_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0x138>)
 800080e:	f000 fd6d 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_GPIO_Init+0x140>)
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_GPIO_Init+0x144>)
 8000826:	f000 fd61 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_GPIO_Init+0x138>)
 8000844:	f000 fd52 	bl	80012ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f000 fc98 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f000 fcb1 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48001800 	.word	0x48001800
 8000868:	48000400 	.word	0x48000400
 800086c:	10310000 	.word	0x10310000
 8000870:	10110000 	.word	0x10110000
 8000874:	48000800 	.word	0x48000800

08000878 <whoami>:

/* USER CODE BEGIN 4 */

void whoami(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	// adr_WHO_AM_I has to be 0x6a
	uint8_t who_am_i;
	uint8_t who_am_i_reg=0x0F;
 800087e:	230f      	movs	r3, #15
 8000880:	71fb      	strb	r3, [r7, #7]
	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000882:	1dba      	adds	r2, r7, #6
 8000884:	79f9      	ldrb	r1, [r7, #7]
 8000886:	2301      	movs	r3, #1
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <whoami+0x28>)
 800088a:	f000 f8f7 	bl	8000a7c <lsm6ds3_read>

	if(who_am_i!=0x6a)
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	2b6a      	cmp	r3, #106	; 0x6a
 8000892:	d000      	beq.n	8000896 <whoami+0x1e>
	{
		// error when jumping in here
		// device not found!!!
		while(1)
 8000894:	e7fe      	b.n	8000894 <whoami+0x1c>
		{
		}
	}
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000bbb4 	.word	0x2000bbb4

080008a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	// __NOP(); // used to debug the Callback

	flag=0;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_UART_RxCpltCallback+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	uint8_t data_tab=0xff;
 80008b2:	23ff      	movs	r3, #255	; 0xff
 80008b4:	737b      	strb	r3, [r7, #13]
	uint16_t size=sizeof(accel_data_x);
 80008b6:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80008ba:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart5,(uint8_t *)accel_data_x, size, Timeout);
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_RxCpltCallback+0x7c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	89fa      	ldrh	r2, [r7, #14]
 80008c2:	4918      	ldr	r1, [pc, #96]	; (8000924 <HAL_UART_RxCpltCallback+0x80>)
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_UART_RxCpltCallback+0x84>)
 80008c6:	f003 f961 	bl	8003b8c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &data_tab, 1, Timeout);
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_RxCpltCallback+0x7c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f107 010d 	add.w	r1, r7, #13
 80008d2:	2201      	movs	r2, #1
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <HAL_UART_RxCpltCallback+0x84>)
 80008d6:	f003 f959 	bl	8003b8c <HAL_UART_Transmit>
	size=sizeof(accel_data_y);
 80008da:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80008de:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart5,(uint8_t *)accel_data_y, size, Timeout);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_UART_RxCpltCallback+0x7c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	4911      	ldr	r1, [pc, #68]	; (800092c <HAL_UART_RxCpltCallback+0x88>)
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <HAL_UART_RxCpltCallback+0x84>)
 80008ea:	f003 f94f 	bl	8003b8c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &data_tab, 1, Timeout);
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_UART_RxCpltCallback+0x7c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f107 010d 	add.w	r1, r7, #13
 80008f6:	2201      	movs	r2, #1
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_UART_RxCpltCallback+0x84>)
 80008fa:	f003 f947 	bl	8003b8c <HAL_UART_Transmit>
	size=sizeof(accel_data_z);
 80008fe:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000902:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart5,(uint8_t *)accel_data_z, 8000, Timeout);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_UART_RxCpltCallback+0x7c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800090c:	4908      	ldr	r1, [pc, #32]	; (8000930 <HAL_UART_RxCpltCallback+0x8c>)
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_UART_RxCpltCallback+0x84>)
 8000910:	f003 f93c 	bl	8003b8c <HAL_UART_Transmit>

	// check if parity bit is needed for UART!

}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000030 	.word	0x20000030
 8000920:	20000004 	.word	0x20000004
 8000924:	20000034 	.word	0x20000034
 8000928:	2000bc18 	.word	0x2000bc18
 800092c:	20003eb4 	.word	0x20003eb4
 8000930:	20007d34 	.word	0x20007d34

08000934 <lsm6dsm_from_fs2g_to_mg>:
	lsm6ds3_write(&hspi2, reg, &bufp, len);

}

float lsm6dsm_from_fs2g_to_mg(int16_t lsb)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	//
  return ((float)lsb * 0.061f);
 800093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000960 <lsm6dsm_from_fs2g_to_mg+0x2c>
 800094e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000952:	eeb0 0a67 	vmov.f32	s0, s15
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	3d79db23 	.word	0x3d79db23

08000964 <lsm6dsm_read_accel>:
  return ((float)lsb * 17.50f);
}


uint16_t lsm6dsm_read_accel(float* accel_x,float* accel_y,float* accel_z)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	uint32_t len=1;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
	uint8_t data_H=0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	74fb      	strb	r3, [r7, #19]
	uint8_t data_L=0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	74bb      	strb	r3, [r7, #18]
	int16_t data=0;
 800097c:	2300      	movs	r3, #0
 800097e:	837b      	strh	r3, [r7, #26]
	float temporary;

	// read x acceleration
	uint8_t reg=LSM6DS3H_REG_OUTX_H_XL;
 8000980:	2329      	movs	r3, #41	; 0x29
 8000982:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_H, len);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f107 0213 	add.w	r2, r7, #19
 800098c:	7e79      	ldrb	r1, [r7, #25]
 800098e:	483a      	ldr	r0, [pc, #232]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 8000990:	f000 f874 	bl	8000a7c <lsm6ds3_read>
	reg=LSM6DS3H_REG_OUTX_L_XL;
 8000994:	2328      	movs	r3, #40	; 0x28
 8000996:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_L, len);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	b29b      	uxth	r3, r3
 800099c:	f107 0212 	add.w	r2, r7, #18
 80009a0:	7e79      	ldrb	r1, [r7, #25]
 80009a2:	4835      	ldr	r0, [pc, #212]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 80009a4:	f000 f86a 	bl	8000a7c <lsm6ds3_read>
	data=(data_H<<8)|data_L;
 80009a8:	7cfb      	ldrb	r3, [r7, #19]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	7cbb      	ldrb	r3, [r7, #18]
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	837b      	strh	r3, [r7, #26]
	// calc to mg
	temporary=lsm6dsm_from_fs2g_to_mg(data);
 80009b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffba 	bl	8000934 <lsm6dsm_from_fs2g_to_mg>
 80009c0:	ed87 0a05 	vstr	s0, [r7, #20]
	// output measurement
	*accel_x=temporary;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

	data_H=0x00;
 80009ca:	2300      	movs	r3, #0
 80009cc:	74fb      	strb	r3, [r7, #19]
	data_L=0x00;
 80009ce:	2300      	movs	r3, #0
 80009d0:	74bb      	strb	r3, [r7, #18]

	// read y acceleration
	reg=LSM6DS3H_REG_OUTY_H_XL;
 80009d2:	232b      	movs	r3, #43	; 0x2b
 80009d4:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_H, len);
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f107 0213 	add.w	r2, r7, #19
 80009de:	7e79      	ldrb	r1, [r7, #25]
 80009e0:	4825      	ldr	r0, [pc, #148]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 80009e2:	f000 f84b 	bl	8000a7c <lsm6ds3_read>
	reg=LSM6DS3H_REG_OUTY_L_XL;
 80009e6:	232a      	movs	r3, #42	; 0x2a
 80009e8:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_L, len);
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f107 0212 	add.w	r2, r7, #18
 80009f2:	7e79      	ldrb	r1, [r7, #25]
 80009f4:	4820      	ldr	r0, [pc, #128]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 80009f6:	f000 f841 	bl	8000a7c <lsm6ds3_read>
	data=(data_H<<8)|data_L;
 80009fa:	7cfb      	ldrb	r3, [r7, #19]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	7cbb      	ldrb	r3, [r7, #18]
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	837b      	strh	r3, [r7, #26]

	temporary=lsm6dsm_from_fs2g_to_mg(data);
 8000a08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff91 	bl	8000934 <lsm6dsm_from_fs2g_to_mg>
 8000a12:	ed87 0a05 	vstr	s0, [r7, #20]
	*accel_y=temporary;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	601a      	str	r2, [r3, #0]

	data_H=0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	74fb      	strb	r3, [r7, #19]
	data_L=0x00;
 8000a20:	2300      	movs	r3, #0
 8000a22:	74bb      	strb	r3, [r7, #18]

	// read z acceleration
	reg=LSM6DS3H_REG_OUTZ_H_XL;
 8000a24:	232d      	movs	r3, #45	; 0x2d
 8000a26:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_H, len);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f107 0213 	add.w	r2, r7, #19
 8000a30:	7e79      	ldrb	r1, [r7, #25]
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 8000a34:	f000 f822 	bl	8000a7c <lsm6ds3_read>
	reg=LSM6DS3H_REG_OUTZ_L_XL;
 8000a38:	232c      	movs	r3, #44	; 0x2c
 8000a3a:	767b      	strb	r3, [r7, #25]
	lsm6ds3_read(&hspi2, reg, &data_L, len);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f107 0212 	add.w	r2, r7, #18
 8000a44:	7e79      	ldrb	r1, [r7, #25]
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <lsm6dsm_read_accel+0x114>)
 8000a48:	f000 f818 	bl	8000a7c <lsm6ds3_read>
	data=(data_H<<8)|data_L;
 8000a4c:	7cfb      	ldrb	r3, [r7, #19]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	7cbb      	ldrb	r3, [r7, #18]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	837b      	strh	r3, [r7, #26]

	temporary=lsm6dsm_from_fs2g_to_mg(data);
 8000a5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff68 	bl	8000934 <lsm6dsm_from_fs2g_to_mg>
 8000a64:	ed87 0a05 	vstr	s0, [r7, #20]
	*accel_z=temporary;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	601a      	str	r2, [r3, #0]

	return 0;
 8000a6e:	2300      	movs	r3, #0

}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000bbb4 	.word	0x2000bbb4

08000a7c <lsm6ds3_read>:
	return 0;

}

static int32_t lsm6ds3_read(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	461a      	mov	r2, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	72fb      	strb	r3, [r7, #11]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	813b      	strh	r3, [r7, #8]
	reg |= 0x80; // set to one for read operation
 8000a90:	7afb      	ldrb	r3, [r7, #11]
 8000a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <lsm6ds3_read+0x60>)
 8000aa2:	f000 fdcd 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <lsm6ds3_read+0x64>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f107 010b 	add.w	r1, r7, #11
 8000aae:	2201      	movs	r2, #1
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f002 f9b4 	bl	8002e1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, TIMEOUT_DURATION);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <lsm6ds3_read+0x64>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	893a      	ldrh	r2, [r7, #8]
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f002 fb1b 	bl	80030fa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <lsm6ds3_read+0x60>)
 8000acc:	f000 fdb8 	bl	8001640 <HAL_GPIO_WritePin>

  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	48000400 	.word	0x48000400
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <HAL_GPIO_EXTI_Callback>:

  return 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
	flag=0;
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20000030 	.word	0x20000030

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8000baa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_SPI_MspInit+0x84>)
 8000bc8:	f000 fb90 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ac      	sub	sp, #176	; 0xb0
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2288      	movs	r2, #136	; 0x88
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fab5 	bl	8005170 <memset>
  if(huart->Instance==UART5)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_UART_MspInit+0x104>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d164      	bne.n	8000cda <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c10:	2310      	movs	r3, #16
 8000c12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fb9f 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c28:	f7ff ff6c 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c36:	6593      	str	r3, [r2, #88]	; 0x58
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c74:	2304      	movs	r3, #4
 8000c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <HAL_UART_MspInit+0x10c>)
 8000c9a:	f000 fb27 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <HAL_UART_MspInit+0x110>)
 8000cc6:	f000 fb11 	bl	80012ec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2035      	movs	r0, #53	; 0x35
 8000cd0:	f000 fa57 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000cd4:	2035      	movs	r0, #53	; 0x35
 8000cd6:	f000 fa70 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	37b0      	adds	r7, #176	; 0xb0
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40005000 	.word	0x40005000
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	48000800 	.word	0x48000800

08000cf4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ac      	sub	sp, #176	; 0xb0
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2288      	movs	r2, #136	; 0x88
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fa2b 	bl	8005170 <memset>
  if(husart->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_USART_MspInit+0xb0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13b      	bne.n	8000d9c <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fb15 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000d3c:	f7ff fee2 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_USART_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8000d70:	231c      	movs	r3, #28
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f000 faa8 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	37b0      	adds	r7, #176	; 0xb0
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f8c8 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e04:	2040      	movs	r0, #64	; 0x40
 8000e06:	f000 fc33 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e0e:	f000 fc2f 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <UART5_IRQHandler+0x10>)
 8000e1e:	f002 ff8d 	bl	8003d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000bc18 	.word	0x2000bc18

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <SystemInit+0x5c>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <SystemInit+0x5c>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0x60>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <SystemInit+0x60>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0x60>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <SystemInit+0x60>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <SystemInit+0x60>)
 8000e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SystemInit+0x60>)
 8000e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x60>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x60>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	40021000 	.word	0x40021000

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffca 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
	ldr	r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LoopForever+0x16>)
	cmp	r2, r3
 8000eba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f004 f933 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fafd 	bl	80004c0 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ecc:	080051f0 	.word	0x080051f0
	ldr	r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000ed8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000edc:	2000bcfc 	.word	0x2000bcfc

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f93d 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fe04 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f949 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f913 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000010 	.word	0x20000010
 8000f84:	20000008 	.word	0x20000008
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	2000bcf8 	.word	0x2000bcf8

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000bcf8 	.word	0x2000bcf8

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d008      	beq.n	8001218 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2204      	movs	r2, #4
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e022      	b.n	800125e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 020e 	bic.w	r2, r2, #14
 8001226:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	f003 021c 	and.w	r2, r3, #28
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d005      	beq.n	800128e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e029      	b.n	80012e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
    }
  }
  return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	e17f      	b.n	80015fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8171 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00b      	beq.n	8001334 <HAL_GPIO_Init+0x48>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	2b11      	cmp	r3, #17
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b12      	cmp	r3, #18
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d118      	bne.n	80013d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x128>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ac 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	4a5e      	ldr	r2, [pc, #376]	; (800161c <HAL_GPIO_Init+0x330>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	; 0x60
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_GPIO_Init+0x330>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b6:	4a5a      	ldr	r2, [pc, #360]	; (8001620 <HAL_GPIO_Init+0x334>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x242>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x338>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x23e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x33c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_GPIO_Init+0x340>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x236>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x344>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x232>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_GPIO_Init+0x348>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x34c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x22a>
 8001512:	2306      	movs	r3, #6
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001516:	2307      	movs	r3, #7
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001540:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_GPIO_Init+0x350>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_GPIO_Init+0x350>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_GPIO_Init+0x350>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_GPIO_Init+0x350>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_GPIO_Init+0x350>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_GPIO_Init+0x350>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_GPIO_Init+0x350>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_GPIO_Init+0x350>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f ae78 	bne.w	80012fc <HAL_GPIO_Init+0x10>
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	48001800 	.word	0x48001800
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e002      	b.n	8001664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa28 	bl	8000ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000

080016bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ca:	d130      	bne.n	800172e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d8:	d038      	beq.n	800174c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2232      	movs	r2, #50	; 0x32
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001700:	e002      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3b01      	subs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001714:	d102      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f2      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001728:	d110      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e00f      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173a:	d007      	beq.n	800174c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001744:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40007000 	.word	0x40007000
 8001760:	20000008 	.word	0x20000008
 8001764:	431bde83 	.word	0x431bde83

08001768 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_PWREx_EnableVddIO2+0x1c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001776:	6053      	str	r3, [r2, #4]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e3d4      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	4ba1      	ldr	r3, [pc, #644]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a4:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80e4 	beq.w	8001984 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4a>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	f040 808b 	bne.w	80018e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 8087 	bne.w	80018e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d2:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e3ac      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <HAL_RCC_OscConfig+0x7c>
 80017fa:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001802:	e005      	b.n	8001810 <HAL_RCC_OscConfig+0x88>
 8001804:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001810:	4293      	cmp	r3, r2
 8001812:	d223      	bcs.n	800185c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fd41 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e38d      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001828:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4977      	ldr	r1, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	4972      	ldr	r1, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
 800185a:	e025      	b.n	80018a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	496a      	ldr	r1, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187a:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	4965      	ldr	r1, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fd01 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e34d      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018a8:	f000 fc36 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	495a      	ldr	r1, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x29c>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_OscConfig+0x2a0>)
 80018c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c8:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <HAL_RCC_OscConfig+0x2a4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb21 	bl	8000f14 <HAL_InitTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d052      	beq.n	8001982 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	e331      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d032      	beq.n	800194e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb5e 	bl	8000fb4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fc:	f7ff fb5a 	bl	8000fb4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e31a      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a40      	ldr	r2, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	493b      	ldr	r1, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	4936      	ldr	r1, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e01a      	b.n	8001984 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195a:	f7ff fb2b 	bl	8000fb4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001962:	f7ff fb27 	bl	8000fb4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e2e7      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x1da>
 8001980:	e000      	b.n	8001984 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001982:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d074      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x21a>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d10e      	bne.n	80019ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d064      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d160      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e2c4      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x24a>
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e01d      	b.n	8001a0e <HAL_RCC_OscConfig+0x286>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x26e>
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x286>
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x298>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff facd 	bl	8000fb4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1c:	e011      	b.n	8001a42 <HAL_RCC_OscConfig+0x2ba>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08005198 	.word	0x08005198
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fac0 	bl	8000fb4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e280      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4baf      	ldr	r3, [pc, #700]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x2a8>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fab0 	bl	8000fb4 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff faac 	bl	8000fb4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e26c      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6a:	4ba5      	ldr	r3, [pc, #660]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2d0>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d060      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x310>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d116      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x328>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e249      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	4990      	ldr	r1, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	e040      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a8b      	ldr	r2, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fa6b 	bl	8000fb4 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fa67 	bl	8000fb4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e227      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	497c      	ldr	r1, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a79      	ldr	r2, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa47 	bl	8000fb4 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fa43 	bl	8000fb4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e203      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fa22 	bl	8000fb4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fa1e 	bl	8000fb4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1de      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b86:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x3ec>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa05 	bl	8000fb4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa01 	bl	8000fb4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1c1      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a6 	beq.w	8001d28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_OscConfig+0x57c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x57c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <HAL_RCC_OscConfig+0x57c>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9c8 	bl	8000fb4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff f9c4 	bl	8000fb4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e184      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x57c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4d8>
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5e:	e024      	b.n	8001caa <HAL_RCC_OscConfig+0x522>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d110      	bne.n	8001c8a <HAL_RCC_OscConfig+0x502>
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	e00f      	b.n	8001caa <HAL_RCC_OscConfig+0x522>
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f97f 	bl	8000fb4 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f97b 	bl	8000fb4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e139      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ed      	beq.n	8001cba <HAL_RCC_OscConfig+0x532>
 8001cde:	e01a      	b.n	8001d16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f968 	bl	8000fb4 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f964 	bl	8000fb4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d906      	bls.n	8001d08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e122      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	4b90      	ldr	r3, [pc, #576]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1e8      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a8a      	ldr	r2, [pc, #552]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8108 	beq.w	8001f42 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f040 80d0 	bne.w	8001edc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d130      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d127      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d11f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d7c:	2a07      	cmp	r2, #7
 8001d7e:	bf14      	ite	ne
 8001d80:	2201      	movne	r2, #1
 8001d82:	2200      	moveq	r2, #0
 8001d84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d113      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d109      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	3b01      	subs	r3, #1
 8001dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d06e      	beq.n	8001e90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d069      	beq.n	8001e8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b7      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de0:	f7ff f8e8 	bl	8000fb4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f8e4 	bl	8000fb4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0a4      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x7c8>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e16:	3a01      	subs	r2, #1
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e20:	0212      	lsls	r2, r2, #8
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e28:	0852      	lsrs	r2, r2, #1
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	0552      	lsls	r2, r2, #21
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e34:	0852      	lsrs	r2, r2, #1
 8001e36:	3a01      	subs	r2, #1
 8001e38:	0652      	lsls	r2, r2, #25
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e40:	0912      	lsrs	r2, r2, #4
 8001e42:	0452      	lsls	r2, r2, #17
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4941      	ldr	r1, [pc, #260]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3e      	ldr	r2, [pc, #248]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e64:	f7ff f8a6 	bl	8000fb4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f8a2 	bl	8000fb4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e062      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8a:	e05a      	b.n	8001f42 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e059      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d152      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb4:	f7ff f87e 	bl	8000fb4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f87a 	bl	8000fb4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e03a      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x734>
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d02d      	beq.n	8001f3e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f84d 	bl	8000fb4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff f849 	bl	8000fb4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x7c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x796>
 8001f3c:	e001      	b.n	8001f42 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	f99d808c 	.word	0xf99d808c

08001f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0c8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4961      	ldr	r1, [pc, #388]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0b0      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d04c      	beq.n	800203e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d121      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e09e      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d115      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e092      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e086      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e07e      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 0203 	bic.w	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	493f      	ldr	r1, [pc, #252]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800200e:	f7fe ffd1 	bl	8000fb4 <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002014:	e00a      	b.n	800202c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe ffcd 	bl	8000fb4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e066      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 020c 	and.w	r2, r3, #12
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	429a      	cmp	r2, r3
 800203c:	d1eb      	bne.n	8002016 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204a:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	492c      	ldr	r1, [pc, #176]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4924      	ldr	r1, [pc, #144]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e036      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4918      	ldr	r1, [pc, #96]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4910      	ldr	r1, [pc, #64]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ca:	f000 f825 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490c      	ldr	r1, [pc, #48]	; (800210c <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff10 	bl	8000f14 <HAL_InitTick>
 80020f4:	4603      	mov	r3, r0
 80020f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80020f8:	7afb      	ldrb	r3, [r7, #11]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08005198 	.word	0x08005198
 8002110:	20000008 	.word	0x20000008
 8002114:	2000000c 	.word	0x2000000c

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d121      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d11e      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d102      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e004      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d134      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0xa6>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xac>
 80021bc:	e005      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 80021c6:	617b      	str	r3, [r7, #20]
      break;
 80021c8:	e002      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	617b      	str	r3, [r7, #20]
      break;
 80021ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	fb02 f203 	mul.w	r2, r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0e5b      	lsrs	r3, r3, #25
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	3301      	adds	r3, #1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002210:	69bb      	ldr	r3, [r7, #24]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	080051b0 	.word	0x080051b0
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	080051a8 	.word	0x080051a8

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002278:	f7ff ffda 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0adb      	lsrs	r3, r3, #11
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <HAL_RCC_GetPCLK2Freq+0x28>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	080051a8 	.word	0x080051a8

080022a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b8:	f7ff f9f2 	bl	80016a0 <HAL_PWREx_GetVoltageRange>
 80022bc:	6178      	str	r0, [r7, #20]
 80022be:	e014      	b.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	; 0x58
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d8:	f7ff f9e2 	bl	80016a0 <HAL_PWREx_GetVoltageRange>
 80022dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f0:	d10b      	bne.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d919      	bls.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2ba0      	cmp	r3, #160	; 0xa0
 80022fc:	d902      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fe:	2302      	movs	r3, #2
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e013      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e010      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d902      	bls.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002310:	2303      	movs	r3, #3
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e00a      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d102      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800231c:	2302      	movs	r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e004      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d101      	bne.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002328:	2301      	movs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 0207 	bic.w	r2, r3, #7
 8002334:	4909      	ldr	r1, [pc, #36]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002368:	2300      	movs	r3, #0
 800236a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002378:	2b00      	cmp	r3, #0
 800237a:	d041      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002384:	d02a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002386:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800238a:	d824      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800238c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002396:	d81e      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800239c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a0:	d010      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023a2:	e018      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a4:	4b86      	ldr	r3, [pc, #536]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a85      	ldr	r2, [pc, #532]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b0:	e015      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fabb 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c2:	e00c      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3320      	adds	r3, #32
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fba6 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d4:	e003      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	74fb      	strb	r3, [r7, #19]
      break;
 80023da:	e000      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e4:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f2:	4973      	ldr	r1, [pc, #460]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023fa:	e001      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d041      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002410:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002414:	d02a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002416:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800241a:	d824      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800241c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002420:	d008      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002426:	d81e      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002430:	d010      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002432:	e018      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002434:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002440:	e015      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fa73 	bl	8002934 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002452:	e00c      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3320      	adds	r3, #32
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb5e 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002464:	e003      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	74fb      	strb	r3, [r7, #19]
      break;
 800246a:	e000      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800246c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002474:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002482:	494f      	ldr	r1, [pc, #316]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800248a:	e001      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a0 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3a      	ldr	r2, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fd68 	bl	8000fb4 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e6:	e009      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fd64 	bl	8000fb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	74fb      	strb	r3, [r7, #19]
        break;
 80024fa:	e005      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d15c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d019      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fd23 	bl	8000fb4 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	e00b      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fd1f 	bl	8000fb4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d902      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	74fb      	strb	r3, [r7, #19]
            break;
 8002588:	e006      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ec      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	4904      	ldr	r1, [pc, #16]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025b6:	e009      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
 80025bc:	e006      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025cc:	7c7b      	ldrb	r3, [r7, #17]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4a9d      	ldr	r2, [pc, #628]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ea:	4b98      	ldr	r3, [pc, #608]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0203 	bic.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	4994      	ldr	r1, [pc, #592]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260c:	4b8f      	ldr	r3, [pc, #572]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 020c 	bic.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	498c      	ldr	r1, [pc, #560]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262e:	4b87      	ldr	r3, [pc, #540]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4983      	ldr	r1, [pc, #524]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002650:	4b7e      	ldr	r3, [pc, #504]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	497b      	ldr	r1, [pc, #492]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	4972      	ldr	r1, [pc, #456]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002694:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	496a      	ldr	r1, [pc, #424]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b6:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	4961      	ldr	r1, [pc, #388]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d8:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	4959      	ldr	r1, [pc, #356]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	4950      	ldr	r1, [pc, #320]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	4948      	ldr	r1, [pc, #288]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d028      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002760:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277e:	d106      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a31      	ldr	r2, [pc, #196]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
 800278c:	e011      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002796:	d10c      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8c8 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	491f      	ldr	r1, [pc, #124]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027dc:	d106      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e8:	60d3      	str	r3, [r2, #12]
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f899 	bl	8002934 <RCCEx_PLLSAI1_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283a:	d109      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a02      	ldr	r2, [pc, #8]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e014      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f867 	bl	8002934 <RCCEx_PLLSAI1_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	4928      	ldr	r1, [pc, #160]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289e:	d10d      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f844 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	74bb      	strb	r3, [r7, #18]
 80028ba:	e011      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3320      	adds	r3, #32
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f925 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fa:	490d      	ldr	r1, [pc, #52]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800291e:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002926:	7cbb      	ldrb	r3, [r7, #18]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000

08002934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002942:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800294e:	4b72      	ldr	r3, [pc, #456]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d10d      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
       ||
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002966:	4b6c      	ldr	r3, [pc, #432]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
       ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d047      	beq.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e044      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d018      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x86>
 8002988:	2b03      	cmp	r3, #3
 800298a:	d825      	bhi.n	80029d8 <RCCEx_PLLSAI1_Config+0xa4>
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x62>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d009      	beq.n	80029a8 <RCCEx_PLLSAI1_Config+0x74>
 8002994:	e020      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11d      	bne.n	80029de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a6:	e01a      	b.n	80029de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a8:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e013      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ba:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029d6:	e006      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e004      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ee:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	430b      	orrs	r3, r1
 8002a04:	4944      	ldr	r1, [pc, #272]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d17d      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe faca 	bl	8000fb4 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a22:	e009      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a24:	f7fe fac6 	bl	8000fb4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d902      	bls.n	8002a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	73fb      	strb	r3, [r7, #15]
        break;
 8002a36:	e005      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ef      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d160      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6892      	ldr	r2, [r2, #8]
 8002a60:	0211      	lsls	r1, r2, #8
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	0912      	lsrs	r2, r2, #4
 8002a68:	0452      	lsls	r2, r2, #17
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	492a      	ldr	r1, [pc, #168]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	610b      	str	r3, [r1, #16]
 8002a72:	e027      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d112      	bne.n	8002aa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	0211      	lsls	r1, r2, #8
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6912      	ldr	r2, [r2, #16]
 8002a90:	0852      	lsrs	r2, r2, #1
 8002a92:	3a01      	subs	r2, #1
 8002a94:	0552      	lsls	r2, r2, #21
 8002a96:	430a      	orrs	r2, r1
 8002a98:	491f      	ldr	r1, [pc, #124]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	610b      	str	r3, [r1, #16]
 8002a9e:	e011      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	0211      	lsls	r1, r2, #8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6952      	ldr	r2, [r2, #20]
 8002ab6:	0852      	lsrs	r2, r2, #1
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0652      	lsls	r2, r2, #25
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4916      	ldr	r1, [pc, #88]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fa70 	bl	8000fb4 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad6:	e009      	b.n	8002aec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad8:	f7fe fa6c 	bl	8000fb4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aea:	e005      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ef      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d018      	beq.n	8002b68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d047      	beq.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d018      	beq.n	8002ba2 <RCCEx_PLLSAI2_Config+0x86>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d825      	bhi.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa4>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0x62>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d009      	beq.n	8002b90 <RCCEx_PLLSAI2_Config+0x74>
 8002b7c:	e020      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7e:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e01a      	b.n	8002bc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e013      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bae:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bbe:	e006      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e004      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4939      	ldr	r1, [pc, #228]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d167      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a35      	ldr	r2, [pc, #212]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe f9d6 	bl	8000fb4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c0c:	f7fe f9d2 	bl	8000fb4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1e:	e005      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d14a      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c38:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	0912      	lsrs	r2, r2, #4
 8002c50:	0452      	lsls	r2, r2, #17
 8002c52:	430a      	orrs	r2, r1
 8002c54:	491f      	ldr	r1, [pc, #124]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	614b      	str	r3, [r1, #20]
 8002c5a:	e011      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6912      	ldr	r2, [r2, #16]
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0652      	lsls	r2, r2, #25
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f992 	bl	8000fb4 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c94:	f7fe f98e 	bl	8000fb4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e095      	b.n	8002e16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfa:	d009      	beq.n	8002d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
 8002d02:	e005      	b.n	8002d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd ff14 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d50:	d902      	bls.n	8002d58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d66:	d007      	beq.n	8002d78 <HAL_SPI_Init+0xa0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d70:	d002      	beq.n	8002d78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	ea42 0103 	orr.w	r1, r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	f003 0204 	and.w	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002df4:	ea42 0103 	orr.w	r1, r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b088      	sub	sp, #32
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_SPI_Transmit+0x22>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e158      	b.n	80030f2 <HAL_SPI_Transmit+0x2d4>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e48:	f7fe f8b4 	bl	8000fb4 <HAL_GetTick>
 8002e4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e62:	e13d      	b.n	80030e0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_Transmit+0x52>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e74:	e134      	b.n	80030e0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d007      	beq.n	8002f00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f08:	d94b      	bls.n	8002fa2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Transmit+0xfa>
 8002f12:	8afb      	ldrh	r3, [r7, #22]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13e      	bne.n	8002f96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f3c:	e02b      	b.n	8002f96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d112      	bne.n	8002f72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f70:	e011      	b.n	8002f96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe f81f 	bl	8000fb4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Transmit+0x16c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x172>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f94:	e0a4      	b.n	80030e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ce      	bne.n	8002f3e <HAL_SPI_Transmit+0x120>
 8002fa0:	e07c      	b.n	800309c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0x192>
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d170      	bne.n	8003092 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d912      	bls.n	8002fe0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b02      	subs	r3, #2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e058      	b.n	8003092 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003006:	e044      	b.n	8003092 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d12b      	bne.n	800306e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d912      	bls.n	8003046 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b02      	subs	r3, #2
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003044:	e025      	b.n	8003092 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800306c:	e011      	b.n	8003092 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306e:	f7fd ffa1 	bl	8000fb4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_Transmit+0x268>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit+0x26e>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003090:	e026      	b.n	80030e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1b5      	bne.n	8003008 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fcdf 	bl	8003a64 <SPI_EndRxTxTransaction>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e000      	b.n	80030e0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80030de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b088      	sub	sp, #32
 80030fe:	af02      	add	r7, sp, #8
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003116:	d112      	bne.n	800313e <HAL_SPI_Receive+0x44>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10e      	bne.n	800313e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2204      	movs	r2, #4
 8003124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f910 	bl	800335a <HAL_SPI_TransmitReceive>
 800313a:	4603      	mov	r3, r0
 800313c:	e109      	b.n	8003352 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_SPI_Receive+0x52>
 8003148:	2302      	movs	r3, #2
 800314a:	e102      	b.n	8003352 <HAL_SPI_Receive+0x258>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003154:	f7fd ff2e 	bl	8000fb4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d002      	beq.n	800316c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800316a:	e0e9      	b.n	8003340 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_SPI_Receive+0x7e>
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800317c:	e0e0      	b.n	8003340 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2204      	movs	r2, #4
 8003182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c8:	d908      	bls.n	80031dc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	e007      	b.n	80031ec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f4:	d10f      	bne.n	8003216 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d007      	beq.n	8003234 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800323c:	d867      	bhi.n	800330e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800323e:	e030      	b.n	80032a2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d117      	bne.n	800327e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f103 020c 	add.w	r2, r3, #12
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	7812      	ldrb	r2, [r2, #0]
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800327c:	e011      	b.n	80032a2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327e:	f7fd fe99 	bl	8000fb4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d803      	bhi.n	8003296 <HAL_SPI_Receive+0x19c>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d102      	bne.n	800329c <HAL_SPI_Receive+0x1a2>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032a0:	e04e      	b.n	8003340 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1c8      	bne.n	8003240 <HAL_SPI_Receive+0x146>
 80032ae:	e034      	b.n	800331a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d115      	bne.n	80032ea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	b292      	uxth	r2, r2
 80032ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80032e8:	e011      	b.n	800330e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ea:	f7fd fe63 	bl	8000fb4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_Receive+0x208>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Receive+0x20e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800330c:	e018      	b.n	8003340 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ca      	bne.n	80032b0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fb48 	bl	80039b4 <SPI_EndRxTransaction>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
 800333c:	e000      	b.n	8003340 <HAL_SPI_Receive+0x246>
  }

error :
 800333e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08a      	sub	sp, #40	; 0x28
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x26>
 800337c:	2302      	movs	r3, #2
 800337e:	e1fb      	b.n	8003778 <HAL_SPI_TransmitReceive+0x41e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003388:	f7fd fe14 	bl	8000fb4 <HAL_GetTick>
 800338c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003394:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033a4:	7efb      	ldrb	r3, [r7, #27]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00e      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x6e>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b0:	d106      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x66>
 80033ba:	7efb      	ldrb	r3, [r7, #27]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d003      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033c6:	e1cd      	b.n	8003764 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_SPI_TransmitReceive+0x80>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_SPI_TransmitReceive+0x80>
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033e0:	e1c0      	b.n	8003764 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d003      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2205      	movs	r2, #5
 80033f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003438:	d802      	bhi.n	8003440 <HAL_SPI_TransmitReceive+0xe6>
 800343a:	8a3b      	ldrh	r3, [r7, #16]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d908      	bls.n	8003452 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e007      	b.n	8003462 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d007      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003488:	d97c      	bls.n	8003584 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x13e>
 8003492:	8a7b      	ldrh	r3, [r7, #18]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d169      	bne.n	800356c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034bc:	e056      	b.n	800356c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d11b      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x1aa>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x1aa>
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d113      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d11c      	bne.n	800354c <HAL_SPI_TransmitReceive+0x1f2>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	b292      	uxth	r2, r2
 800352a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800354c:	f7fd fd32 	bl	8000fb4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003558:	429a      	cmp	r2, r3
 800355a:	d807      	bhi.n	800356c <HAL_SPI_TransmitReceive+0x212>
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d003      	beq.n	800356c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800356a:	e0fb      	b.n	8003764 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1a3      	bne.n	80034be <HAL_SPI_TransmitReceive+0x164>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d19d      	bne.n	80034be <HAL_SPI_TransmitReceive+0x164>
 8003582:	e0df      	b.n	8003744 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x23a>
 800358c:	8a7b      	ldrh	r3, [r7, #18]
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 80cb 	bne.w	800372a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d912      	bls.n	80035c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	881a      	ldrh	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b02      	subs	r3, #2
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c2:	e0b2      	b.n	800372a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ea:	e09e      	b.n	800372a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d134      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x30a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02f      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x30a>
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	2b01      	cmp	r3, #1
 8003608:	d12c      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d912      	bls.n	800363a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b02      	subs	r3, #2
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003638:	e012      	b.n	8003660 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d148      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x3aa>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d042      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d923      	bls.n	80036d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	b292      	uxth	r2, r2
 8003696:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b02      	subs	r3, #2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d81f      	bhi.n	8003700 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	e016      	b.n	8003700 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f103 020c 	add.w	r2, r3, #12
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003704:	f7fd fc56 	bl	8000fb4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003710:	429a      	cmp	r2, r3
 8003712:	d803      	bhi.n	800371c <HAL_SPI_TransmitReceive+0x3c2>
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d102      	bne.n	8003722 <HAL_SPI_TransmitReceive+0x3c8>
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003728:	e01c      	b.n	8003764 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	f47f af5b 	bne.w	80035ec <HAL_SPI_TransmitReceive+0x292>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	f47f af54 	bne.w	80035ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f98b 	bl	8003a64 <SPI_EndRxTxTransaction>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d006      	beq.n	8003762 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	661a      	str	r2, [r3, #96]	; 0x60
 8003760:	e000      	b.n	8003764 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003762:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003778:	4618      	mov	r0, r3
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003790:	f7fd fc10 	bl	8000fb4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037a0:	f7fd fc08 	bl	8000fb4 <HAL_GetTick>
 80037a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	0d1b      	lsrs	r3, r3, #20
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b6:	e054      	b.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d050      	beq.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037c0:	f7fd fbf8 	bl	8000fb4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d902      	bls.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13d      	bne.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ee:	d111      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d004      	beq.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d107      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d10f      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e017      	b.n	8003882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3b01      	subs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d19b      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000008 	.word	0x20000008

08003890 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800389e:	f7fd fb89 	bl	8000fb4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038ae:	f7fd fb81 	bl	8000fb4 <HAL_GetTick>
 80038b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038b4:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00da      	lsls	r2, r3, #3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	0d1b      	lsrs	r3, r3, #20
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80038cc:	e062      	b.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038d4:	d109      	bne.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x5a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80038e8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d050      	beq.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038f2:	f7fd fb5f 	bl	8000fb4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d902      	bls.n	8003908 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13d      	bne.n	8003984 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003920:	d111      	bne.n	8003946 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392a:	d004      	beq.n	8003936 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003934:	d107      	bne.n	8003946 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d10f      	bne.n	8003970 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800396e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e010      	b.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3b01      	subs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d194      	bne.n	80038ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008

080039b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c8:	d111      	bne.n	80039ee <SPI_EndRxTransaction+0x3a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d004      	beq.n	80039de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d107      	bne.n	80039ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fec1 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e023      	b.n	8003a5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1c:	d11d      	bne.n	8003a5a <SPI_EndRxTransaction+0xa6>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d004      	beq.n	8003a32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a30:	d113      	bne.n	8003a5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff ff26 	bl	8003890 <SPI_WaitFifoStateUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e000      	b.n	8003a5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff ff07 	bl	8003890 <SPI_WaitFifoStateUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e027      	b.n	8003ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fe6c 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e014      	b.n	8003ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7ff fee0 	bl	8003890 <SPI_WaitFifoStateUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e000      	b.n	8003ae8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e040      	b.n	8003b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd f864 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb26 	bl	8004180 <UART_SetConfig>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e022      	b.n	8003b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fda4 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fe2b 	bl	80047d8 <UART_CheckIdleState>
 8003b82:	4603      	mov	r3, r0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 8082 	bne.w	8003caa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_Transmit+0x26>
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07a      	b.n	8003cac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UART_Transmit+0x38>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e073      	b.n	8003cac <HAL_UART_Transmit+0x120>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2221      	movs	r2, #33	; 0x21
 8003bd8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bda:	f7fd f9eb 	bl	8000fb4 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d108      	bne.n	8003c0c <HAL_UART_Transmit+0x80>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c1c:	e02d      	b.n	8003c7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fe1e 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e039      	b.n	8003cac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4a:	b292      	uxth	r2, r2
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3302      	adds	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e008      	b.n	8003c68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1cb      	bne.n	8003c1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2140      	movs	r1, #64	; 0x40
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fdea 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e005      	b.n	8003cac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d131      	bne.n	8003d2e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_UART_Receive_IT+0x22>
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02a      	b.n	8003d30 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Receive_IT+0x34>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e023      	b.n	8003d30 <HAL_UART_Receive_IT+0x7c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <HAL_UART_Receive_IT+0x84>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d1c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	461a      	mov	r2, r3
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fe1d 	bl	8004964 <UART_Start_Receive_IT>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	e000      	b.n	8003d30 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40008000 	.word	0x40008000

08003d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d113      	bne.n	8003d94 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 81ce 	beq.w	8004126 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      }
      return;
 8003d92:	e1c8      	b.n	8004126 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80e3 	beq.w	8003f62 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4ba6      	ldr	r3, [pc, #664]	; (8004044 <HAL_UART_IRQHandler+0x308>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80d8 	beq.w	8003f62 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_UART_IRQHandler+0xa2>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <HAL_UART_IRQHandler+0xce>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2202      	movs	r2, #2
 8003df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_UART_IRQHandler+0xfa>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2204      	movs	r2, #4
 8003e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2c:	f043 0202 	orr.w	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	f043 0208 	orr.w	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_UART_IRQHandler+0x15e>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8142 	beq.w	800412a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d004      	beq.n	8003eea <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d031      	beq.n	8003f4e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fdc2 	bl	8004a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d123      	bne.n	8003f46 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d013      	beq.n	8003f3e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a4b      	ldr	r2, [pc, #300]	; (8004048 <HAL_UART_IRQHandler+0x30c>)
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd f9a1 	bl	800126a <HAL_DMA_Abort_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e00f      	b.n	8003f5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f908 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e00b      	b.n	8003f5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f904 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e007      	b.n	8003f5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f900 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f5c:	e0e5      	b.n	800412a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5e:	bf00      	nop
    return;
 8003f60:	e0e3      	b.n	800412a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	f040 80a9 	bne.w	80040be <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a3 	beq.w	80040be <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 809d 	beq.w	80040be <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d158      	bne.n	800404c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80c1 	beq.w	800412e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fb2:	893a      	ldrh	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	f080 80ba 	bcs.w	800412e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	893a      	ldrh	r2, [r7, #8]
 8003fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d12a      	bne.n	8004028 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004000:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0210 	bic.w	r2, r2, #16
 800401c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd f8e3 	bl	80011ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	b29b      	uxth	r3, r3
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f893 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004042:	e074      	b.n	800412e <HAL_UART_IRQHandler+0x3f2>
 8004044:	04000120 	.word	0x04000120
 8004048:	08004ad3 	.word	0x08004ad3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004058:	b29b      	uxth	r3, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d060      	beq.n	8004132 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800407e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0210 	bic.w	r2, r2, #16
 80040b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f856 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040bc:	e039      	b.n	8004132 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_UART_IRQHandler+0x3a8>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fdff 	bl	8004ce0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e2:	e029      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01a      	beq.n	8004136 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
    }
    return;
 8004108:	e015      	b.n	8004136 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <HAL_UART_IRQHandler+0x3fc>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fced 	bl	8004afe <UART_EndTransmit_IT>
    return;
 8004124:	e008      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
    return;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
      return;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004136:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop

08004140 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4bad      	ldr	r3, [pc, #692]	; (8004460 <UART_SetConfig+0x2e0>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	69f9      	ldr	r1, [r7, #28]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4aa2      	ldr	r2, [pc, #648]	; (8004464 <UART_SetConfig+0x2e4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a99      	ldr	r2, [pc, #612]	; (8004468 <UART_SetConfig+0x2e8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d121      	bne.n	800424a <UART_SetConfig+0xca>
 8004206:	4b99      	ldr	r3, [pc, #612]	; (800446c <UART_SetConfig+0x2ec>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b03      	cmp	r3, #3
 8004212:	d817      	bhi.n	8004244 <UART_SetConfig+0xc4>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x9c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	08004239 	.word	0x08004239
 8004224:	08004233 	.word	0x08004233
 8004228:	0800423f 	.word	0x0800423f
 800422c:	2301      	movs	r3, #1
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e0e7      	b.n	8004402 <UART_SetConfig+0x282>
 8004232:	2302      	movs	r3, #2
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e0e4      	b.n	8004402 <UART_SetConfig+0x282>
 8004238:	2304      	movs	r3, #4
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e0e1      	b.n	8004402 <UART_SetConfig+0x282>
 800423e:	2308      	movs	r3, #8
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e0de      	b.n	8004402 <UART_SetConfig+0x282>
 8004244:	2310      	movs	r3, #16
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	e0db      	b.n	8004402 <UART_SetConfig+0x282>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a88      	ldr	r2, [pc, #544]	; (8004470 <UART_SetConfig+0x2f0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d132      	bne.n	80042ba <UART_SetConfig+0x13a>
 8004254:	4b85      	ldr	r3, [pc, #532]	; (800446c <UART_SetConfig+0x2ec>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d828      	bhi.n	80042b4 <UART_SetConfig+0x134>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0xe8>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800429d 	.word	0x0800429d
 800426c:	080042b5 	.word	0x080042b5
 8004270:	080042b5 	.word	0x080042b5
 8004274:	080042b5 	.word	0x080042b5
 8004278:	080042a9 	.word	0x080042a9
 800427c:	080042b5 	.word	0x080042b5
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042b5 	.word	0x080042b5
 8004288:	080042a3 	.word	0x080042a3
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042b5 	.word	0x080042b5
 8004298:	080042af 	.word	0x080042af
 800429c:	2300      	movs	r3, #0
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	e0af      	b.n	8004402 <UART_SetConfig+0x282>
 80042a2:	2302      	movs	r3, #2
 80042a4:	76fb      	strb	r3, [r7, #27]
 80042a6:	e0ac      	b.n	8004402 <UART_SetConfig+0x282>
 80042a8:	2304      	movs	r3, #4
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	e0a9      	b.n	8004402 <UART_SetConfig+0x282>
 80042ae:	2308      	movs	r3, #8
 80042b0:	76fb      	strb	r3, [r7, #27]
 80042b2:	e0a6      	b.n	8004402 <UART_SetConfig+0x282>
 80042b4:	2310      	movs	r3, #16
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	e0a3      	b.n	8004402 <UART_SetConfig+0x282>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6d      	ldr	r2, [pc, #436]	; (8004474 <UART_SetConfig+0x2f4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d120      	bne.n	8004306 <UART_SetConfig+0x186>
 80042c4:	4b69      	ldr	r3, [pc, #420]	; (800446c <UART_SetConfig+0x2ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	d013      	beq.n	80042fa <UART_SetConfig+0x17a>
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d814      	bhi.n	8004300 <UART_SetConfig+0x180>
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d009      	beq.n	80042ee <UART_SetConfig+0x16e>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d810      	bhi.n	8004300 <UART_SetConfig+0x180>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <UART_SetConfig+0x168>
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d006      	beq.n	80042f4 <UART_SetConfig+0x174>
 80042e6:	e00b      	b.n	8004300 <UART_SetConfig+0x180>
 80042e8:	2300      	movs	r3, #0
 80042ea:	76fb      	strb	r3, [r7, #27]
 80042ec:	e089      	b.n	8004402 <UART_SetConfig+0x282>
 80042ee:	2302      	movs	r3, #2
 80042f0:	76fb      	strb	r3, [r7, #27]
 80042f2:	e086      	b.n	8004402 <UART_SetConfig+0x282>
 80042f4:	2304      	movs	r3, #4
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e083      	b.n	8004402 <UART_SetConfig+0x282>
 80042fa:	2308      	movs	r3, #8
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e080      	b.n	8004402 <UART_SetConfig+0x282>
 8004300:	2310      	movs	r3, #16
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e07d      	b.n	8004402 <UART_SetConfig+0x282>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a5b      	ldr	r2, [pc, #364]	; (8004478 <UART_SetConfig+0x2f8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d120      	bne.n	8004352 <UART_SetConfig+0x1d2>
 8004310:	4b56      	ldr	r3, [pc, #344]	; (800446c <UART_SetConfig+0x2ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800431a:	2bc0      	cmp	r3, #192	; 0xc0
 800431c:	d013      	beq.n	8004346 <UART_SetConfig+0x1c6>
 800431e:	2bc0      	cmp	r3, #192	; 0xc0
 8004320:	d814      	bhi.n	800434c <UART_SetConfig+0x1cc>
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x1ba>
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d810      	bhi.n	800434c <UART_SetConfig+0x1cc>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <UART_SetConfig+0x1b4>
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x1c0>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x1cc>
 8004334:	2300      	movs	r3, #0
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e063      	b.n	8004402 <UART_SetConfig+0x282>
 800433a:	2302      	movs	r3, #2
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e060      	b.n	8004402 <UART_SetConfig+0x282>
 8004340:	2304      	movs	r3, #4
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	e05d      	b.n	8004402 <UART_SetConfig+0x282>
 8004346:	2308      	movs	r3, #8
 8004348:	76fb      	strb	r3, [r7, #27]
 800434a:	e05a      	b.n	8004402 <UART_SetConfig+0x282>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e057      	b.n	8004402 <UART_SetConfig+0x282>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a49      	ldr	r2, [pc, #292]	; (800447c <UART_SetConfig+0x2fc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d125      	bne.n	80043a8 <UART_SetConfig+0x228>
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <UART_SetConfig+0x2ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436a:	d017      	beq.n	800439c <UART_SetConfig+0x21c>
 800436c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004370:	d817      	bhi.n	80043a2 <UART_SetConfig+0x222>
 8004372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004376:	d00b      	beq.n	8004390 <UART_SetConfig+0x210>
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d811      	bhi.n	80043a2 <UART_SetConfig+0x222>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <UART_SetConfig+0x20a>
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d006      	beq.n	8004396 <UART_SetConfig+0x216>
 8004388:	e00b      	b.n	80043a2 <UART_SetConfig+0x222>
 800438a:	2300      	movs	r3, #0
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e038      	b.n	8004402 <UART_SetConfig+0x282>
 8004390:	2302      	movs	r3, #2
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e035      	b.n	8004402 <UART_SetConfig+0x282>
 8004396:	2304      	movs	r3, #4
 8004398:	76fb      	strb	r3, [r7, #27]
 800439a:	e032      	b.n	8004402 <UART_SetConfig+0x282>
 800439c:	2308      	movs	r3, #8
 800439e:	76fb      	strb	r3, [r7, #27]
 80043a0:	e02f      	b.n	8004402 <UART_SetConfig+0x282>
 80043a2:	2310      	movs	r3, #16
 80043a4:	76fb      	strb	r3, [r7, #27]
 80043a6:	e02c      	b.n	8004402 <UART_SetConfig+0x282>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2d      	ldr	r2, [pc, #180]	; (8004464 <UART_SetConfig+0x2e4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d125      	bne.n	80043fe <UART_SetConfig+0x27e>
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <UART_SetConfig+0x2ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c0:	d017      	beq.n	80043f2 <UART_SetConfig+0x272>
 80043c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c6:	d817      	bhi.n	80043f8 <UART_SetConfig+0x278>
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043cc:	d00b      	beq.n	80043e6 <UART_SetConfig+0x266>
 80043ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d2:	d811      	bhi.n	80043f8 <UART_SetConfig+0x278>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <UART_SetConfig+0x260>
 80043d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043dc:	d006      	beq.n	80043ec <UART_SetConfig+0x26c>
 80043de:	e00b      	b.n	80043f8 <UART_SetConfig+0x278>
 80043e0:	2300      	movs	r3, #0
 80043e2:	76fb      	strb	r3, [r7, #27]
 80043e4:	e00d      	b.n	8004402 <UART_SetConfig+0x282>
 80043e6:	2302      	movs	r3, #2
 80043e8:	76fb      	strb	r3, [r7, #27]
 80043ea:	e00a      	b.n	8004402 <UART_SetConfig+0x282>
 80043ec:	2304      	movs	r3, #4
 80043ee:	76fb      	strb	r3, [r7, #27]
 80043f0:	e007      	b.n	8004402 <UART_SetConfig+0x282>
 80043f2:	2308      	movs	r3, #8
 80043f4:	76fb      	strb	r3, [r7, #27]
 80043f6:	e004      	b.n	8004402 <UART_SetConfig+0x282>
 80043f8:	2310      	movs	r3, #16
 80043fa:	76fb      	strb	r3, [r7, #27]
 80043fc:	e001      	b.n	8004402 <UART_SetConfig+0x282>
 80043fe:	2310      	movs	r3, #16
 8004400:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <UART_SetConfig+0x2e4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 8087 	bne.w	800451c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800440e:	7efb      	ldrb	r3, [r7, #27]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d837      	bhi.n	8004484 <UART_SetConfig+0x304>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0x29c>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004441 	.word	0x08004441
 8004420:	08004485 	.word	0x08004485
 8004424:	08004449 	.word	0x08004449
 8004428:	08004485 	.word	0x08004485
 800442c:	0800444f 	.word	0x0800444f
 8004430:	08004485 	.word	0x08004485
 8004434:	08004485 	.word	0x08004485
 8004438:	08004485 	.word	0x08004485
 800443c:	08004457 	.word	0x08004457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004440:	f7fd ff02 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8004444:	6178      	str	r0, [r7, #20]
        break;
 8004446:	e022      	b.n	800448e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <UART_SetConfig+0x300>)
 800444a:	617b      	str	r3, [r7, #20]
        break;
 800444c:	e01f      	b.n	800448e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444e:	f7fd fe63 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8004452:	6178      	str	r0, [r7, #20]
        break;
 8004454:	e01b      	b.n	800448e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	617b      	str	r3, [r7, #20]
        break;
 800445c:	e017      	b.n	800448e <UART_SetConfig+0x30e>
 800445e:	bf00      	nop
 8004460:	efff69f3 	.word	0xefff69f3
 8004464:	40008000 	.word	0x40008000
 8004468:	40013800 	.word	0x40013800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40004c00 	.word	0x40004c00
 800447c:	40005000 	.word	0x40005000
 8004480:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	76bb      	strb	r3, [r7, #26]
        break;
 800448c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80f1 	beq.w	8004678 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4413      	add	r3, r2
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d305      	bcc.n	80044b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d902      	bls.n	80044b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	76bb      	strb	r3, [r7, #26]
 80044b6:	e0df      	b.n	8004678 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	020b      	lsls	r3, r1, #8
 80044ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044ce:	0202      	lsls	r2, r0, #8
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	6849      	ldr	r1, [r1, #4]
 80044d4:	0849      	lsrs	r1, r1, #1
 80044d6:	4608      	mov	r0, r1
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	1814      	adds	r4, r2, r0
 80044de:	eb43 0501 	adc.w	r5, r3, r1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	4620      	mov	r0, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	f7fb fe6a 	bl	80001c8 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4613      	mov	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004502:	d308      	bcc.n	8004516 <UART_SetConfig+0x396>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450a:	d204      	bcs.n	8004516 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e0b0      	b.n	8004678 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	76bb      	strb	r3, [r7, #26]
 800451a:	e0ad      	b.n	8004678 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004524:	d15c      	bne.n	80045e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004526:	7efb      	ldrb	r3, [r7, #27]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d828      	bhi.n	800457e <UART_SetConfig+0x3fe>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x3b4>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fd fe76 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 800455c:	6178      	str	r0, [r7, #20]
        break;
 800455e:	e013      	b.n	8004588 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd fe88 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8004564:	6178      	str	r0, [r7, #20]
        break;
 8004566:	e00f      	b.n	8004588 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b49      	ldr	r3, [pc, #292]	; (8004690 <UART_SetConfig+0x510>)
 800456a:	617b      	str	r3, [r7, #20]
        break;
 800456c:	e00c      	b.n	8004588 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fd fdd3 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8004572:	6178      	str	r0, [r7, #20]
        break;
 8004574:	e008      	b.n	8004588 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	617b      	str	r3, [r7, #20]
        break;
 800457c:	e004      	b.n	8004588 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	76bb      	strb	r3, [r7, #26]
        break;
 8004586:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d074      	beq.n	8004678 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005a      	lsls	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d916      	bls.n	80045da <UART_SetConfig+0x45a>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d212      	bcs.n	80045da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f023 030f 	bic.w	r3, r3, #15
 80045bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	89fa      	ldrh	r2, [r7, #14]
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	e04e      	b.n	8004678 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	76bb      	strb	r3, [r7, #26]
 80045de:	e04b      	b.n	8004678 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e0:	7efb      	ldrb	r3, [r7, #27]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d827      	bhi.n	8004636 <UART_SetConfig+0x4b6>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0x46c>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004621 	.word	0x08004621
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004637 	.word	0x08004637
 8004604:	08004637 	.word	0x08004637
 8004608:	08004637 	.word	0x08004637
 800460c:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fd fe1a 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8004614:	6178      	str	r0, [r7, #20]
        break;
 8004616:	e013      	b.n	8004640 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004618:	f7fd fe2c 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 800461c:	6178      	str	r0, [r7, #20]
        break;
 800461e:	e00f      	b.n	8004640 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <UART_SetConfig+0x510>)
 8004622:	617b      	str	r3, [r7, #20]
        break;
 8004624:	e00c      	b.n	8004640 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fd fd77 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 800462a:	6178      	str	r0, [r7, #20]
        break;
 800462c:	e008      	b.n	8004640 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004632:	617b      	str	r3, [r7, #20]
        break;
 8004634:	e004      	b.n	8004640 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	76bb      	strb	r3, [r7, #26]
        break;
 800463e:	bf00      	nop
    }

    if (pclk != 0U)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	085a      	lsrs	r2, r3, #1
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	441a      	add	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	d908      	bls.n	8004674 <UART_SetConfig+0x4f4>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d204      	bcs.n	8004674 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e001      	b.n	8004678 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004684:	7ebb      	ldrb	r3, [r7, #26]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bdb0      	pop	{r4, r5, r7, pc}
 800468e:	bf00      	nop
 8004690:	00f42400 	.word	0x00f42400

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fc fbe4 	bl	8000fb4 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10e      	bne.n	800481a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f82d 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e023      	b.n	8004862 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d10e      	bne.n	8004846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f817 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00d      	b.n	8004862 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	e05e      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d05a      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004884:	f7fc fb96 	bl	8000fb4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <UART_WaitOnFlagUntilTimeout+0x30>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11b      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e043      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02c      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d124      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004908:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	429a      	cmp	r2, r3
 8004956:	d091      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004996:	d10e      	bne.n	80049b6 <UART_Start_Receive_IT+0x52>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <UART_Start_Receive_IT+0x48>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049aa:	e02d      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b4:	e028      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <UART_Start_Receive_IT+0x76>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <UART_Start_Receive_IT+0x6c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ce:	e01b      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	227f      	movs	r2, #127	; 0x7f
 80049d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d8:	e016      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e2:	d10d      	bne.n	8004a00 <UART_Start_Receive_IT+0x9c>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <UART_Start_Receive_IT+0x92>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	227f      	movs	r2, #127	; 0x7f
 80049f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f4:	e008      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	223f      	movs	r2, #63	; 0x3f
 80049fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049fe:	e003      	b.n	8004a08 <UART_Start_Receive_IT+0xa4>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2222      	movs	r2, #34	; 0x22
 8004a14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d107      	bne.n	8004a40 <UART_Start_Receive_IT+0xdc>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <UART_Start_Receive_IT+0x108>)
 8004a3c:	665a      	str	r2, [r3, #100]	; 0x64
 8004a3e:	e002      	b.n	8004a46 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <UART_Start_Receive_IT+0x10c>)
 8004a44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004a5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	08004c09 	.word	0x08004c09
 8004a70:	08004b31 	.word	0x08004b31

08004a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d107      	bne.n	8004ab4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0210 	bic.w	r2, r2, #16
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fb2f 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fb0c 	bl	8004140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b3e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b44:	2b22      	cmp	r3, #34	; 0x22
 8004b46:	d151      	bne.n	8004bec <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b4e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b50:	89bb      	ldrh	r3, [r7, #12]
 8004b52:	b2d9      	uxtb	r1, r3
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d13a      	bne.n	8004c00 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10f      	bne.n	8004bde <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0210 	bic.w	r2, r2, #16
 8004bcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fac6 	bl	8004168 <HAL_UARTEx_RxEventCallback>
 8004bdc:	e002      	b.n	8004be4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fb fe60 	bl	80008a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bea:	e009      	b.n	8004c00 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	8b1b      	ldrh	r3, [r3, #24]
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0208 	orr.w	r2, r2, #8
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	831a      	strh	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c16:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	2b22      	cmp	r3, #34	; 0x22
 8004c1e:	d151      	bne.n	8004cc4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c26:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c2e:	89ba      	ldrh	r2, [r7, #12]
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13a      	bne.n	8004cd8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10f      	bne.n	8004cb6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0210 	bic.w	r2, r2, #16
 8004ca4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fa5a 	bl	8004168 <HAL_UARTEx_RxEventCallback>
 8004cb4:	e002      	b.n	8004cbc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fb fdf4 	bl	80008a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cc2:	e009      	b.n	8004cd8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	8b1b      	ldrh	r3, [r3, #24]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	831a      	strh	r2, [r3, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03c      	b.n	8004d80 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fb ffea 	bl	8000cf4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f85b 	bl	8004df4 <USART_SetConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01b      	b.n	8004d80 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d56:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f991 	bl	80050a0 <USART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004d98:	e018      	b.n	8004dcc <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d014      	beq.n	8004dcc <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fc f907 	bl	8000fb4 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <USART_WaitOnFlagUntilTimeout+0x30>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e00f      	b.n	8004dec <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d0d7      	beq.n	8004d9a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b9a      	ldr	r3, [pc, #616]	; (800508c <USART_SetConfig+0x298>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e32:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a87      	ldr	r2, [pc, #540]	; (8005090 <USART_SetConfig+0x29c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d121      	bne.n	8004eba <USART_SetConfig+0xc6>
 8004e76:	4b87      	ldr	r3, [pc, #540]	; (8005094 <USART_SetConfig+0x2a0>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d817      	bhi.n	8004eb4 <USART_SetConfig+0xc0>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <USART_SetConfig+0x98>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004ea3 	.word	0x08004ea3
 8004e98:	08004eaf 	.word	0x08004eaf
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e06b      	b.n	8004f7a <USART_SetConfig+0x186>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e068      	b.n	8004f7a <USART_SetConfig+0x186>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e065      	b.n	8004f7a <USART_SetConfig+0x186>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e062      	b.n	8004f7a <USART_SetConfig+0x186>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e05f      	b.n	8004f7a <USART_SetConfig+0x186>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a76      	ldr	r2, [pc, #472]	; (8005098 <USART_SetConfig+0x2a4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d132      	bne.n	8004f2a <USART_SetConfig+0x136>
 8004ec4:	4b73      	ldr	r3, [pc, #460]	; (8005094 <USART_SetConfig+0x2a0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d828      	bhi.n	8004f24 <USART_SetConfig+0x130>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <USART_SetConfig+0xe4>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f25 	.word	0x08004f25
 8004ee0:	08004f25 	.word	0x08004f25
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f25 	.word	0x08004f25
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f25 	.word	0x08004f25
 8004ef8:	08004f13 	.word	0x08004f13
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f25 	.word	0x08004f25
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e033      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e030      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e02d      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e02a      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e027      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	; (800509c <USART_SetConfig+0x2a8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d120      	bne.n	8004f76 <USART_SetConfig+0x182>
 8004f34:	4b57      	ldr	r3, [pc, #348]	; (8005094 <USART_SetConfig+0x2a0>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f3e:	2b30      	cmp	r3, #48	; 0x30
 8004f40:	d013      	beq.n	8004f6a <USART_SetConfig+0x176>
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d814      	bhi.n	8004f70 <USART_SetConfig+0x17c>
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d009      	beq.n	8004f5e <USART_SetConfig+0x16a>
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d810      	bhi.n	8004f70 <USART_SetConfig+0x17c>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <USART_SetConfig+0x164>
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d006      	beq.n	8004f64 <USART_SetConfig+0x170>
 8004f56:	e00b      	b.n	8004f70 <USART_SetConfig+0x17c>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e00d      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e00a      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f64:	2304      	movs	r3, #4
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e007      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e004      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f70:	2310      	movs	r3, #16
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e001      	b.n	8004f7a <USART_SetConfig+0x186>
 8004f76:	2310      	movs	r3, #16
 8004f78:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d85a      	bhi.n	8005036 <USART_SetConfig+0x242>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <USART_SetConfig+0x194>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08005037 	.word	0x08005037
 8004f98:	08005003 	.word	0x08005003
 8004f9c:	08005037 	.word	0x08005037
 8004fa0:	08005037 	.word	0x08005037
 8004fa4:	08005037 	.word	0x08005037
 8004fa8:	08005021 	.word	0x08005021
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fd f94c 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	005a      	lsls	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004fc8:	e038      	b.n	800503c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fca:	f7fd f953 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8004fce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	005a      	lsls	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004fe6:	e029      	b.n	800503c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004ff2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005000:	e01c      	b.n	800503c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd f889 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8005006:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	005a      	lsls	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800501e:	e00d      	b.n	800503c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005034:	e002      	b.n	800503c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	77bb      	strb	r3, [r7, #30]
      break;
 800503a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d916      	bls.n	8005070 <USART_SetConfig+0x27c>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d212      	bcs.n	8005070 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f023 030f 	bic.w	r3, r3, #15
 8005052:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	b29a      	uxth	r2, r3
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	4313      	orrs	r3, r2
 8005064:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	89fa      	ldrh	r2, [r7, #14]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e001      	b.n	8005074 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8005080:	7fbb      	ldrb	r3, [r7, #30]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	efff69f3 	.word	0xefff69f3
 8005090:	40013800 	.word	0x40013800
 8005094:	40021000 	.word	0x40021000
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800

080050a0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ae:	f7fb ff81 	bl	8000fb4 <HAL_GetTick>
 80050b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d10e      	bne.n	80050e0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80050c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fe59 	bl	8004d88 <USART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e01e      	b.n	800511e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d10e      	bne.n	800510c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80050ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe43 	bl	8004d88 <USART_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e008      	b.n	800511e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	; (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	; (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	; (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	; (800516c <__libc_init_array+0x44>)
 800513c:	f000 f820 	bl	8005180 <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080051e8 	.word	0x080051e8
 8005164:	080051e8 	.word	0x080051e8
 8005168:	080051e8 	.word	0x080051e8
 800516c:	080051ec 	.word	0x080051ec

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
