
NEW_UART_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d34  08004d34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000014  08004d50  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004d50  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbaa  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002124  00000000  00000000  0002fbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00031d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253bb  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7bb  00000000  00000000  00058adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eabd2  00000000  00000000  00067296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  00151ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ccc 	.word	0x08004ccc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004ccc 	.word	0x08004ccc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcc7 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f828 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f906 	bl	80006dc <MX_GPIO_Init>
  MX_SPI2_Init();
 80004d0:	f000 f86a 	bl	80005a8 <MX_SPI2_Init>
  MX_UART5_Init();
 80004d4:	f000 f8a6 	bl	8000624 <MX_UART5_Init>
  MX_USART2_Init();
 80004d8:	f000 f8d4 	bl	8000684 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	Error_Handler_1();
 80004dc:	f000 f9c4 	bl	8000868 <Error_Handler_1>
	float acc_x;
	float acc_y;
	float acc_z;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e6:	480a      	ldr	r0, [pc, #40]	; (8000510 <main+0x50>)
 80004e8:	f001 f888 	bl	80015fc <HAL_GPIO_WritePin>
//	uint8_t who_am_i=0x00;
//	uint8_t who_am_i_reg=0x0f;
//
//	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);

	  lsm6dsm_init();
 80004ec:	f000 f9fa 	bl	80008e4 <lsm6dsm_init>
	  whoami(); // check if device can be found
 80004f0:	f000 f998 	bl	8000824 <whoami>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <main+0x54>)
 80004fc:	f001 f87e 	bl	80015fc <HAL_GPIO_WritePin>

	flag=1;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x58>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
//	  	  {
//	  			/* Transfer error in transmission process */
//	  			Error_Handler_1();
//	  	  }

	  HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 fd19 	bl	8000f40 <HAL_Delay>
 800050e:	e7fa      	b.n	8000506 <main+0x46>
 8000510:	48000400 	.word	0x48000400
 8000514:	48001800 	.word	0x48001800
 8000518:	20000004 	.word	0x20000004

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fbc6 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f001 f899 	bl	8001678 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 fa94 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000550:	2310      	movs	r3, #16
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4618      	mov	r0, r3
 800056a:	f001 f8eb 	bl	8001744 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000574:	f000 fa80 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fcbd 	bl	8001f10 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800059c:	f000 fa6c 	bl	8000a78 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3758      	adds	r7, #88	; 0x58
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_SPI2_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_SPI2_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_SPI2_Init+0x74>)
 80005b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_SPI2_Init+0x74>)
 80005bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_SPI2_Init+0x74>)
 80005c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_SPI2_Init+0x74>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_SPI2_Init+0x74>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_SPI2_Init+0x74>)
 80005d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_SPI2_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_SPI2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_SPI2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_SPI2_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_SPI2_Init+0x74>)
 80005f8:	2207      	movs	r2, #7
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_SPI2_Init+0x74>)
 800060a:	f002 fb43 	bl	8002c94 <HAL_SPI_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000614:	f000 fa30 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000030 	.word	0x20000030
 8000620:	40003800 	.word	0x40003800

08000624 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_UART5_Init+0x58>)
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_UART5_Init+0x5c>)
 800062c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_UART5_Init+0x58>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_UART5_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_UART5_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_UART5_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_UART5_Init+0x58>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_UART5_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_UART5_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_UART5_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_UART5_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_UART5_Init+0x58>)
 8000668:	f003 fa20 	bl	8003aac <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000672:	f000 fa01 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000098 	.word	0x20000098
 8000680:	40005000 	.word	0x40005000

08000684 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_USART2_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_USART2_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_Init+0x50>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_USART2_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_USART2_Init+0x50>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_USART2_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_USART2_Init+0x50>)
 80006c2:	f004 f8bc 	bl	800483e <HAL_USART_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f9d4 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000128 	.word	0x20000128
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	4b46      	ldr	r3, [pc, #280]	; (800080c <MX_GPIO_Init+0x130>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a45      	ldr	r2, [pc, #276]	; (800080c <MX_GPIO_Init+0x130>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b43      	ldr	r3, [pc, #268]	; (800080c <MX_GPIO_Init+0x130>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b40      	ldr	r3, [pc, #256]	; (800080c <MX_GPIO_Init+0x130>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <MX_GPIO_Init+0x130>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_GPIO_Init+0x130>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_GPIO_Init+0x130>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a39      	ldr	r2, [pc, #228]	; (800080c <MX_GPIO_Init+0x130>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_GPIO_Init+0x130>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800073a:	f000 fff3 	bl	8001724 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <MX_GPIO_Init+0x130>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <MX_GPIO_Init+0x130>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_GPIO_Init+0x130>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0x130>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0x130>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0x130>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x134>)
 8000776:	f000 ff41 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	4824      	ldr	r0, [pc, #144]	; (8000814 <MX_GPIO_Init+0x138>)
 8000782:	f000 ff3b 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_GPIO_Init+0x134>)
 80007a0:	f000 fd82 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWMI_RAS_Pin */
  GPIO_InitStruct.Pin = PWMI_RAS_Pin;
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0x13c>)
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWMI_RAS_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <MX_GPIO_Init+0x138>)
 80007ba:	f000 fd75 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0x140>)
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4813      	ldr	r0, [pc, #76]	; (8000820 <MX_GPIO_Init+0x144>)
 80007d2:	f000 fd69 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_GPIO_Init+0x138>)
 80007f0:	f000 fd5a 	bl	80012a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2017      	movs	r0, #23
 80007fa:	f000 fca0 	bl	800113e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007fe:	2017      	movs	r0, #23
 8000800:	f000 fcb9 	bl	8001176 <HAL_NVIC_EnableIRQ>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40021000 	.word	0x40021000
 8000810:	48001800 	.word	0x48001800
 8000814:	48000400 	.word	0x48000400
 8000818:	10310000 	.word	0x10310000
 800081c:	10110000 	.word	0x10110000
 8000820:	48000800 	.word	0x48000800

08000824 <whoami>:

/* USER CODE BEGIN 4 */

void whoami(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	// adr_WHO_AM_I has to be 0x6a
	uint8_t who_am_i=0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	71bb      	strb	r3, [r7, #6]
	uint8_t who_am_i_reg=0x0f;
 800082e:	230f      	movs	r3, #15
 8000830:	71fb      	strb	r3, [r7, #7]

	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000832:	1dba      	adds	r2, r7, #6
 8000834:	79f9      	ldrb	r1, [r7, #7]
 8000836:	2301      	movs	r3, #1
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <whoami+0x40>)
 800083a:	f000 f895 	bl	8000968 <lsm6ds3_read>

	if(who_am_i!=0x6a)
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2b6a      	cmp	r3, #106	; 0x6a
 8000842:	d00a      	beq.n	800085a <whoami+0x36>
	{
		// error when jumping in here
		// device not found!!!
		while(1)
		{
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000844:	1dba      	adds	r2, r7, #6
 8000846:	79f9      	ldrb	r1, [r7, #7]
 8000848:	2301      	movs	r3, #1
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <whoami+0x40>)
 800084c:	f000 f88c 	bl	8000968 <lsm6ds3_read>
			if(who_am_i==0x6a){break;}
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	2b6a      	cmp	r3, #106	; 0x6a
 8000854:	d000      	beq.n	8000858 <whoami+0x34>
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000856:	e7f5      	b.n	8000844 <whoami+0x20>
			if(who_am_i==0x6a){break;}
 8000858:	bf00      	nop
		}
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000030 	.word	0x20000030

08000868 <Error_Handler_1>:
	// check if parity bit is needed for UART!



static void Error_Handler_1(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000872:	481b      	ldr	r0, [pc, #108]	; (80008e0 <Error_Handler_1+0x78>)
 8000874:	f000 fec2 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000878:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800087c:	f000 fb60 	bl	8000f40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <Error_Handler_1+0x78>)
 8000888:	f000 feb8 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(400);
 800088c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000890:	f000 fb56 	bl	8000f40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <Error_Handler_1+0x78>)
 800089c:	f000 feae 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80008a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008a4:	f000 fb4c 	bl	8000f40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <Error_Handler_1+0x78>)
 80008b0:	f000 fea4 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80008b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008b8:	f000 fb42 	bl	8000f40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <Error_Handler_1+0x78>)
 80008c4:	f000 fe9a 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80008c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008cc:	f000 fb38 	bl	8000f40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4802      	ldr	r0, [pc, #8]	; (80008e0 <Error_Handler_1+0x78>)
 80008d8:	f000 fe90 	bl	80015fc <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	48001800 	.word	0x48001800

080008e4 <lsm6dsm_init>:

void lsm6dsm_init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	uint32_t len =1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
	uint8_t bufp;
	// LSM6DS3H_REG_CTRL3_C
	// set 3-wire SPI mode
	bufp=0b00001100;
 80008ee:	230c      	movs	r3, #12
 80008f0:	70bb      	strb	r3, [r7, #2]
	uint8_t reg=LSM6DS3H_REG_CTRL3_C;
 80008f2:	2312      	movs	r3, #18
 80008f4:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2,reg, &bufp, len);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	1cba      	adds	r2, r7, #2
 80008fc:	78f9      	ldrb	r1, [r7, #3]
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <lsm6dsm_init+0x80>)
 8000900:	f000 f870 	bl	80009e4 <lsm6ds3_write>
	// LSM6DS3H_REG_CTRL1_XL
	// Values for acceleration
	// ODR_XL set to 3.33kHz
	// FS of accelerometer set to +- 2g
	// BW0_XL BW set to 1.5kHz
	bufp=0b10010000;
 8000904:	2390      	movs	r3, #144	; 0x90
 8000906:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL1_XL;
 8000908:	2310      	movs	r3, #16
 800090a:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	b29b      	uxth	r3, r3
 8000910:	1cba      	adds	r2, r7, #2
 8000912:	78f9      	ldrb	r1, [r7, #3]
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <lsm6dsm_init+0x80>)
 8000916:	f000 f865 	bl	80009e4 <lsm6ds3_write>
	// LSM6DS3H_REG_CTRL2_G
	// Values for gyro
	// ODR_XL set to 3.33kHz
	// FS of gyro set to 500dps
	// BW0_XL BW set to 1.5kHz
	bufp=0b1001010;
 800091a:	234a      	movs	r3, #74	; 0x4a
 800091c:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL2_G;
 800091e:	2311      	movs	r3, #17
 8000920:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	b29b      	uxth	r3, r3
 8000926:	1cba      	adds	r2, r7, #2
 8000928:	78f9      	ldrb	r1, [r7, #3]
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <lsm6dsm_init+0x80>)
 800092c:	f000 f85a 	bl	80009e4 <lsm6ds3_write>

	// LSM6DS3H_REG_CTRL4_C
	// disable I2C
	bufp=0b00000000;
 8000930:	2300      	movs	r3, #0
 8000932:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL4_C;
 8000934:	2313      	movs	r3, #19
 8000936:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	1cba      	adds	r2, r7, #2
 800093e:	78f9      	ldrb	r1, [r7, #3]
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <lsm6dsm_init+0x80>)
 8000942:	f000 f84f 	bl	80009e4 <lsm6ds3_write>

	// LSM6DS3H_REG_CTRL5_C
	// round values
	bufp=0b01100000;
 8000946:	2360      	movs	r3, #96	; 0x60
 8000948:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL5_C;
 800094a:	2314      	movs	r3, #20
 800094c:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	b29b      	uxth	r3, r3
 8000952:	1cba      	adds	r2, r7, #2
 8000954:	78f9      	ldrb	r1, [r7, #3]
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <lsm6dsm_init+0x80>)
 8000958:	f000 f844 	bl	80009e4 <lsm6ds3_write>

}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000030 	.word	0x20000030

08000968 <lsm6ds3_read>:
	return 0;

}

static int32_t lsm6ds3_read(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	461a      	mov	r2, r3
 8000974:	460b      	mov	r3, r1
 8000976:	72fb      	strb	r3, [r7, #11]
 8000978:	4613      	mov	r3, r2
 800097a:	813b      	strh	r3, [r7, #8]
	reg |= 0x80; // set MSB to one for read operation
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000982:	b2db      	uxtb	r3, r3
 8000984:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <lsm6ds3_read+0x70>)
 800098e:	f000 fe35 	bl	80015fc <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <lsm6ds3_read+0x74>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f107 010b 	add.w	r1, r7, #11
 800099a:	2201      	movs	r2, #1
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f002 fa1c 	bl	8002dda <HAL_SPI_Transmit>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <lsm6ds3_read+0x78>)
 80009a8:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Receive(handle, bufp, len, TIMEOUT_DURATION);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <lsm6ds3_read+0x74>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	893a      	ldrh	r2, [r7, #8]
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f002 fb7f 	bl	80030b6 <HAL_SPI_Receive>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <lsm6ds3_read+0x78>)
 80009be:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <lsm6ds3_read+0x70>)
 80009c8:	f000 fe18 	bl	80015fc <HAL_GPIO_WritePin>

  return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	48000400 	.word	0x48000400
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000094 	.word	0x20000094

080009e4 <lsm6ds3_write>:

static int32_t lsm6ds3_write(void *handle, uint8_t reg,uint8_t *bufp,uint16_t len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	461a      	mov	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	4613      	mov	r3, r2
 80009f6:	813b      	strh	r3, [r7, #8]
	reg |= 0x00;
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <lsm6ds3_write+0x68>)
 8000a04:	f000 fdfa 	bl	80015fc <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <lsm6ds3_write+0x6c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f107 010b 	add.w	r1, r7, #11
 8000a10:	2201      	movs	r2, #1
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f002 f9e1 	bl	8002dda <HAL_SPI_Transmit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <lsm6ds3_write+0x70>)
 8000a1e:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Transmit(handle, bufp, len, TIMEOUT_DURATION);
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <lsm6ds3_write+0x6c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	893a      	ldrh	r2, [r7, #8]
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f002 f9d6 	bl	8002dda <HAL_SPI_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <lsm6ds3_write+0x70>)
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <lsm6ds3_write+0x68>)
 8000a3e:	f000 fddd 	bl	80015fc <HAL_GPIO_WritePin>

  return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000094 	.word	0x20000094

08000a58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20000004 	.word	0x20000004

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	; 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_SPI_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6593      	str	r3, [r2, #88]	; 0x58
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_SPI_MspInit+0x80>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8000b1e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b30:	2305      	movs	r3, #5
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_SPI_MspInit+0x84>)
 8000b3c:	f000 fbb4 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40003800 	.word	0x40003800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ac      	sub	sp, #176	; 0xb0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2288      	movs	r2, #136	; 0x88
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f8a1 	bl	8004cbc <memset>
  if(huart->Instance==UART5)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <HAL_UART_MspInit+0x104>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d164      	bne.n	8000c4e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b84:	2310      	movs	r3, #16
 8000b86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fbc3 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f7ff ff6c 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000baa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_UART_MspInit+0x108>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000be8:	2304      	movs	r3, #4
 8000bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c00:	2308      	movs	r3, #8
 8000c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0x10c>)
 8000c0e:	f000 fb4b 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c36:	4619      	mov	r1, r3
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <HAL_UART_MspInit+0x110>)
 8000c3a:	f000 fb35 	bl	80012a8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2035      	movs	r0, #53	; 0x35
 8000c44:	f000 fa7b 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c48:	2035      	movs	r0, #53	; 0x35
 8000c4a:	f000 fa94 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37b0      	adds	r7, #176	; 0xb0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005000 	.word	0x40005000
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48000800 	.word	0x48000800

08000c68 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ac      	sub	sp, #176	; 0xb0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2288      	movs	r2, #136	; 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 f817 	bl	8004cbc <memset>
  if(husart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_USART_MspInit+0xb0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d13b      	bne.n	8000d10 <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fb39 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff fee2 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_USART_MspInit+0xb4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8000ce4:	231c      	movs	r3, #28
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 facc 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	37b0      	adds	r7, #176	; 0xb0
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8c8 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d78:	2040      	movs	r0, #64	; 0x40
 8000d7a:	f000 fc57 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d82:	f000 fc53 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <UART5_IRQHandler+0x10>)
 8000d92:	f002 fed9 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000098 	.word	0x20000098

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <SystemInit+0x5c>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <SystemInit+0x5c>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <SystemInit+0x60>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <SystemInit+0x60>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <SystemInit+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <SystemInit+0x60>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <SystemInit+0x60>)
 8000dcc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dd0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <SystemInit+0x60>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ddc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SystemInit+0x60>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SystemInit+0x60>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SystemInit+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	40021000 	.word	0x40021000

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffca 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
	ldr	r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LoopForever+0x16>)
	cmp	r2, r3
 8000e2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f003 ff1f 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fb43 	bl	80004c0 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e40:	08004d3c 	.word	0x08004d3c
	ldr	r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e48:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000e4c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000e50:	2000017c 	.word	0x2000017c

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>

08000e56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f961 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f80e 	bl	8000e88 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	e001      	b.n	8000e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e78:	f7ff fe04 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d023      	beq.n	8000ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_InitTick+0x70>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f96d 	bl	8001192 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d809      	bhi.n	8000ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f937 	bl	800113e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0x74>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e004      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e001      	b.n	8000ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000010 	.word	0x20000010
 8000f24:	20000178 	.word	0x20000178

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000178 	.word	0x20000178

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000010 	.word	0x20000010

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff29 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff3e 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff31 	bl	8000fec <__NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffa2 	bl	80010e4 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d008      	beq.n	80011d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2204      	movs	r2, #4
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e022      	b.n	800121a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020e 	bic.w	r2, r2, #14
 80011e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f003 021c 	and.w	r2, r3, #28
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d005      	beq.n	800124a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e029      	b.n	800129e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 020e 	bic.w	r2, r2, #14
 8001258:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 021c 	and.w	r2, r3, #28
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
    }
  }
  return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	e17f      	b.n	80015b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8171 	beq.w	80015b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d00b      	beq.n	80012f0 <HAL_GPIO_Init+0x48>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	2b11      	cmp	r3, #17
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d130      	bne.n	8001352 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001326:	2201      	movs	r2, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 0201 	and.w	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b03      	cmp	r3, #3
 800135c:	d118      	bne.n	8001390 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x128>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	6939      	ldr	r1, [r7, #16]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80ac 	beq.w	80015b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x330>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <HAL_GPIO_Init+0x330>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6613      	str	r3, [r2, #96]	; 0x60
 8001466:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <HAL_GPIO_Init+0x330>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001472:	4a5a      	ldr	r2, [pc, #360]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x242>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	; (80015e0 <HAL_GPIO_Init+0x338>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x23e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4e      	ldr	r2, [pc, #312]	; (80015e4 <HAL_GPIO_Init+0x33c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x23a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <HAL_GPIO_Init+0x340>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x236>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_GPIO_Init+0x344>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x232>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_GPIO_Init+0x348>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x22e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <HAL_GPIO_Init+0x34c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x22a>
 80014ce:	2306      	movs	r3, #6
 80014d0:	e00c      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00a      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014d6:	2305      	movs	r3, #5
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014da:	2304      	movs	r3, #4
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x244>
 80014ea:	2300      	movs	r3, #0
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_GPIO_Init+0x334>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_GPIO_Init+0x350>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <HAL_GPIO_Init+0x350>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_GPIO_Init+0x350>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_GPIO_Init+0x350>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_GPIO_Init+0x350>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_GPIO_Init+0x350>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_GPIO_Init+0x350>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_GPIO_Init+0x350>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae78 	bne.w	80012b8 <HAL_GPIO_Init+0x10>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	48000400 	.word	0x48000400
 80015e4:	48000800 	.word	0x48000800
 80015e8:	48000c00 	.word	0x48000c00
 80015ec:	48001000 	.word	0x48001000
 80015f0:	48001400 	.word	0x48001400
 80015f4:	48001800 	.word	0x48001800
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001618:	e002      	b.n	8001620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fa04 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_PWREx_GetVoltageRange+0x18>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001686:	d130      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001694:	d038      	beq.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2232      	movs	r2, #50	; 0x32
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016bc:	e002      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d0:	d102      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f2      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d110      	bne.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e00f      	b.n	800170a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d007      	beq.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001700:	4a05      	ldr	r2, [pc, #20]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40007000 	.word	0x40007000
 800171c:	20000008 	.word	0x20000008
 8001720:	431bde83 	.word	0x431bde83

08001724 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_PWREx_EnableVddIO2+0x1c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_PWREx_EnableVddIO2+0x1c>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6053      	str	r3, [r2, #4]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e3d4      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4ba1      	ldr	r3, [pc, #644]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4b9e      	ldr	r3, [pc, #632]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80e4 	beq.w	8001940 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_RCC_OscConfig+0x4a>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	f040 808b 	bne.w	800189c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b01      	cmp	r3, #1
 800178a:	f040 8087 	bne.w	800189c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800178e:	4b93      	ldr	r3, [pc, #588]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x62>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e3ac      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x7c>
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017be:	e005      	b.n	80017cc <HAL_RCC_OscConfig+0x88>
 80017c0:	4b86      	ldr	r3, [pc, #536]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d223      	bcs.n	8001818 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fd41 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e38d      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e4:	4b7d      	ldr	r3, [pc, #500]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a7c      	ldr	r2, [pc, #496]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4977      	ldr	r1, [pc, #476]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	4972      	ldr	r1, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e025      	b.n	8001864 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6f      	ldr	r2, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	496a      	ldr	r1, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	4b69      	ldr	r3, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4965      	ldr	r1, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fd01 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e34d      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001864:	f000 fc36 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	495a      	ldr	r1, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x29c>)
 8001876:	5ccb      	ldrb	r3, [r1, r3]
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_OscConfig+0x2a0>)
 8001882:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001884:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_RCC_OscConfig+0x2a4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fafd 	bl	8000e88 <HAL_InitTick>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d052      	beq.n	800193e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	e331      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d032      	beq.n	800190a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb3a 	bl	8000f28 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb36 	bl	8000f28 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e31a      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a40      	ldr	r2, [pc, #256]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	493b      	ldr	r1, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4936      	ldr	r1, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e01a      	b.n	8001940 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800190a:	4b34      	ldr	r3, [pc, #208]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001916:	f7ff fb07 	bl	8000f28 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191e:	f7ff fb03 	bl	8000f28 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e2e7      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x1da>
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d074      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x21a>
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d10e      	bne.n	8001976 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d064      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d160      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e2c4      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x24a>
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e01d      	b.n	80019ca <HAL_RCC_OscConfig+0x286>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x26e>
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x286>
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_RCC_OscConfig+0x298>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff faa9 	bl	8000f28 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d8:	e011      	b.n	80019fe <HAL_RCC_OscConfig+0x2ba>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08004ce4 	.word	0x08004ce4
 80019e4:	20000008 	.word	0x20000008
 80019e8:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fa9c 	bl	8000f28 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e280      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	4baf      	ldr	r3, [pc, #700]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x2a8>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fa8c 	bl	8000f28 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fa88 	bl	8000f28 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e26c      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	4ba5      	ldr	r3, [pc, #660]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2d0>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d060      	beq.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x310>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d116      	bne.n	8001a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a54:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_OscConfig+0x328>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e249      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	4990      	ldr	r1, [pc, #576]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	e040      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d023      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a8b      	ldr	r2, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa47 	bl	8000f28 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa43 	bl	8000f28 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e227      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b7f      	ldr	r3, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	497c      	ldr	r1, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	e018      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a79      	ldr	r2, [pc, #484]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fa23 	bl	8000f28 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fa1f 	bl	8000f28 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e203      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af8:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff f9fe 	bl	8000f28 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff f9fa 	bl	8000f28 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1de      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b42:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ef      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
 8001b50:	e01b      	b.n	8001b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b58:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f9e1 	bl	8000f28 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f9dd 	bl	8000f28 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1c1      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80a6 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a43      	ldr	r2, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_RCC_OscConfig+0x57c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d118      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x57c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a3a      	ldr	r2, [pc, #232]	; (8001cc0 <HAL_RCC_OscConfig+0x57c>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f9a4 	bl	8000f28 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be4:	f7ff f9a0 	bl	8000f28 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e184      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCC_OscConfig+0x57c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4d8>
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	e024      	b.n	8001c66 <HAL_RCC_OscConfig+0x522>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d110      	bne.n	8001c46 <HAL_RCC_OscConfig+0x502>
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c44:	e00f      	b.n	8001c66 <HAL_RCC_OscConfig+0x522>
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f023 0304 	bic.w	r3, r3, #4
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f95b 	bl	8000f28 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff f957 	bl	8000f28 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e139      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_OscConfig+0x578>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ed      	beq.n	8001c76 <HAL_RCC_OscConfig+0x532>
 8001c9a:	e01a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f944 	bl	8000f28 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f940 	bl	8000f28 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d906      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e122      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e8      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	4a8a      	ldr	r2, [pc, #552]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8108 	beq.w	8001efe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 80d0 	bne.w	8001e98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf8:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d130      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	3b01      	subs	r3, #1
 8001d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d127      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d38:	2a07      	cmp	r2, #7
 8001d3a:	bf14      	ite	ne
 8001d3c:	2201      	movne	r2, #1
 8001d3e:	2200      	moveq	r2, #0
 8001d40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d113      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d06e      	beq.n	8001e4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d069      	beq.n	8001e48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d80:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0b7      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9c:	f7ff f8c4 	bl	8000f28 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f8c0 	bl	8000f28 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0a4      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc2:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <HAL_RCC_OscConfig+0x7c8>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ddc:	0212      	lsls	r2, r2, #8
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de4:	0852      	lsrs	r2, r2, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df0:	0852      	lsrs	r2, r2, #1
 8001df2:	3a01      	subs	r2, #1
 8001df4:	0652      	lsls	r2, r2, #25
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dfc:	0912      	lsrs	r2, r2, #4
 8001dfe:	0452      	lsls	r2, r2, #17
 8001e00:	430a      	orrs	r2, r1
 8001e02:	4941      	ldr	r1, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3e      	ldr	r2, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7ff f882 	bl	8000f28 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff f87e 	bl	8000f28 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e062      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	e05a      	b.n	8001efe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e059      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d152      	bne.n	8001efe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e70:	f7ff f85a 	bl	8000f28 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff f856 	bl	8000f28 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e03a      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x734>
 8001e96:	e032      	b.n	8001efe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d02d      	beq.n	8001efa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001ebc:	f023 0303 	bic.w	r3, r3, #3
 8001ec0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001ec8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f829 	bl	8000f28 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f825 	bl	8000f28 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x796>
 8001ef8:	e001      	b.n	8001efe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	f99d808c 	.word	0xf99d808c

08001f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0c8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d910      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4961      	ldr	r1, [pc, #388]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b5f      	ldr	r3, [pc, #380]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b0      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d04c      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f68:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d121      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e09e      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d115      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e092      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e086      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e07e      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 0203 	bic.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	493f      	ldr	r1, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fca:	f7fe ffad 	bl	8000f28 <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe ffa9 	bl	8000f28 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e066      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 020c 	and.w	r2, r3, #12
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d1eb      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	492c      	ldr	r1, [pc, #176]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4924      	ldr	r1, [pc, #144]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e036      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002086:	f000 f825 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_ClockConfig+0x1b4>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490c      	ldr	r1, [pc, #48]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe feec 	bl	8000e88 <HAL_InitTick>
 80020b0:	4603      	mov	r3, r0
 80020b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08004ce4 	.word	0x08004ce4
 80020cc:	20000008 	.word	0x20000008
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x34>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d121      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d11e      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002144:	e00a      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d102      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e004      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d101      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800215a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d134      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0xa6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xac>
 8002178:	e005      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	fb02 f203 	mul.w	r2, r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0e5b      	lsrs	r3, r3, #25
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	3301      	adds	r3, #1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021cc:	69bb      	ldr	r3, [r7, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08004cfc 	.word	0x08004cfc
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08004cf4 	.word	0x08004cf4

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002234:	f7ff ffda 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004cf4 	.word	0x08004cf4

0800225c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f9f2 	bl	800165c <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
 800227a:	e014      	b.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f9e2 	bl	800165c <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d10b      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d919      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2ba0      	cmp	r3, #160	; 0xa0
 80022b8:	d902      	bls.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e013      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e010      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d902      	bls.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022cc:	2303      	movs	r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e00a      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d102      	bne.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e004      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d101      	bne.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002324:	2300      	movs	r3, #0
 8002326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002328:	2300      	movs	r3, #0
 800232a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002334:	2b00      	cmp	r3, #0
 8002336:	d041      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002340:	d02a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002342:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002346:	d824      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800234e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002352:	d81e      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235c:	d010      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b86      	ldr	r3, [pc, #536]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a85      	ldr	r2, [pc, #532]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fabb 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fba6 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ae:	4973      	ldr	r1, [pc, #460]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d041      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d0:	d02a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d6:	d824      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d81e      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ee:	e018      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa73 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3320      	adds	r3, #32
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb5e 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243e:	494f      	ldr	r1, [pc, #316]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a0 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249c:	f7fe fd44 	bl	8000f28 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fd40 	bl	8000f28 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d15c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d019      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fcff 	bl	8000f28 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e00b      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fcfb 	bl	8000f28 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
            break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ec      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002588:	7c7b      	ldrb	r3, [r7, #17]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a9d      	ldr	r2, [pc, #628]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a6:	4b98      	ldr	r3, [pc, #608]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	4994      	ldr	r1, [pc, #592]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	498c      	ldr	r1, [pc, #560]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4983      	ldr	r1, [pc, #524]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800260c:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	497b      	ldr	r1, [pc, #492]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4972      	ldr	r1, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4961      	ldr	r1, [pc, #388]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4959      	ldr	r1, [pc, #356]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4948      	ldr	r1, [pc, #288]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d028      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d106      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
 8002748:	e011      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f8c8 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002798:	d106      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	60d3      	str	r3, [r2, #12]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f899 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f6:	d109      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e014      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f867 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	4928      	ldr	r1, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f844 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3320      	adds	r3, #32
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f925 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
       ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
       ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d047      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e044      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d018      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x86>
 8002944:	2b03      	cmp	r3, #3
 8002946:	d825      	bhi.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x62>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d009      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x74>
 8002950:	e020      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002962:	e01a      	b.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002964:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e013      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002992:	e006      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e004      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	430b      	orrs	r3, r1
 80029c0:	4944      	ldr	r1, [pc, #272]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d17d      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe faa6 	bl	8000f28 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029de:	e009      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e0:	f7fe faa2 	bl	8000f28 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	73fb      	strb	r3, [r7, #15]
        break;
 80029f2:	e005      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ef      	bne.n	80029e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d160      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6892      	ldr	r2, [r2, #8]
 8002a1c:	0211      	lsls	r1, r2, #8
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	0912      	lsrs	r2, r2, #4
 8002a24:	0452      	lsls	r2, r2, #17
 8002a26:	430a      	orrs	r2, r1
 8002a28:	492a      	ldr	r1, [pc, #168]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	610b      	str	r3, [r1, #16]
 8002a2e:	e027      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d112      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6892      	ldr	r2, [r2, #8]
 8002a46:	0211      	lsls	r1, r2, #8
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6912      	ldr	r2, [r2, #16]
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0552      	lsls	r2, r2, #21
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6952      	ldr	r2, [r2, #20]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fa4c 	bl	8000f28 <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a94:	f7fe fa48 	bl	8000f28 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
       ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d047      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x86>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x62>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x74>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d167      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f9b2 	bl	8000f28 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc8:	f7fe f9ae 	bl	8000f28 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ef      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14a      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	0912      	lsrs	r2, r2, #4
 8002c0c:	0452      	lsls	r2, r2, #17
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	491f      	ldr	r1, [pc, #124]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	614b      	str	r3, [r1, #20]
 8002c16:	e011      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6912      	ldr	r2, [r2, #16]
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0652      	lsls	r2, r2, #25
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f96e 	bl	8000f28 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c4e:	e009      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c50:	f7fe f96a 	bl	8000f28 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	73fb      	strb	r3, [r7, #15]
          break;
 8002c62:	e005      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e095      	b.n	8002dd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb6:	d009      	beq.n	8002ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
 8002cbe:	e005      	b.n	8002ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fef0 	bl	8000acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d0c:	d902      	bls.n	8002d14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e002      	b.n	8002d1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d22:	d007      	beq.n	8002d34 <HAL_SPI_Init+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d2c:	d002      	beq.n	8002d34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	f003 0204 	and.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002db0:	ea42 0103 	orr.w	r1, r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b088      	sub	sp, #32
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_SPI_Transmit+0x22>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e158      	b.n	80030ae <HAL_SPI_Transmit+0x2d4>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e04:	f7fe f890 	bl	8000f28 <HAL_GetTick>
 8002e08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e1e:	e13d      	b.n	800309c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0x52>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e30:	e134      	b.n	800309c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	88fa      	ldrh	r2, [r7, #6]
 8002e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d10f      	bne.n	8002e9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d007      	beq.n	8002ebc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec4:	d94b      	bls.n	8002f5e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0xfa>
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d13e      	bne.n	8002f52 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ef8:	e02b      	b.n	8002f52 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d112      	bne.n	8002f2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f2c:	e011      	b.n	8002f52 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2e:	f7fd fffb 	bl	8000f28 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d803      	bhi.n	8002f46 <HAL_SPI_Transmit+0x16c>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d102      	bne.n	8002f4c <HAL_SPI_Transmit+0x172>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f50:	e0a4      	b.n	800309c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ce      	bne.n	8002efa <HAL_SPI_Transmit+0x120>
 8002f5c:	e07c      	b.n	8003058 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_Transmit+0x192>
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d170      	bne.n	800304e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d912      	bls.n	8002f9c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b02      	subs	r3, #2
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f9a:	e058      	b.n	800304e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002fc2:	e044      	b.n	800304e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d12b      	bne.n	800302a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d912      	bls.n	8003002 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b02      	subs	r3, #2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003000:	e025      	b.n	800304e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003028:	e011      	b.n	800304e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fd ff7d 	bl	8000f28 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Transmit+0x268>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Transmit+0x26e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800304c:	e026      	b.n	800309c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1b5      	bne.n	8002fc4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fcdf 	bl	8003a20 <SPI_EndRxTxTransaction>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e000      	b.n	800309c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800309a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b088      	sub	sp, #32
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d2:	d112      	bne.n	80030fa <HAL_SPI_Receive+0x44>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10e      	bne.n	80030fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2204      	movs	r2, #4
 80030e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f910 	bl	8003316 <HAL_SPI_TransmitReceive>
 80030f6:	4603      	mov	r3, r0
 80030f8:	e109      	b.n	800330e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_SPI_Receive+0x52>
 8003104:	2302      	movs	r3, #2
 8003106:	e102      	b.n	800330e <HAL_SPI_Receive+0x258>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003110:	f7fd ff0a 	bl	8000f28 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003126:	e0e9      	b.n	80032fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Receive+0x7e>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003138:	e0e0      	b.n	80032fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2204      	movs	r2, #4
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003184:	d908      	bls.n	8003198 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	e007      	b.n	80031a8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b0:	d10f      	bne.n	80031d2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d007      	beq.n	80031f0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031f8:	d867      	bhi.n	80032ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031fa:	e030      	b.n	800325e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d117      	bne.n	800323a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f103 020c 	add.w	r2, r3, #12
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003238:	e011      	b.n	800325e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323a:	f7fd fe75 	bl	8000f28 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d803      	bhi.n	8003252 <HAL_SPI_Receive+0x19c>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d102      	bne.n	8003258 <HAL_SPI_Receive+0x1a2>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800325c:	e04e      	b.n	80032fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1c8      	bne.n	80031fc <HAL_SPI_Receive+0x146>
 800326a:	e034      	b.n	80032d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d115      	bne.n	80032a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	b292      	uxth	r2, r2
 8003286:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80032a4:	e011      	b.n	80032ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a6:	f7fd fe3f 	bl	8000f28 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d803      	bhi.n	80032be <HAL_SPI_Receive+0x208>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d102      	bne.n	80032c4 <HAL_SPI_Receive+0x20e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032c8:	e018      	b.n	80032fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ca      	bne.n	800326c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fb48 	bl	8003970 <SPI_EndRxTransaction>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
 80032f8:	e000      	b.n	80032fc <HAL_SPI_Receive+0x246>
  }

error :
 80032fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b08a      	sub	sp, #40	; 0x28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_SPI_TransmitReceive+0x26>
 8003338:	2302      	movs	r3, #2
 800333a:	e1fb      	b.n	8003734 <HAL_SPI_TransmitReceive+0x41e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003344:	f7fd fdf0 	bl	8000f28 <HAL_GetTick>
 8003348:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003350:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003360:	7efb      	ldrb	r3, [r7, #27]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d00e      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x6e>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336c:	d106      	bne.n	800337c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_SPI_TransmitReceive+0x66>
 8003376:	7efb      	ldrb	r3, [r7, #27]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d003      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003382:	e1cd      	b.n	8003720 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_SPI_TransmitReceive+0x80>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_TransmitReceive+0x80>
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800339c:	e1c0      	b.n	8003720 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2205      	movs	r2, #5
 80033ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	887a      	ldrh	r2, [r7, #2]
 80033ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033f4:	d802      	bhi.n	80033fc <HAL_SPI_TransmitReceive+0xe6>
 80033f6:	8a3b      	ldrh	r3, [r7, #16]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d908      	bls.n	800340e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e007      	b.n	800341e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800341c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d007      	beq.n	800343c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003444:	d97c      	bls.n	8003540 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x13e>
 800344e:	8a7b      	ldrh	r3, [r7, #18]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d169      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003478:	e056      	b.n	8003528 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11b      	bne.n	80034c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2b01      	cmp	r3, #1
 8003496:	d113      	bne.n	80034c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d11c      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x1f2>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	b292      	uxth	r2, r2
 80034e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003504:	2301      	movs	r3, #1
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003508:	f7fd fd0e 	bl	8000f28 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003514:	429a      	cmp	r2, r3
 8003516:	d807      	bhi.n	8003528 <HAL_SPI_TransmitReceive+0x212>
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d003      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003526:	e0fb      	b.n	8003720 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1a3      	bne.n	800347a <HAL_SPI_TransmitReceive+0x164>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d19d      	bne.n	800347a <HAL_SPI_TransmitReceive+0x164>
 800353e:	e0df      	b.n	8003700 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x23a>
 8003548:	8a7b      	ldrh	r3, [r7, #18]
 800354a:	2b01      	cmp	r3, #1
 800354c:	f040 80cb 	bne.w	80036e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d912      	bls.n	8003580 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b02      	subs	r3, #2
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800357e:	e0b2      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a6:	e09e      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d134      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x30a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02f      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x30a>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12c      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d912      	bls.n	80035f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b02      	subs	r3, #2
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f4:	e012      	b.n	800361c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d148      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x3aa>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d042      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d923      	bls.n	800368e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	b292      	uxth	r2, r2
 8003652:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b02      	subs	r3, #2
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d81f      	bhi.n	80036bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	e016      	b.n	80036bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f103 020c 	add.w	r2, r3, #12
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036c0:	f7fd fc32 	bl	8000f28 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d803      	bhi.n	80036d8 <HAL_SPI_TransmitReceive+0x3c2>
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d102      	bne.n	80036de <HAL_SPI_TransmitReceive+0x3c8>
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80036e4:	e01c      	b.n	8003720 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f47f af5b 	bne.w	80035a8 <HAL_SPI_TransmitReceive+0x292>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f47f af54 	bne.w	80035a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f98b 	bl	8003a20 <SPI_EndRxTxTransaction>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
 800371c:	e000      	b.n	8003720 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800371e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800374c:	f7fd fbec 	bl	8000f28 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4413      	add	r3, r2
 800375a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800375c:	f7fd fbe4 	bl	8000f28 <HAL_GetTick>
 8003760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	0d1b      	lsrs	r3, r3, #20
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003772:	e054      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d050      	beq.n	800381e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377c:	f7fd fbd4 	bl	8000f28 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d13d      	bne.n	800380e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d111      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b4:	d004      	beq.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d107      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d10f      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e017      	b.n	800383e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3b01      	subs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	429a      	cmp	r2, r3
 800383a:	d19b      	bne.n	8003774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000008 	.word	0x20000008

0800384c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800385a:	f7fd fb65 	bl	8000f28 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	4413      	add	r3, r2
 8003868:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800386a:	f7fd fb5d 	bl	8000f28 <HAL_GetTick>
 800386e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	0d1b      	lsrs	r3, r3, #20
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003888:	e062      	b.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003890:	d109      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80038a4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d050      	beq.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ae:	f7fd fb3b 	bl	8000f28 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d902      	bls.n	80038c4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13d      	bne.n	8003940 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038dc:	d111      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e6:	d004      	beq.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f0:	d107      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	d10f      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800392a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e010      	b.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3b01      	subs	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d194      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000008 	.word	0x20000008

08003970 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003984:	d111      	bne.n	80039aa <SPI_EndRxTransaction+0x3a>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	d004      	beq.n	800399a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d107      	bne.n	80039aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff fec1 	bl	800373c <SPI_WaitFlagStateUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e023      	b.n	8003a18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d8:	d11d      	bne.n	8003a16 <SPI_EndRxTransaction+0xa6>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e2:	d004      	beq.n	80039ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d113      	bne.n	8003a16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff ff26 	bl	800384c <SPI_WaitFifoStateUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e000      	b.n	8003a18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff07 	bl	800384c <SPI_WaitFifoStateUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e027      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fe6c 	bl	800373c <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e014      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fee0 	bl	800384c <SPI_WaitFifoStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e000      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e040      	b.n	8003b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f840 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa4e 	bl	8003f8c <UART_SetConfig>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fccc 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd53 	bl	80045e4 <UART_CheckIdleState>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 81ce 	beq.w	8003f32 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
      }
      return;
 8003b9e:	e1c8      	b.n	8003f32 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80e3 	beq.w	8003d6e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4ba6      	ldr	r3, [pc, #664]	; (8003e50 <HAL_UART_IRQHandler+0x308>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80d8 	beq.w	8003d6e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_UART_IRQHandler+0xa2>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_UART_IRQHandler+0xce>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2202      	movs	r2, #2
 8003c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_UART_IRQHandler+0xfa>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c38:	f043 0202 	orr.w	r2, r3, #2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x15e>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8142 	beq.w	8003f36 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cdc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d004      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d031      	beq.n	8003d5a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fd39 	bl	800476e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d123      	bne.n	8003d52 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_UART_IRQHandler+0x30c>)
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fa79 	bl	8001226 <HAL_DMA_Abort_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d017      	beq.n	8003d6a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d44:	4610      	mov	r0, r2
 8003d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e00f      	b.n	8003d6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f908 	bl	8003f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e00b      	b.n	8003d6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f904 	bl	8003f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e007      	b.n	8003d6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f900 	bl	8003f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d68:	e0e5      	b.n	8003f36 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	bf00      	nop
    return;
 8003d6c:	e0e3      	b.n	8003f36 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	f040 80a9 	bne.w	8003eca <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a3 	beq.w	8003eca <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 809d 	beq.w	8003eca <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d158      	bne.n	8003e58 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003db0:	893b      	ldrh	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80c1 	beq.w	8003f3a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dbe:	893a      	ldrh	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	f080 80ba 	bcs.w	8003f3a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	893a      	ldrh	r2, [r7, #8]
 8003dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12a      	bne.n	8003e34 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0210 	bic.w	r2, r2, #16
 8003e28:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd f9bb 	bl	80011aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f893 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e4e:	e074      	b.n	8003f3a <HAL_UART_IRQHandler+0x3f2>
 8003e50:	04000120 	.word	0x04000120
 8003e54:	080047cd 	.word	0x080047cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d060      	beq.n	8003f3e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0210 	bic.w	r2, r2, #16
 8003ebc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f856 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ec8:	e039      	b.n	8003f3e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x3a8>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fc9e 	bl	800482a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eee:	e029      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01a      	beq.n	8003f42 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
    }
    return;
 8003f14:	e015      	b.n	8003f42 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d011      	beq.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fc64 	bl	80047f8 <UART_EndTransmit_IT>
    return;
 8003f30:	e008      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f32:	bf00      	nop
 8003f34:	e006      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003f36:	bf00      	nop
 8003f38:	e004      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003f42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop

08003f4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4bad      	ldr	r3, [pc, #692]	; (800426c <UART_SetConfig+0x2e0>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4aa2      	ldr	r2, [pc, #648]	; (8004270 <UART_SetConfig+0x2e4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a99      	ldr	r2, [pc, #612]	; (8004274 <UART_SetConfig+0x2e8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d121      	bne.n	8004056 <UART_SetConfig+0xca>
 8004012:	4b99      	ldr	r3, [pc, #612]	; (8004278 <UART_SetConfig+0x2ec>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d817      	bhi.n	8004050 <UART_SetConfig+0xc4>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x9c>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004045 	.word	0x08004045
 8004030:	0800403f 	.word	0x0800403f
 8004034:	0800404b 	.word	0x0800404b
 8004038:	2301      	movs	r3, #1
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e0e7      	b.n	800420e <UART_SetConfig+0x282>
 800403e:	2302      	movs	r3, #2
 8004040:	76fb      	strb	r3, [r7, #27]
 8004042:	e0e4      	b.n	800420e <UART_SetConfig+0x282>
 8004044:	2304      	movs	r3, #4
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	e0e1      	b.n	800420e <UART_SetConfig+0x282>
 800404a:	2308      	movs	r3, #8
 800404c:	76fb      	strb	r3, [r7, #27]
 800404e:	e0de      	b.n	800420e <UART_SetConfig+0x282>
 8004050:	2310      	movs	r3, #16
 8004052:	76fb      	strb	r3, [r7, #27]
 8004054:	e0db      	b.n	800420e <UART_SetConfig+0x282>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a88      	ldr	r2, [pc, #544]	; (800427c <UART_SetConfig+0x2f0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d132      	bne.n	80040c6 <UART_SetConfig+0x13a>
 8004060:	4b85      	ldr	r3, [pc, #532]	; (8004278 <UART_SetConfig+0x2ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d828      	bhi.n	80040c0 <UART_SetConfig+0x134>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0xe8>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040c1 	.word	0x080040c1
 800407c:	080040c1 	.word	0x080040c1
 8004080:	080040c1 	.word	0x080040c1
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040c1 	.word	0x080040c1
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040c1 	.word	0x080040c1
 8004094:	080040af 	.word	0x080040af
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c1 	.word	0x080040c1
 80040a4:	080040bb 	.word	0x080040bb
 80040a8:	2300      	movs	r3, #0
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	e0af      	b.n	800420e <UART_SetConfig+0x282>
 80040ae:	2302      	movs	r3, #2
 80040b0:	76fb      	strb	r3, [r7, #27]
 80040b2:	e0ac      	b.n	800420e <UART_SetConfig+0x282>
 80040b4:	2304      	movs	r3, #4
 80040b6:	76fb      	strb	r3, [r7, #27]
 80040b8:	e0a9      	b.n	800420e <UART_SetConfig+0x282>
 80040ba:	2308      	movs	r3, #8
 80040bc:	76fb      	strb	r3, [r7, #27]
 80040be:	e0a6      	b.n	800420e <UART_SetConfig+0x282>
 80040c0:	2310      	movs	r3, #16
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e0a3      	b.n	800420e <UART_SetConfig+0x282>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6d      	ldr	r2, [pc, #436]	; (8004280 <UART_SetConfig+0x2f4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d120      	bne.n	8004112 <UART_SetConfig+0x186>
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <UART_SetConfig+0x2ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d013      	beq.n	8004106 <UART_SetConfig+0x17a>
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	d814      	bhi.n	800410c <UART_SetConfig+0x180>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d009      	beq.n	80040fa <UART_SetConfig+0x16e>
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d810      	bhi.n	800410c <UART_SetConfig+0x180>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <UART_SetConfig+0x168>
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d006      	beq.n	8004100 <UART_SetConfig+0x174>
 80040f2:	e00b      	b.n	800410c <UART_SetConfig+0x180>
 80040f4:	2300      	movs	r3, #0
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e089      	b.n	800420e <UART_SetConfig+0x282>
 80040fa:	2302      	movs	r3, #2
 80040fc:	76fb      	strb	r3, [r7, #27]
 80040fe:	e086      	b.n	800420e <UART_SetConfig+0x282>
 8004100:	2304      	movs	r3, #4
 8004102:	76fb      	strb	r3, [r7, #27]
 8004104:	e083      	b.n	800420e <UART_SetConfig+0x282>
 8004106:	2308      	movs	r3, #8
 8004108:	76fb      	strb	r3, [r7, #27]
 800410a:	e080      	b.n	800420e <UART_SetConfig+0x282>
 800410c:	2310      	movs	r3, #16
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e07d      	b.n	800420e <UART_SetConfig+0x282>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <UART_SetConfig+0x2f8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d120      	bne.n	800415e <UART_SetConfig+0x1d2>
 800411c:	4b56      	ldr	r3, [pc, #344]	; (8004278 <UART_SetConfig+0x2ec>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004126:	2bc0      	cmp	r3, #192	; 0xc0
 8004128:	d013      	beq.n	8004152 <UART_SetConfig+0x1c6>
 800412a:	2bc0      	cmp	r3, #192	; 0xc0
 800412c:	d814      	bhi.n	8004158 <UART_SetConfig+0x1cc>
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x1ba>
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d810      	bhi.n	8004158 <UART_SetConfig+0x1cc>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0x1b4>
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d006      	beq.n	800414c <UART_SetConfig+0x1c0>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x1cc>
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e063      	b.n	800420e <UART_SetConfig+0x282>
 8004146:	2302      	movs	r3, #2
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e060      	b.n	800420e <UART_SetConfig+0x282>
 800414c:	2304      	movs	r3, #4
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e05d      	b.n	800420e <UART_SetConfig+0x282>
 8004152:	2308      	movs	r3, #8
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e05a      	b.n	800420e <UART_SetConfig+0x282>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e057      	b.n	800420e <UART_SetConfig+0x282>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a49      	ldr	r2, [pc, #292]	; (8004288 <UART_SetConfig+0x2fc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d125      	bne.n	80041b4 <UART_SetConfig+0x228>
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <UART_SetConfig+0x2ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004176:	d017      	beq.n	80041a8 <UART_SetConfig+0x21c>
 8004178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417c:	d817      	bhi.n	80041ae <UART_SetConfig+0x222>
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d00b      	beq.n	800419c <UART_SetConfig+0x210>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d811      	bhi.n	80041ae <UART_SetConfig+0x222>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <UART_SetConfig+0x20a>
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d006      	beq.n	80041a2 <UART_SetConfig+0x216>
 8004194:	e00b      	b.n	80041ae <UART_SetConfig+0x222>
 8004196:	2300      	movs	r3, #0
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e038      	b.n	800420e <UART_SetConfig+0x282>
 800419c:	2302      	movs	r3, #2
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e035      	b.n	800420e <UART_SetConfig+0x282>
 80041a2:	2304      	movs	r3, #4
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e032      	b.n	800420e <UART_SetConfig+0x282>
 80041a8:	2308      	movs	r3, #8
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e02f      	b.n	800420e <UART_SetConfig+0x282>
 80041ae:	2310      	movs	r3, #16
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e02c      	b.n	800420e <UART_SetConfig+0x282>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <UART_SetConfig+0x2e4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d125      	bne.n	800420a <UART_SetConfig+0x27e>
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <UART_SetConfig+0x2ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041cc:	d017      	beq.n	80041fe <UART_SetConfig+0x272>
 80041ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d2:	d817      	bhi.n	8004204 <UART_SetConfig+0x278>
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d00b      	beq.n	80041f2 <UART_SetConfig+0x266>
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041de:	d811      	bhi.n	8004204 <UART_SetConfig+0x278>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <UART_SetConfig+0x260>
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d006      	beq.n	80041f8 <UART_SetConfig+0x26c>
 80041ea:	e00b      	b.n	8004204 <UART_SetConfig+0x278>
 80041ec:	2300      	movs	r3, #0
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e00d      	b.n	800420e <UART_SetConfig+0x282>
 80041f2:	2302      	movs	r3, #2
 80041f4:	76fb      	strb	r3, [r7, #27]
 80041f6:	e00a      	b.n	800420e <UART_SetConfig+0x282>
 80041f8:	2304      	movs	r3, #4
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	e007      	b.n	800420e <UART_SetConfig+0x282>
 80041fe:	2308      	movs	r3, #8
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e004      	b.n	800420e <UART_SetConfig+0x282>
 8004204:	2310      	movs	r3, #16
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e001      	b.n	800420e <UART_SetConfig+0x282>
 800420a:	2310      	movs	r3, #16
 800420c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <UART_SetConfig+0x2e4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	f040 8087 	bne.w	8004328 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800421a:	7efb      	ldrb	r3, [r7, #27]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d837      	bhi.n	8004290 <UART_SetConfig+0x304>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x29c>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004291 	.word	0x08004291
 8004230:	08004255 	.word	0x08004255
 8004234:	08004291 	.word	0x08004291
 8004238:	0800425b 	.word	0x0800425b
 800423c:	08004291 	.word	0x08004291
 8004240:	08004291 	.word	0x08004291
 8004244:	08004291 	.word	0x08004291
 8004248:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fd ffda 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8004250:	6178      	str	r0, [r7, #20]
        break;
 8004252:	e022      	b.n	800429a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <UART_SetConfig+0x300>)
 8004256:	617b      	str	r3, [r7, #20]
        break;
 8004258:	e01f      	b.n	800429a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fd ff3b 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800425e:	6178      	str	r0, [r7, #20]
        break;
 8004260:	e01b      	b.n	800429a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	617b      	str	r3, [r7, #20]
        break;
 8004268:	e017      	b.n	800429a <UART_SetConfig+0x30e>
 800426a:	bf00      	nop
 800426c:	efff69f3 	.word	0xefff69f3
 8004270:	40008000 	.word	0x40008000
 8004274:	40013800 	.word	0x40013800
 8004278:	40021000 	.word	0x40021000
 800427c:	40004400 	.word	0x40004400
 8004280:	40004800 	.word	0x40004800
 8004284:	40004c00 	.word	0x40004c00
 8004288:	40005000 	.word	0x40005000
 800428c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	76bb      	strb	r3, [r7, #26]
        break;
 8004298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80f1 	beq.w	8004484 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d305      	bcc.n	80042be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	76bb      	strb	r3, [r7, #26]
 80042c2:	e0df      	b.n	8004484 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	020b      	lsls	r3, r1, #8
 80042d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042da:	0202      	lsls	r2, r0, #8
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	6849      	ldr	r1, [r1, #4]
 80042e0:	0849      	lsrs	r1, r1, #1
 80042e2:	4608      	mov	r0, r1
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	1814      	adds	r4, r2, r0
 80042ea:	eb43 0501 	adc.w	r5, r3, r1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ff64 	bl	80001c8 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4613      	mov	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430e:	d308      	bcc.n	8004322 <UART_SetConfig+0x396>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004316:	d204      	bcs.n	8004322 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	e0b0      	b.n	8004484 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	76bb      	strb	r3, [r7, #26]
 8004326:	e0ad      	b.n	8004484 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	d15c      	bne.n	80043ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d828      	bhi.n	800438a <UART_SetConfig+0x3fe>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x3b4>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004375 	.word	0x08004375
 800434c:	0800438b 	.word	0x0800438b
 8004350:	0800437b 	.word	0x0800437b
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800438b 	.word	0x0800438b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fd ff4e 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8004368:	6178      	str	r0, [r7, #20]
        break;
 800436a:	e013      	b.n	8004394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fd ff60 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8004370:	6178      	str	r0, [r7, #20]
        break;
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b49      	ldr	r3, [pc, #292]	; (800449c <UART_SetConfig+0x510>)
 8004376:	617b      	str	r3, [r7, #20]
        break;
 8004378:	e00c      	b.n	8004394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fd feab 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800437e:	6178      	str	r0, [r7, #20]
        break;
 8004380:	e008      	b.n	8004394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004386:	617b      	str	r3, [r7, #20]
        break;
 8004388:	e004      	b.n	8004394 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	76bb      	strb	r3, [r7, #26]
        break;
 8004392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d074      	beq.n	8004484 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005a      	lsls	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d916      	bls.n	80043e6 <UART_SetConfig+0x45a>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d212      	bcs.n	80043e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f023 030f 	bic.w	r3, r3, #15
 80043c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	4313      	orrs	r3, r2
 80043da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	89fa      	ldrh	r2, [r7, #14]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	e04e      	b.n	8004484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	76bb      	strb	r3, [r7, #26]
 80043ea:	e04b      	b.n	8004484 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ec:	7efb      	ldrb	r3, [r7, #27]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d827      	bhi.n	8004442 <UART_SetConfig+0x4b6>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x46c>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fd fef2 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8004420:	6178      	str	r0, [r7, #20]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fd ff04 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8004428:	6178      	str	r0, [r7, #20]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <UART_SetConfig+0x510>)
 800442e:	617b      	str	r3, [r7, #20]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fd fe4f 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8004436:	6178      	str	r0, [r7, #20]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	76bb      	strb	r3, [r7, #26]
        break;
 800444a:	bf00      	nop
    }

    if (pclk != 0U)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	085a      	lsrs	r2, r3, #1
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	b29b      	uxth	r3, r3
 8004466:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0f      	cmp	r3, #15
 800446c:	d908      	bls.n	8004480 <UART_SetConfig+0x4f4>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d204      	bcs.n	8004480 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	e001      	b.n	8004484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004490:	7ebb      	ldrb	r3, [r7, #26]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bdb0      	pop	{r4, r5, r7, pc}
 800449a:	bf00      	nop
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fc fc98 	bl	8000f28 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10e      	bne.n	8004626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f82d 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e023      	b.n	800466e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d10e      	bne.n	8004652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f817 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00d      	b.n	800466e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	e05e      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d05a      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004690:	f7fc fc4a 	bl	8000f28 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11b      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e043      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02c      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fa:	d124      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004704:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004714:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00f      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d091      	beq.n	8004688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004784:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0210 	bic.w	r2, r2, #16
 80047ac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fbb8 	bl	8003f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fb95 	bl	8003f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e03c      	b.n	80048ca <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc f9ff 	bl	8000c68 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f85c 	bl	8004940 <USART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e01b      	b.n	80048ca <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048a0:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f992 	bl	8004bec <USART_CheckIdleState>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80048e2:	e018      	b.n	8004916 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d014      	beq.n	8004916 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fc fb1c 	bl	8000f28 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <USART_WaitOnFlagUntilTimeout+0x30>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	429a      	cmp	r2, r3
 8004932:	d0d7      	beq.n	80048e4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b9a      	ldr	r3, [pc, #616]	; (8004bd8 <USART_SetConfig+0x298>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	430b      	orrs	r3, r1
 8004978:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800497a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800497e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <USART_SetConfig+0x29c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d121      	bne.n	8004a06 <USART_SetConfig+0xc6>
 80049c2:	4b87      	ldr	r3, [pc, #540]	; (8004be0 <USART_SetConfig+0x2a0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d817      	bhi.n	8004a00 <USART_SetConfig+0xc0>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <USART_SetConfig+0x98>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	080049ef 	.word	0x080049ef
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e06b      	b.n	8004ac6 <USART_SetConfig+0x186>
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e068      	b.n	8004ac6 <USART_SetConfig+0x186>
 80049f4:	2304      	movs	r3, #4
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e065      	b.n	8004ac6 <USART_SetConfig+0x186>
 80049fa:	2308      	movs	r3, #8
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e062      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e05f      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a76      	ldr	r2, [pc, #472]	; (8004be4 <USART_SetConfig+0x2a4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d132      	bne.n	8004a76 <USART_SetConfig+0x136>
 8004a10:	4b73      	ldr	r3, [pc, #460]	; (8004be0 <USART_SetConfig+0x2a0>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d828      	bhi.n	8004a70 <USART_SetConfig+0x130>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <USART_SetConfig+0xe4>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a5f 	.word	0x08004a5f
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e033      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e030      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a64:	2304      	movs	r3, #4
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e02d      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e02a      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a70:	2310      	movs	r3, #16
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e027      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5b      	ldr	r2, [pc, #364]	; (8004be8 <USART_SetConfig+0x2a8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d120      	bne.n	8004ac2 <USART_SetConfig+0x182>
 8004a80:	4b57      	ldr	r3, [pc, #348]	; (8004be0 <USART_SetConfig+0x2a0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d013      	beq.n	8004ab6 <USART_SetConfig+0x176>
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d814      	bhi.n	8004abc <USART_SetConfig+0x17c>
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d009      	beq.n	8004aaa <USART_SetConfig+0x16a>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d810      	bhi.n	8004abc <USART_SetConfig+0x17c>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <USART_SetConfig+0x164>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d006      	beq.n	8004ab0 <USART_SetConfig+0x170>
 8004aa2:	e00b      	b.n	8004abc <USART_SetConfig+0x17c>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e00d      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e00a      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e007      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e004      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e001      	b.n	8004ac6 <USART_SetConfig+0x186>
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d85a      	bhi.n	8004b82 <USART_SetConfig+0x242>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <USART_SetConfig+0x194>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b83 	.word	0x08004b83
 8004ae4:	08004b4f 	.word	0x08004b4f
 8004ae8:	08004b83 	.word	0x08004b83
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004b83 	.word	0x08004b83
 8004af4:	08004b6d 	.word	0x08004b6d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fd fb84 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8004afc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004b14:	e038      	b.n	8004b88 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b16:	f7fd fb8b 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8004b1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	005a      	lsls	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004b32:	e029      	b.n	8004b88 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004b3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6852      	ldr	r2, [r2, #4]
 8004b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004b4c:	e01c      	b.n	8004b88 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fd fac1 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8004b52:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	005a      	lsls	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004b6a:	e00d      	b.n	8004b88 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004b80:	e002      	b.n	8004b88 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77bb      	strb	r3, [r7, #30]
      break;
 8004b86:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d916      	bls.n	8004bbc <USART_SetConfig+0x27c>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d212      	bcs.n	8004bbc <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f023 030f 	bic.w	r3, r3, #15
 8004b9e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	89fa      	ldrh	r2, [r7, #14]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	e001      	b.n	8004bc0 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004bcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	efff69f3 	.word	0xefff69f3
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40004400 	.word	0x40004400
 8004be8:	40004800 	.word	0x40004800

08004bec <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bfa:	f7fc f995 	bl	8000f28 <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d10e      	bne.n	8004c2c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fe58 	bl	80048d2 <USART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e01e      	b.n	8004c6a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d10e      	bne.n	8004c58 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fe42 	bl	80048d2 <USART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e008      	b.n	8004c6a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	4d0d      	ldr	r5, [pc, #52]	; (8004cac <__libc_init_array+0x38>)
 8004c78:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7a:	1b64      	subs	r4, r4, r5
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	2600      	movs	r6, #0
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	4d0b      	ldr	r5, [pc, #44]	; (8004cb4 <__libc_init_array+0x40>)
 8004c86:	4c0c      	ldr	r4, [pc, #48]	; (8004cb8 <__libc_init_array+0x44>)
 8004c88:	f000 f820 	bl	8004ccc <_init>
 8004c8c:	1b64      	subs	r4, r4, r5
 8004c8e:	10a4      	asrs	r4, r4, #2
 8004c90:	2600      	movs	r6, #0
 8004c92:	42a6      	cmp	r6, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9c:	4798      	blx	r3
 8004c9e:	3601      	adds	r6, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca6:	4798      	blx	r3
 8004ca8:	3601      	adds	r6, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08004d34 	.word	0x08004d34
 8004cb0:	08004d34 	.word	0x08004d34
 8004cb4:	08004d34 	.word	0x08004d34
 8004cb8:	08004d38 	.word	0x08004d38

08004cbc <memset>:
 8004cbc:	4402      	add	r2, r0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <_init>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_fini>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr
