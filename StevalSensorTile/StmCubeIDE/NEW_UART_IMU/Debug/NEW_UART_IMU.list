
NEW_UART_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf8  08005cf8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a8  2000007c  08005d7c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002224  08005d7c  00022224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114bf  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002367  00000000  00000000  0003156b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000338d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00034690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262e1  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efa3  00000000  00000000  0005b651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef360  00000000  00000000  0006a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  001599a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c54 	.word	0x08005c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005c54 	.word	0x08005c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fdcb 	bl	8001106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f86a 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f948 	bl	8000808 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000578:	f000 f8ac 	bl	80006d4 <MX_SPI2_Init>
  MX_UART5_Init();
 800057c:	f000 f8e8 	bl	8000750 <MX_UART5_Init>
  MX_USART2_Init();
 8000580:	f000 f916 	bl	80007b0 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	Error_Handler_1();
 8000584:	f000 fa40 	bl	8000a08 <Error_Handler_1>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	4825      	ldr	r0, [pc, #148]	; (8000624 <main+0xbc>)
 8000590:	f001 f98c 	bl	80018ac <HAL_GPIO_WritePin>

	lsm6dsm_init();
 8000594:	f000 fa76 	bl	8000a84 <lsm6dsm_init>
	HAL_Delay(200);
 8000598:	20c8      	movs	r0, #200	; 0xc8
 800059a:	f000 fe29 	bl	80011f0 <HAL_Delay>

	whoami(); // check if device can be found
 800059e:	f000 f9c7 	bl	8000930 <whoami>

	// set UART5 interrupt
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 80005a2:	2207      	movs	r2, #7
 80005a4:	4920      	ldr	r1, [pc, #128]	; (8000628 <main+0xc0>)
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <main+0xc4>)
 80005a8:	f003 fcba 	bl	8003f20 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // Switch on LED
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <main+0xc8>)
 80005b4:	f001 f97a 	bl	80018ac <HAL_GPIO_WritePin>
	i=0;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <main+0xcc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	801a      	strh	r2, [r3, #0]
//  	uint8_t reg=0x1e; // register of IMU where DRDY signal can be found

  while (1)
  {
	  // polling data
	  if(flag==1) // check external interrupt
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <main+0xd0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d1fb      	bne.n	80005be <main+0x56>
//			result=isKthBitSet(bufp, 1);

// 		  	if(1)
//		  	{
		  		// interrupt if PWM occurs
		  		if(i<4096)
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <main+0xcc>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005ce:	d225      	bcs.n	800061c <main+0xb4>
		  		{

		  			lsm6dsm_acceleration_raw_get(data_raw_acceleration);
 80005d0:	481a      	ldr	r0, [pc, #104]	; (800063c <main+0xd4>)
 80005d2:	f000 fa9b 	bl	8000b0c <lsm6dsm_acceleration_raw_get>
		  			// acc_x=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[0]);
		  			// acc_y=lsm6dsm_from_fs4g_to_mg(data_raw_acceleration[1]);
		  			acc_z=lsm6dsm_from_fs16g_to_mg(data_raw_acceleration[2]);
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <main+0xd4>)
 80005d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fa7d 	bl	8000adc <lsm6dsm_from_fs16g_to_mg>
 80005e2:	eef0 7a40 	vmov.f32	s15, s0
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <main+0xd8>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
		  			// accel_data_x[i]=(int16_t)acc_x;
		  			// accel_data_y[i]=(int16_t)acc_y;
		  			accel_data_z[i]=(int16_t)acc_z;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <main+0xd8>)
 80005ee:	edd3 7a00 	vldr	s15, [r3]
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <main+0xcc>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fc:	ee17 3a90 	vmov	r3, s15
 8000600:	b219      	sxth	r1, r3
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xdc>)
 8000604:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  			// time[i]=HAL_GetTick();
		  			i++;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0xcc>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <main+0xcc>)
 8000612:	801a      	strh	r2, [r3, #0]
		  			flag=0;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0xd0>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	e7d0      	b.n	80005be <main+0x56>

		  		}
		  		else{
		  			i=0;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <main+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	801a      	strh	r2, [r3, #0]
	  if(flag==1) // check external interrupt
 8000622:	e7cc      	b.n	80005be <main+0x56>
 8000624:	48000400 	.word	0x48000400
 8000628:	20000098 	.word	0x20000098
 800062c:	20002128 	.word	0x20002128
 8000630:	48001800 	.word	0x48001800
 8000634:	200000a0 	.word	0x200000a0
 8000638:	20000008 	.word	0x20000008
 800063c:	200020a4 	.word	0x200020a4
 8000640:	2000220c 	.word	0x2000220c
 8000644:	200000a4 	.word	0x200000a4

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fec6 	bl	80053e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f001 f95b 	bl	8001928 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 fb24 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800067c:	2310      	movs	r3, #16
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f9ad 	bl	80019f4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fb10 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fd7f 	bl	80021c0 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c8:	f000 fafc 	bl	8000cc4 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_SPI2_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_SPI2_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_SPI2_Init+0x74>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_SPI2_Init+0x74>)
 80006e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_SPI2_Init+0x74>)
 80006f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_SPI2_Init+0x74>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_SPI2_Init+0x74>)
 80006fe:	2201      	movs	r2, #1
 8000700:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI2_Init+0x74>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_SPI2_Init+0x74>)
 800070c:	2208      	movs	r2, #8
 800070e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_SPI2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_SPI2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI2_Init+0x74>)
 8000724:	2207      	movs	r2, #7
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_SPI2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_SPI2_Init+0x74>)
 8000736:	f002 fc05 	bl	8002f44 <HAL_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 fac0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200020b8 	.word	0x200020b8
 800074c:	40003800 	.word	0x40003800

08000750 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_UART5_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_UART5_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_UART5_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_UART5_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_UART5_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_UART5_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_UART5_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_UART5_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_UART5_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_UART5_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_UART5_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_UART5_Init+0x58>)
 8000794:	f003 fae2 	bl	8003d5c <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 fa91 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20002128 	.word	0x20002128
 80007ac:	40005000 	.word	0x40005000

080007b0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_USART2_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_USART2_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_Init+0x50>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART2_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_USART2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_USART2_Init+0x50>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_USART2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART2_Init+0x50>)
 80007ee:	f004 fbb7 	bl	8004f60 <HAL_USART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 fa64 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200021b0 	.word	0x200021b0
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_GPIO_Init+0x118>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a3f      	ldr	r2, [pc, #252]	; (8000920 <MX_GPIO_Init+0x118>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <MX_GPIO_Init+0x118>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <MX_GPIO_Init+0x118>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a39      	ldr	r2, [pc, #228]	; (8000920 <MX_GPIO_Init+0x118>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <MX_GPIO_Init+0x118>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <MX_GPIO_Init+0x118>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a33      	ldr	r2, [pc, #204]	; (8000920 <MX_GPIO_Init+0x118>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0x118>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000866:	f001 f8b5 	bl	80019d4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x118>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <MX_GPIO_Init+0x118>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0x118>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_GPIO_Init+0x118>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <MX_GPIO_Init+0x118>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_GPIO_Init+0x118>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a0:	4820      	ldr	r0, [pc, #128]	; (8000924 <MX_GPIO_Init+0x11c>)
 80008a2:	f001 f803 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_GPIO_Init+0x120>)
 80008ae:	f000 fffd 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4816      	ldr	r0, [pc, #88]	; (8000924 <MX_GPIO_Init+0x11c>)
 80008cc:	f000 fe44 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWMI_RAS_Pin */
  GPIO_InitStruct.Pin = PWMI_RAS_Pin;
 80008d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0x124>)
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWMI_RAS_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <MX_GPIO_Init+0x120>)
 80008e6:	f000 fe37 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0x120>)
 8000904:	f000 fe28 	bl	8001558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2017      	movs	r0, #23
 800090e:	f000 fd6e 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000912:	2017      	movs	r0, #23
 8000914:	f000 fd87 	bl	8001426 <HAL_NVIC_EnableIRQ>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48001800 	.word	0x48001800
 8000928:	48000400 	.word	0x48000400
 800092c:	10110000 	.word	0x10110000

08000930 <whoami>:
	return 0;
}


void whoami(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	// adr_WHO_AM_I has to be 0x6a
	uint8_t who_am_i=0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	71bb      	strb	r3, [r7, #6]
	uint8_t who_am_i_reg=0x0f;
 800093a:	230f      	movs	r3, #15
 800093c:	71fb      	strb	r3, [r7, #7]

	lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 800093e:	1dba      	adds	r2, r7, #6
 8000940:	79f9      	ldrb	r1, [r7, #7]
 8000942:	2301      	movs	r3, #1
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <whoami+0x40>)
 8000946:	f000 f92d 	bl	8000ba4 <lsm6ds3_read>

	if(who_am_i!=0x6a)
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	2b6a      	cmp	r3, #106	; 0x6a
 800094e:	d00a      	beq.n	8000966 <whoami+0x36>
		// error when jumping in here
		// device not found!!!
		// possible problems can be wrong DEBUG port is used
		while(1)
		{
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000950:	1dba      	adds	r2, r7, #6
 8000952:	79f9      	ldrb	r1, [r7, #7]
 8000954:	2301      	movs	r3, #1
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <whoami+0x40>)
 8000958:	f000 f924 	bl	8000ba4 <lsm6ds3_read>
			if(who_am_i==0x6a){break;}
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	2b6a      	cmp	r3, #106	; 0x6a
 8000960:	d000      	beq.n	8000964 <whoami+0x34>
			lsm6ds3_read(&hspi2, who_am_i_reg, &who_am_i, 1);
 8000962:	e7f5      	b.n	8000950 <whoami+0x20>
			if(who_am_i==0x6a){break;}
 8000964:	bf00      	nop
		}
	}
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200020b8 	.word	0x200020b8

08000974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0c6      	sub	sp, #280	; 0x118
 8000978:	af00      	add	r7, sp, #0
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	6018      	str	r0, [r3, #0]
	// __NOP(); // used to debug the Callback
	int 	size;
	char 	data_s[256];
	uint16_t length_data_array=4096;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

	for(int j=0; j<length_data_array;j++)
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800098c:	e01c      	b.n	80009c8 <HAL_UART_RxCpltCallback+0x54>
	{
		size=sprintf(data_s, "%05d\n",accel_data_z[j]);
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <HAL_UART_RxCpltCallback+0x7c>)
 8000990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000994:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000998:	461a      	mov	r2, r3
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4915      	ldr	r1, [pc, #84]	; (80009f4 <HAL_UART_RxCpltCallback+0x80>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fd29 	bl	80053f8 <siprintf>
 80009a6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		HAL_UART_Transmit(&huart5,(uint8_t *)data_s, size, Timeout);
 80009aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_RxCpltCallback+0x84>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_UART_RxCpltCallback+0x88>)
 80009ba:	f003 fa1d 	bl	8003df8 <HAL_UART_Transmit>
	for(int j=0; j<length_data_array;j++)
 80009be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009c2:	3301      	adds	r3, #1
 80009c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80009c8:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80009cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbdc      	blt.n	800098e <HAL_UART_RxCpltCallback+0x1a>
	}
	i=0;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_UART_RxCpltCallback+0x8c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart5, rxBuffer, 7);
 80009da:	2207      	movs	r2, #7
 80009dc:	4909      	ldr	r1, [pc, #36]	; (8000a04 <HAL_UART_RxCpltCallback+0x90>)
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <HAL_UART_RxCpltCallback+0x88>)
 80009e0:	f003 fa9e 	bl	8003f20 <HAL_UART_Receive_IT>
}
 80009e4:	bf00      	nop
 80009e6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000a4 	.word	0x200000a4
 80009f4:	08005c6c 	.word	0x08005c6c
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20002128 	.word	0x20002128
 8000a00:	200000a0 	.word	0x200000a0
 8000a04:	20000098 	.word	0x20000098

08000a08 <Error_Handler_1>:

static void Error_Handler_1(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <Error_Handler_1+0x78>)
 8000a14:	f000 ff4a 	bl	80018ac <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000a18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a1c:	f000 fbe8 	bl	80011f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <Error_Handler_1+0x78>)
 8000a28:	f000 ff40 	bl	80018ac <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000a2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a30:	f000 fbde 	bl	80011f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <Error_Handler_1+0x78>)
 8000a3c:	f000 ff36 	bl	80018ac <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000a40:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a44:	f000 fbd4 	bl	80011f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <Error_Handler_1+0x78>)
 8000a50:	f000 ff2c 	bl	80018ac <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000a54:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a58:	f000 fbca 	bl	80011f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <Error_Handler_1+0x78>)
 8000a64:	f000 ff22 	bl	80018ac <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000a68:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a6c:	f000 fbc0 	bl	80011f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <Error_Handler_1+0x78>)
 8000a78:	f000 ff18 	bl	80018ac <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	48001800 	.word	0x48001800

08000a84 <lsm6dsm_init>:

void lsm6dsm_init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	uint32_t len =1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
	uint8_t bufp;
	// LSM6DS3H_REG_CTRL3_C
	// set 3-wire SPI mode
	// set block data update
	bufp=BDU|SIM|IF_INC; //0b01001100;
 8000a8e:	234c      	movs	r3, #76	; 0x4c
 8000a90:	70bb      	strb	r3, [r7, #2]
	uint8_t reg=LSM6DS3H_REG_CTRL3_C;
 8000a92:	2312      	movs	r3, #18
 8000a94:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2,reg, &bufp, len);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	1cba      	adds	r2, r7, #2
 8000a9c:	78f9      	ldrb	r1, [r7, #3]
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <lsm6dsm_init+0x54>)
 8000aa0:	f000 f8c6 	bl	8000c30 <lsm6ds3_write>
	// LSM6DS3H_REG_CTRL1_XL
	// Values for acceleration
	// ODR_XL set to 6.66kHz
	// FS of accelerometer set to +- 4g
	// BW0_XL BW set to 400Hz
	bufp=ODR_6660Hz|FS_16g; // 0b10101000;
 8000aa4:	23a4      	movs	r3, #164	; 0xa4
 8000aa6:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_CTRL1_XL;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	1cba      	adds	r2, r7, #2
 8000ab2:	78f9      	ldrb	r1, [r7, #3]
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <lsm6dsm_init+0x54>)
 8000ab6:	f000 f8bb 	bl	8000c30 <lsm6ds3_write>

	// disable latched mode
	bufp=DRDY_LATCHED;
 8000aba:	2300      	movs	r3, #0
 8000abc:	70bb      	strb	r3, [r7, #2]
	reg=LSM6DS3H_REG_DRDY_PULSE_CFG;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	70fb      	strb	r3, [r7, #3]
	lsm6ds3_write(&hspi2, reg, &bufp, len);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	1cba      	adds	r2, r7, #2
 8000ac8:	78f9      	ldrb	r1, [r7, #3]
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <lsm6dsm_init+0x54>)
 8000acc:	f000 f8b0 	bl	8000c30 <lsm6ds3_write>

}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200020b8 	.word	0x200020b8

08000adc <lsm6dsm_from_fs16g_to_mg>:
{
  return ((float)lsb * 0.244f);
}

float lsm6dsm_from_fs16g_to_mg(int16_t lsb)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb * 0.488f);
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000b08 <lsm6dsm_from_fs16g_to_mg+0x2c>
 8000af6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000afa:	eeb0 0a67 	vmov.f32	s0, s15
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	3ef9db23 	.word	0x3ef9db23

08000b0c <lsm6dsm_acceleration_raw_get>:
	return 0;

}

int32_t lsm6dsm_acceleration_raw_get(int16_t *val)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint8_t buff[6];
  int32_t ret;

  lsm6ds3_read(&hspi2, LSM6DS3H_REG_OUTX_L_XL, &buff, 6);
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	2306      	movs	r3, #6
 8000b1a:	2128      	movs	r1, #40	; 0x28
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <lsm6dsm_acceleration_raw_get+0x94>)
 8000b1e:	f000 f841 	bl	8000ba4 <lsm6ds3_read>
  val[0] = (int16_t)buff[1];
 8000b22:	7b7b      	ldrb	r3, [r7, #13]
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000b44:	7bfa      	ldrb	r2, [r7, #15]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3302      	adds	r3, #2
 8000b4a:	b212      	sxth	r2, r2
 8000b4c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3302      	adds	r3, #2
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4413      	add	r3, r2
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3302      	adds	r3, #2
 8000b68:	b212      	sxth	r2, r2
 8000b6a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000b6c:	7c7a      	ldrb	r2, [r7, #17]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	b212      	sxth	r2, r2
 8000b74:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	7c3b      	ldrb	r3, [r7, #16]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	b212      	sxth	r2, r2
 8000b92:	801a      	strh	r2, [r3, #0]

  return ret;
 8000b94:	697b      	ldr	r3, [r7, #20]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200020b8 	.word	0x200020b8

08000ba4 <lsm6ds3_read>:
	return 0;

}

static int32_t lsm6ds3_read(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	72fb      	strb	r3, [r7, #11]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	813b      	strh	r3, [r7, #8]
	reg |= 0x80; // set MSB to one for read operation
 8000bb8:	7afb      	ldrb	r3, [r7, #11]
 8000bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc8:	4816      	ldr	r0, [pc, #88]	; (8000c24 <lsm6ds3_read+0x80>)
 8000bca:	f000 fe6f 	bl	80018ac <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <lsm6ds3_read+0x84>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f107 010b 	add.w	r1, r7, #11
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f002 fa56 	bl	800308a <HAL_SPI_Transmit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <lsm6ds3_read+0x88>)
 8000be4:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Receive(handle, bufp, len, TIMEOUT_DURATION);
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <lsm6ds3_read+0x84>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	893a      	ldrh	r2, [r7, #8]
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f002 fbb9 	bl	8003366 <HAL_SPI_Receive>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <lsm6ds3_read+0x88>)
 8000bfa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4808      	ldr	r0, [pc, #32]	; (8000c24 <lsm6ds3_read+0x80>)
 8000c04:	f000 fe52 	bl	80018ac <HAL_GPIO_WritePin>
	while(status_spi!=HAL_OK)
 8000c08:	bf00      	nop
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <lsm6ds3_read+0x88>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <lsm6ds3_read+0x74>
	{
		// spi communication isnt finished or something failed
		return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e000      	b.n	8000c1a <lsm6ds3_read+0x76>
	}
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000400 	.word	0x48000400
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	2000211d 	.word	0x2000211d

08000c30 <lsm6ds3_write>:

static int32_t lsm6ds3_write(void *handle, uint8_t reg,uint8_t *bufp,uint16_t len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	72fb      	strb	r3, [r7, #11]
 8000c40:	4613      	mov	r3, r2
 8000c42:	813b      	strh	r3, [r7, #8]
	reg |= 0x00;
 8000c44:	7afb      	ldrb	r3, [r7, #11]
 8000c46:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <lsm6ds3_write+0x68>)
 8000c50:	f000 fe2c 	bl	80018ac <HAL_GPIO_WritePin>
	status_spi=HAL_SPI_Transmit(handle, &reg, 1, TIMEOUT_DURATION);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <lsm6ds3_write+0x6c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f107 010b 	add.w	r1, r7, #11
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f002 fa13 	bl	800308a <HAL_SPI_Transmit>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <lsm6ds3_write+0x70>)
 8000c6a:	701a      	strb	r2, [r3, #0]
	status_spi=HAL_SPI_Transmit(handle, bufp, len, TIMEOUT_DURATION);
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <lsm6ds3_write+0x6c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	893a      	ldrh	r2, [r7, #8]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f002 fa08 	bl	800308a <HAL_SPI_Transmit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <lsm6ds3_write+0x70>)
 8000c80:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <lsm6ds3_write+0x68>)
 8000c8a:	f000 fe0f 	bl	80018ac <HAL_GPIO_WritePin>

  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	2000211d 	.word	0x2000211d

08000ca4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_SPI_MspInit+0x7c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d128      	bne.n	8000d8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8000d6a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_SPI_MspInit+0x84>)
 8000d88:	f000 fbe6 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40003800 	.word	0x40003800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ac      	sub	sp, #176	; 0xb0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2288      	movs	r2, #136	; 0x88
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fb11 	bl	80053e8 <memset>
  if(huart->Instance==UART5)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a36      	ldr	r2, [pc, #216]	; (8000ea4 <HAL_UART_MspInit+0x104>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d164      	bne.n	8000e9a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fbf5 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ff6c 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df6:	6593      	str	r3, [r2, #88]	; 0x58
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_UART_MspInit+0x108>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e34:	2304      	movs	r3, #4
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <HAL_UART_MspInit+0x10c>)
 8000e5a:	f000 fb7d 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e82:	4619      	mov	r1, r3
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <HAL_UART_MspInit+0x110>)
 8000e86:	f000 fb67 	bl	8001558 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2035      	movs	r0, #53	; 0x35
 8000e90:	f000 faad 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e94:	2035      	movs	r0, #53	; 0x35
 8000e96:	f000 fac6 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37b0      	adds	r7, #176	; 0xb0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005000 	.word	0x40005000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48000800 	.word	0x48000800

08000eb4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	; 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	; 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 fa87 	bl	80053e8 <memset>
  if(husart->Instance==USART2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_USART_MspInit+0xb0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13b      	bne.n	8000f5c <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fb6b 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff fee2 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_USART_MspInit+0xb4>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8000f30:	231c      	movs	r3, #28
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f000 fafe 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37b0      	adds	r7, #176	; 0xb0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40004400 	.word	0x40004400
 8000f68:	40021000 	.word	0x40021000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8fa 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fc8:	f000 fc88 	bl	80018dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <UART5_IRQHandler+0x10>)
 8000fd6:	f002 ffe7 	bl	8003fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20002128 	.word	0x20002128

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f004 f9be 	bl	8005394 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20018000 	.word	0x20018000
 8001044:	00000400 	.word	0x00000400
 8001048:	200020ac 	.word	0x200020ac
 800104c:	20002228 	.word	0x20002228

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <SystemInit+0x5c>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <SystemInit+0x5c>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <SystemInit+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <SystemInit+0x60>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <SystemInit+0x60>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <SystemInit+0x60>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <SystemInit+0x60>)
 800107c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001080:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001084:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <SystemInit+0x60>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SystemInit+0x60>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SystemInit+0x60>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SystemInit+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	40021000 	.word	0x40021000

080010b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff ffca 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010be:	e003      	b.n	80010c8 <LoopCopyDataInit>

080010c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010c6:	3104      	adds	r1, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010d0:	d3f6      	bcc.n	80010c0 <CopyDataInit>
	ldr	r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80010d4:	e002      	b.n	80010dc <LoopFillZerobss>

080010d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010d8:	f842 3b04 	str.w	r3, [r2], #4

080010dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <LoopForever+0x16>)
	cmp	r2, r3
 80010de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010e0:	d3f9      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f004 f95d 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e6:	f7ff fa3f 	bl	8000568 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010f0:	08005d00 	.word	0x08005d00
	ldr	r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010f8:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80010fc:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001100:	20002224 	.word	0x20002224

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>

08001106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f961 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f80e 	bl	8001138 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	e001      	b.n	800112c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001128:	f7ff fdd2 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800112c:	79fb      	ldrb	r3, [r7, #7]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_InitTick+0x6c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_InitTick+0x70>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_InitTick+0x6c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f96d 	bl	8001442 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10f      	bne.n	800118e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d809      	bhi.n	8001188 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f937 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_InitTick+0x74>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e007      	b.n	8001198 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e004      	b.n	8001198 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e001      	b.n	8001198 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000014 	.word	0x20000014
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000010 	.word	0x20000010

080011b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_IncTick+0x24>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000014 	.word	0x20000014
 80011d4:	20002210 	.word	0x20002210

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_GetTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20002210 	.word	0x20002210

080011f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ffee 	bl	80011d8 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d005      	beq.n	8001216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_Delay+0x44>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001216:	bf00      	nop
 8001218:	f7ff ffde 	bl	80011d8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d8f7      	bhi.n	8001218 <HAL_Delay+0x28>
  {
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000014 	.word	0x20000014

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2204      	movs	r2, #4
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e022      	b.n	80014ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 020e 	bic.w	r2, r2, #14
 8001492:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f003 021c 	and.w	r2, r3, #28
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d005      	beq.n	80014fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e029      	b.n	800154e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020e 	bic.w	r2, r2, #14
 8001508:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f003 021c 	and.w	r2, r3, #28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
    }
  }
  return status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e17f      	b.n	8001868 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8171 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d00b      	beq.n	80015a0 <HAL_GPIO_Init+0x48>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001594:	2b11      	cmp	r3, #17
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b12      	cmp	r3, #18
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d118      	bne.n	8001640 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x128>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80ac 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_GPIO_Init+0x330>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <HAL_GPIO_Init+0x330>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	; 0x60
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_GPIO_Init+0x330>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001722:	4a5a      	ldr	r2, [pc, #360]	; (800188c <HAL_GPIO_Init+0x334>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x242>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_GPIO_Init+0x338>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x23e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x33c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x23a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_GPIO_Init+0x340>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x236>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x344>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x232>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x348>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x22e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x34c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x22a>
 800177e:	2306      	movs	r3, #6
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001782:	2307      	movs	r3, #7
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x244>
 800179a:	2300      	movs	r3, #0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ac:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_GPIO_Init+0x334>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae78 	bne.w	8001568 <HAL_GPIO_Init+0x10>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	48001800 	.word	0x48001800
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f9d2 	bl	8000ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_PWREx_GetVoltageRange+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001936:	d130      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d038      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2232      	movs	r2, #50	; 0x32
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196c:	e002      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3b01      	subs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001980:	d102      	bne.n	8001988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f2      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001994:	d110      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e00f      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d007      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000
 80019cc:	2000000c 	.word	0x2000000c
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6053      	str	r3, [r2, #4]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40007000 	.word	0x40007000

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e3d4      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4ba1      	ldr	r3, [pc, #644]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80e4 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4a>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	f040 808b 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 8087 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3e:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e3ac      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_RCC_OscConfig+0x7c>
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_OscConfig+0x88>
 8001a70:	4b86      	ldr	r3, [pc, #536]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d223      	bcs.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fd41 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e38d      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a7c      	ldr	r2, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4977      	ldr	r1, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4972      	ldr	r1, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac8:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6f      	ldr	r2, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	496a      	ldr	r1, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae6:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	4965      	ldr	r1, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd01 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e34d      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b14:	f000 fc36 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	495a      	ldr	r1, [pc, #360]	; (8001c90 <HAL_RCC_OscConfig+0x29c>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_OscConfig+0x2a0>)
 8001b32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x2a4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fafd 	bl	8001138 <HAL_InitTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d052      	beq.n	8001bee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	e331      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d032      	beq.n	8001bba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b54:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb3a 	bl	80011d8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b68:	f7ff fb36 	bl	80011d8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e31a      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	493b      	ldr	r1, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	4936      	ldr	r1, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	e01a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fb07 	bl	80011d8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bce:	f7ff fb03 	bl	80011d8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e2e7      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x1da>
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d074      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x21a>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d10e      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d064      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d160      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e2c4      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x24a>
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e01d      	b.n	8001c7a <HAL_RCC_OscConfig+0x286>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x26e>
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x286>
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff faa9 	bl	80011d8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c88:	e011      	b.n	8001cae <HAL_RCC_OscConfig+0x2ba>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08005c74 	.word	0x08005c74
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fa9c 	bl	80011d8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e280      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	4baf      	ldr	r3, [pc, #700]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fa8c 	bl	80011d8 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fa88 	bl	80011d8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e26c      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	4ba5      	ldr	r3, [pc, #660]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2d0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d060      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x310>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d116      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e249      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b93      	ldr	r3, [pc, #588]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4990      	ldr	r1, [pc, #576]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	e040      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8b      	ldr	r2, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fa47 	bl	80011d8 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fa43 	bl	80011d8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e227      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	497c      	ldr	r1, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b7a      	ldr	r3, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a79      	ldr	r2, [pc, #484]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fa23 	bl	80011d8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fa1f 	bl	80011d8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e203      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f9fe 	bl	80011d8 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f9fa 	bl	80011d8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1de      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df2:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ef      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
 8001e00:	e01b      	b.n	8001e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f9e1 	bl	80011d8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f9dd 	bl	80011d8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1c1      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a6 	beq.w	8001f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f9a4 	bl	80011d8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7ff f9a0 	bl	80011d8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e184      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d8>
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_OscConfig+0x522>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d110      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x502>
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef4:	e00f      	b.n	8001f16 <HAL_RCC_OscConfig+0x522>
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f95b 	bl	80011d8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff f957 	bl	80011d8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e139      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ed      	beq.n	8001f26 <HAL_RCC_OscConfig+0x532>
 8001f4a:	e01a      	b.n	8001f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f944 	bl	80011d8 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f940 	bl	80011d8 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d906      	bls.n	8001f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e122      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e8      	bne.n	8001f54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a8a      	ldr	r2, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8108 	beq.w	80021ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	f040 80d0 	bne.w	8002148 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fa8:	4b83      	ldr	r3, [pc, #524]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d130      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d127      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11f      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe8:	2a07      	cmp	r2, #7
 8001fea:	bf14      	ite	ne
 8001fec:	2201      	movne	r2, #1
 8001fee:	2200      	moveq	r2, #0
 8001ff0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d113      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	3b01      	subs	r3, #1
 8002004:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d109      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	3b01      	subs	r3, #1
 8002018:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d06e      	beq.n	80020fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d069      	beq.n	80020f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b7      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5c      	ldr	r2, [pc, #368]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204c:	f7ff f8c4 	bl	80011d8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f8c0 	bl	80011d8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0a4      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_RCC_OscConfig+0x7c8>)
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002082:	3a01      	subs	r2, #1
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	0552      	lsls	r2, r2, #21
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0652      	lsls	r2, r2, #25
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	0912      	lsrs	r2, r2, #4
 80020ae:	0452      	lsls	r2, r2, #17
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4941      	ldr	r1, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3e      	ldr	r2, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c4:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7ff f882 	bl	80011d8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f87e 	bl	80011d8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e062      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	e05a      	b.n	80021ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e059      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d152      	bne.n	80021ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002120:	f7ff f85a 	bl	80011d8 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f856 	bl	80011d8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e03a      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x734>
 8002146:	e032      	b.n	80021ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d02d      	beq.n	80021aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800216c:	f023 0303 	bic.w	r3, r3, #3
 8002170:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 8002178:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f829 	bl	80011d8 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f825 	bl	80011d8 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_OscConfig+0x7c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x796>
 80021a8:	e001      	b.n	80021ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	f99d808c 	.word	0xf99d808c

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0c8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4961      	ldr	r1, [pc, #388]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b0      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d04c      	beq.n	80022aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d121      	bne.n	8002268 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e09e      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d115      	bne.n	8002268 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e092      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e086      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e07e      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 0203 	bic.w	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	493f      	ldr	r1, [pc, #252]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227a:	f7fe ffad 	bl	80011d8 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002280:	e00a      	b.n	8002298 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002282:	f7fe ffa9 	bl	80011d8 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e066      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 020c 	and.w	r2, r3, #12
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d1eb      	bne.n	8002282 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	492c      	ldr	r1, [pc, #176]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d210      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4924      	ldr	r1, [pc, #144]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1b0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e036      	b.n	8002366 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4910      	ldr	r1, [pc, #64]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002336:	f000 f825 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	490c      	ldr	r1, [pc, #48]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe feec 	bl	8001138 <HAL_InitTick>
 8002360:	4603      	mov	r3, r0
 8002362:	72fb      	strb	r3, [r7, #11]

  return status;
 8002364:	7afb      	ldrb	r3, [r7, #11]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	08005c74 	.word	0x08005c74
 800237c:	2000000c 	.word	0x2000000c
 8002380:	20000010 	.word	0x20000010

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11e      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e004      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d101      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 800240a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d134      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xa6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0xac>
 8002428:	e005      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 800242c:	617b      	str	r3, [r7, #20]
      break;
 800242e:	e005      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	617b      	str	r3, [r7, #20]
      break;
 8002434:	e002      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	3301      	adds	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fb02 f203 	mul.w	r2, r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	0e5b      	lsrs	r3, r3, #25
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	3301      	adds	r3, #1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800247c:	69bb      	ldr	r3, [r7, #24]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	08005c8c 	.word	0x08005c8c
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08005c84 	.word	0x08005c84

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	08005c84 	.word	0x08005c84

0800250c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f9f2 	bl	800190c <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
 800252a:	e014      	b.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002544:	f7ff f9e2 	bl	800190c <HAL_PWREx_GetVoltageRange>
 8002548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d10b      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d919      	bls.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2ba0      	cmp	r3, #160	; 0xa0
 8002568:	d902      	bls.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256a:	2302      	movs	r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e013      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e010      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d902      	bls.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e00a      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d102      	bne.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002588:	2302      	movs	r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e004      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d101      	bne.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40022000 	.word	0x40022000

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2300      	movs	r3, #0
 80025d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d041      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f0:	d02a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f6:	d824      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025fc:	d008      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002602:	d81e      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260c:	d010      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800260e:	e018      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002610:	4b86      	ldr	r3, [pc, #536]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a85      	ldr	r2, [pc, #532]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261c:	e015      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fabb 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800262e:	e00c      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3320      	adds	r3, #32
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fba6 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002640:	e003      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	74fb      	strb	r3, [r7, #19]
      break;
 8002646:	e000      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002650:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265e:	4973      	ldr	r1, [pc, #460]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002666:	e001      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d041      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002680:	d02a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002686:	d824      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800268c:	d008      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800268e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002692:	d81e      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d010      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800269e:	e018      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a61      	ldr	r2, [pc, #388]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e015      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fa73 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026be:	e00c      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3320      	adds	r3, #32
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fb5e 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d0:	e003      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	74fb      	strb	r3, [r7, #19]
      break;
 80026d6:	e000      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e0:	4b52      	ldr	r3, [pc, #328]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	494f      	ldr	r1, [pc, #316]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a0 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a40      	ldr	r2, [pc, #256]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
 8002730:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274c:	f7fe fd44 	bl	80011d8 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002752:	e009      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fd40 	bl	80011d8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	74fb      	strb	r3, [r7, #19]
        break;
 8002766:	e005      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d15c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d019      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fcff 	bl	80011d8 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027dc:	e00b      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fcfb 	bl	80011d8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	74fb      	strb	r3, [r7, #19]
            break;
 80027f4:	e006      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ec      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002838:	7c7b      	ldrb	r3, [r7, #17]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a9d      	ldr	r2, [pc, #628]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002856:	4b98      	ldr	r3, [pc, #608]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4994      	ldr	r1, [pc, #592]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002878:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 020c 	bic.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	498c      	ldr	r1, [pc, #560]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4983      	ldr	r1, [pc, #524]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	497b      	ldr	r1, [pc, #492]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	4972      	ldr	r1, [pc, #456]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002900:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	496a      	ldr	r1, [pc, #424]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	4961      	ldr	r1, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	4959      	ldr	r1, [pc, #356]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	4950      	ldr	r1, [pc, #320]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	493f      	ldr	r1, [pc, #252]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d028      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d106      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e011      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f8c8 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d028      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	491f      	ldr	r1, [pc, #124]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	e011      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f899 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f867 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	4928      	ldr	r1, [pc, #160]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f844 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	74bb      	strb	r3, [r7, #18]
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3320      	adds	r3, #32
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f925 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bae:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d10d      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
       ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d047      	beq.n	8002c76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e044      	b.n	8002c76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d018      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x86>
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d825      	bhi.n	8002c44 <RCCEx_PLLSAI1_Config+0xa4>
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d002      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x62>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d009      	beq.n	8002c14 <RCCEx_PLLSAI1_Config+0x74>
 8002c00:	e020      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11d      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e01a      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c24:	e013      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c42:	e006      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e004      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	4944      	ldr	r1, [pc, #272]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d17d      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7fe faa6 	bl	80011d8 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c8e:	e009      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c90:	f7fe faa2 	bl	80011d8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d902      	bls.n	8002ca4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca2:	e005      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ef      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d160      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	0211      	lsls	r1, r2, #8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	0912      	lsrs	r2, r2, #4
 8002cd4:	0452      	lsls	r2, r2, #17
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	492a      	ldr	r1, [pc, #168]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	610b      	str	r3, [r1, #16]
 8002cde:	e027      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d112      	bne.n	8002d0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	0211      	lsls	r1, r2, #8
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6912      	ldr	r2, [r2, #16]
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0552      	lsls	r2, r2, #21
 8002d02:	430a      	orrs	r2, r1
 8002d04:	491f      	ldr	r1, [pc, #124]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	610b      	str	r3, [r1, #16]
 8002d0a:	e011      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	0211      	lsls	r1, r2, #8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6952      	ldr	r2, [r2, #20]
 8002d22:	0852      	lsrs	r2, r2, #1
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0652      	lsls	r2, r2, #25
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4916      	ldr	r1, [pc, #88]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fa4c 	bl	80011d8 <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d42:	e009      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d44:	f7fe fa48 	bl	80011d8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d902      	bls.n	8002d58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	73fb      	strb	r3, [r7, #15]
          break;
 8002d56:	e005      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d018      	beq.n	8002dd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002da2:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0203 	and.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d10d      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
       ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dba:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d047      	beq.n	8002e5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	e044      	b.n	8002e5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d018      	beq.n	8002e0e <RCCEx_PLLSAI2_Config+0x86>
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d825      	bhi.n	8002e2c <RCCEx_PLLSAI2_Config+0xa4>
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d002      	beq.n	8002dea <RCCEx_PLLSAI2_Config+0x62>
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d009      	beq.n	8002dfc <RCCEx_PLLSAI2_Config+0x74>
 8002de8:	e020      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dea:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11d      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfa:	e01a      	b.n	8002e32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0c:	e013      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e2a:	e006      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e30:	e004      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e32:	bf00      	nop
 8002e34:	e002      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e36:	bf00      	nop
 8002e38:	e000      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	430b      	orrs	r3, r1
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d167      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e70:	f7fe f9b2 	bl	80011d8 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e76:	e009      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e78:	f7fe f9ae 	bl	80011d8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	73fb      	strb	r3, [r7, #15]
        break;
 8002e8a:	e005      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ef      	bne.n	8002e78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d14a      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6892      	ldr	r2, [r2, #8]
 8002eb4:	0211      	lsls	r1, r2, #8
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68d2      	ldr	r2, [r2, #12]
 8002eba:	0912      	lsrs	r2, r2, #4
 8002ebc:	0452      	lsls	r2, r2, #17
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	491f      	ldr	r1, [pc, #124]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	614b      	str	r3, [r1, #20]
 8002ec6:	e011      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6892      	ldr	r2, [r2, #8]
 8002ed8:	0211      	lsls	r1, r2, #8
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6912      	ldr	r2, [r2, #16]
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	4916      	ldr	r1, [pc, #88]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe f96e 	bl	80011d8 <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002efe:	e009      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f00:	f7fe f96a 	bl	80011d8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	73fb      	strb	r3, [r7, #15]
          break;
 8002f12:	e005      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ef      	beq.n	8002f00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4904      	ldr	r1, [pc, #16]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e095      	b.n	8003082 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
 8002f6e:	e005      	b.n	8002f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd febe 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fbc:	d902      	bls.n	8002fc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e002      	b.n	8002fca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fd2:	d007      	beq.n	8002fe4 <HAL_SPI_Init+0xa0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	ea42 0103 	orr.w	r1, r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f003 0204 	and.w	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b088      	sub	sp, #32
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_SPI_Transmit+0x22>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e158      	b.n	800335e <HAL_SPI_Transmit+0x2d4>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030b4:	f7fe f890 	bl	80011d8 <HAL_GetTick>
 80030b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ce:	e13d      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x52>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030e0:	e134      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	d10f      	bne.n	800314e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	d94b      	bls.n	800320e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_Transmit+0xfa>
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d13e      	bne.n	8003202 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031a8:	e02b      	b.n	8003202 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d112      	bne.n	80031de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031dc:	e011      	b.n	8003202 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031de:	f7fd fffb 	bl	80011d8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d803      	bhi.n	80031f6 <HAL_SPI_Transmit+0x16c>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Transmit+0x172>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003200:	e0a4      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ce      	bne.n	80031aa <HAL_SPI_Transmit+0x120>
 800320c:	e07c      	b.n	8003308 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0x192>
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d170      	bne.n	80032fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d912      	bls.n	800324c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b02      	subs	r3, #2
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800324a:	e058      	b.n	80032fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003272:	e044      	b.n	80032fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d12b      	bne.n	80032da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d912      	bls.n	80032b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b02      	subs	r3, #2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b0:	e025      	b.n	80032fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d8:	e011      	b.n	80032fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032da:	f7fd ff7d 	bl	80011d8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d803      	bhi.n	80032f2 <HAL_SPI_Transmit+0x268>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d102      	bne.n	80032f8 <HAL_SPI_Transmit+0x26e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032fc:	e026      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1b5      	bne.n	8003274 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fcdf 	bl	8003cd0 <SPI_EndRxTxTransaction>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e000      	b.n	800334c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800334a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800335c:	7ffb      	ldrb	r3, [r7, #31]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b088      	sub	sp, #32
 800336a:	af02      	add	r7, sp, #8
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003382:	d112      	bne.n	80033aa <HAL_SPI_Receive+0x44>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10e      	bne.n	80033aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2204      	movs	r2, #4
 8003390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f910 	bl	80035c6 <HAL_SPI_TransmitReceive>
 80033a6:	4603      	mov	r3, r0
 80033a8:	e109      	b.n	80035be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_SPI_Receive+0x52>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e102      	b.n	80035be <HAL_SPI_Receive+0x258>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c0:	f7fd ff0a 	bl	80011d8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033d6:	e0e9      	b.n	80035ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Receive+0x7e>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033e8:	e0e0      	b.n	80035ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2204      	movs	r2, #4
 80033ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003434:	d908      	bls.n	8003448 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e007      	b.n	8003458 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d10f      	bne.n	8003482 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003480:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a8:	d867      	bhi.n	800357a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034aa:	e030      	b.n	800350e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d117      	bne.n	80034ea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f103 020c 	add.w	r2, r3, #12
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034e8:	e011      	b.n	800350e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ea:	f7fd fe75 	bl	80011d8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d803      	bhi.n	8003502 <HAL_SPI_Receive+0x19c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d102      	bne.n	8003508 <HAL_SPI_Receive+0x1a2>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800350c:	e04e      	b.n	80035ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1c8      	bne.n	80034ac <HAL_SPI_Receive+0x146>
 800351a:	e034      	b.n	8003586 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d115      	bne.n	8003556 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	b292      	uxth	r2, r2
 8003536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003554:	e011      	b.n	800357a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003556:	f7fd fe3f 	bl	80011d8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d803      	bhi.n	800356e <HAL_SPI_Receive+0x208>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d102      	bne.n	8003574 <HAL_SPI_Receive+0x20e>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003578:	e018      	b.n	80035ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ca      	bne.n	800351c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fb48 	bl	8003c20 <SPI_EndRxTransaction>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
 80035a8:	e000      	b.n	80035ac <HAL_SPI_Receive+0x246>
  }

error :
 80035aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b08a      	sub	sp, #40	; 0x28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035d4:	2301      	movs	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x26>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e1fb      	b.n	80039e4 <HAL_SPI_TransmitReceive+0x41e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f4:	f7fd fdf0 	bl	80011d8 <HAL_GetTick>
 80035f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003600:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003610:	7efb      	ldrb	r3, [r7, #27]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00e      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x6e>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361c:	d106      	bne.n	800362c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_TransmitReceive+0x66>
 8003626:	7efb      	ldrb	r3, [r7, #27]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d003      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800362c:	2302      	movs	r3, #2
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003632:	e1cd      	b.n	80039d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x80>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x80>
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800364c:	e1c0      	b.n	80039d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b04      	cmp	r3, #4
 8003658:	d003      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2205      	movs	r2, #5
 800365e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a4:	d802      	bhi.n	80036ac <HAL_SPI_TransmitReceive+0xe6>
 80036a6:	8a3b      	ldrh	r3, [r7, #16]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d908      	bls.n	80036be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e007      	b.n	80036ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d007      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f4:	d97c      	bls.n	80037f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x13e>
 80036fe:	8a7b      	ldrh	r3, [r7, #18]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d169      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003728:	e056      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11b      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x1aa>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x1aa>
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	2b01      	cmp	r3, #1
 8003746:	d113      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d11c      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x1f2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037b8:	f7fd fd0e 	bl	80011d8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d807      	bhi.n	80037d8 <HAL_SPI_TransmitReceive+0x212>
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d003      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037d6:	e0fb      	b.n	80039d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1a3      	bne.n	800372a <HAL_SPI_TransmitReceive+0x164>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d19d      	bne.n	800372a <HAL_SPI_TransmitReceive+0x164>
 80037ee:	e0df      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x23a>
 80037f8:	8a7b      	ldrh	r3, [r7, #18]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 80cb 	bne.w	8003996 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d912      	bls.n	8003830 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b02      	subs	r3, #2
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800382e:	e0b2      	b.n	8003996 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003856:	e09e      	b.n	8003996 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d134      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x30a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02f      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x30a>
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	2b01      	cmp	r3, #1
 8003874:	d12c      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d912      	bls.n	80038a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b02      	subs	r3, #2
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a4:	e012      	b.n	80038cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d148      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x3aa>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d042      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d923      	bls.n	800393e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	b292      	uxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b02      	subs	r3, #2
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d81f      	bhi.n	800396c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	e016      	b.n	800396c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f103 020c 	add.w	r2, r3, #12
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003970:	f7fd fc32 	bl	80011d8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397c:	429a      	cmp	r2, r3
 800397e:	d803      	bhi.n	8003988 <HAL_SPI_TransmitReceive+0x3c2>
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d102      	bne.n	800398e <HAL_SPI_TransmitReceive+0x3c8>
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003994:	e01c      	b.n	80039d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f af5b 	bne.w	8003858 <HAL_SPI_TransmitReceive+0x292>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f af54 	bne.w	8003858 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f98b 	bl	8003cd0 <SPI_EndRxTxTransaction>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
 80039cc:	e000      	b.n	80039d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039fc:	f7fd fbec 	bl	80011d8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	4413      	add	r3, r2
 8003a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a0c:	f7fd fbe4 	bl	80011d8 <HAL_GetTick>
 8003a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a12:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	0d1b      	lsrs	r3, r3, #20
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a22:	e054      	b.n	8003ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d050      	beq.n	8003ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a2c:	f7fd fbd4 	bl	80011d8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d902      	bls.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d13d      	bne.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5a:	d111      	bne.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a64:	d004      	beq.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d107      	bne.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a88:	d10f      	bne.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e017      	b.n	8003aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d19b      	bne.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c

08003afc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b0a:	f7fd fb65 	bl	80011d8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b1a:	f7fd fb5d 	bl	80011d8 <HAL_GetTick>
 8003b1e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	0d1b      	lsrs	r3, r3, #20
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b38:	e062      	b.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b40:	d109      	bne.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b54:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d050      	beq.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b5e:	f7fd fb3b 	bl	80011d8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d902      	bls.n	8003b74 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13d      	bne.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8c:	d111      	bne.n	8003bb2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b96:	d004      	beq.n	8003ba2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba0:	d107      	bne.n	8003bb2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	d10f      	bne.n	8003bdc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e010      	b.n	8003c12 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d194      	bne.n	8003b3a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000000c 	.word	0x2000000c

08003c20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c34:	d111      	bne.n	8003c5a <SPI_EndRxTransaction+0x3a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3e:	d004      	beq.n	8003c4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c48:	d107      	bne.n	8003c5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fec1 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e023      	b.n	8003cc8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c88:	d11d      	bne.n	8003cc6 <SPI_EndRxTransaction+0xa6>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d004      	beq.n	8003c9e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9c:	d113      	bne.n	8003cc6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ff26 	bl	8003afc <SPI_WaitFifoStateUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e000      	b.n	8003cc8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff ff07 	bl	8003afc <SPI_WaitFifoStateUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e027      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff fe6c 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e014      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fee0 	bl	8003afc <SPI_WaitFifoStateUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e000      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e040      	b.n	8003df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd f80e 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fb26 	bl	80043ec <UART_SetConfig>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fda4 	bl	8004900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fe2b 	bl	8004a44 <UART_CheckIdleState>
 8003dee:	4603      	mov	r3, r0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	f040 8082 	bne.w	8003f16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_Transmit+0x26>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07a      	b.n	8003f18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x38>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e073      	b.n	8003f18 <HAL_UART_Transmit+0x120>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2221      	movs	r2, #33	; 0x21
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e46:	f7fd f9c7 	bl	80011d8 <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e64:	d108      	bne.n	8003e78 <HAL_UART_Transmit+0x80>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e003      	b.n	8003e80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e88:	e02d      	b.n	8003ee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fe1e 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e039      	b.n	8003f18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e008      	b.n	8003ed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1cb      	bne.n	8003e8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fdea 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e005      	b.n	8003f18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d131      	bne.n	8003f9a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_UART_Receive_IT+0x22>
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e02a      	b.n	8003f9c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Receive_IT+0x34>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e023      	b.n	8003f9c <HAL_UART_Receive_IT+0x7c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <HAL_UART_Receive_IT+0x84>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f88:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fe1d 	bl	8004bd0 <UART_Start_Receive_IT>
 8003f96:	4603      	mov	r3, r0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40008000 	.word	0x40008000

08003fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00e      	beq.n	8004000 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 81ce 	beq.w	8004392 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
      }
      return;
 8003ffe:	e1c8      	b.n	8004392 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80e3 	beq.w	80041ce <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4ba6      	ldr	r3, [pc, #664]	; (80042b0 <HAL_UART_IRQHandler+0x308>)
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80d8 	beq.w	80041ce <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_UART_IRQHandler+0xa2>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_UART_IRQHandler+0xce>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2202      	movs	r2, #2
 8004064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406c:	f043 0204 	orr.w	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_UART_IRQHandler+0xfa>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2204      	movs	r2, #4
 8004090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ce:	f043 0208 	orr.w	r2, r3, #8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_UART_IRQHandler+0x15e>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8142 	beq.w	8004396 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d004      	beq.n	8004156 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d031      	beq.n	80041ba <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fdc2 	bl	8004ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d123      	bne.n	80041b2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	2b00      	cmp	r3, #0
 8004180:	d013      	beq.n	80041aa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a4b      	ldr	r2, [pc, #300]	; (80042b4 <HAL_UART_IRQHandler+0x30c>)
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd f9a1 	bl	80014d6 <HAL_DMA_Abort_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80041a4:	4610      	mov	r0, r2
 80041a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e00f      	b.n	80041ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f908 	bl	80043c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e00b      	b.n	80041ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f904 	bl	80043c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e007      	b.n	80041ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f900 	bl	80043c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80041c8:	e0e5      	b.n	8004396 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ca:	bf00      	nop
    return;
 80041cc:	e0e3      	b.n	8004396 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f040 80a9 	bne.w	800432a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80a3 	beq.w	800432a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 809d 	beq.w	800432a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2210      	movs	r2, #16
 80041f6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d158      	bne.n	80042b8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004210:	893b      	ldrh	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80c1 	beq.w	800439a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800421e:	893a      	ldrh	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	f080 80ba 	bcs.w	800439a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	893a      	ldrh	r2, [r7, #8]
 800422a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d12a      	bne.n	8004294 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0210 	bic.w	r2, r2, #16
 8004288:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd f8e3 	bl	800145a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f893 	bl	80043d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042ae:	e074      	b.n	800439a <HAL_UART_IRQHandler+0x3f2>
 80042b0:	04000120 	.word	0x04000120
 80042b4:	08004d3f 	.word	0x08004d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d060      	beq.n	800439e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f856 	bl	80043d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004328:	e039      	b.n	800439e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_UART_IRQHandler+0x3a8>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004346:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fdff 	bl	8004f4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800434e:	e029      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
    }
    return;
 8004374:	e015      	b.n	80043a2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fced 	bl	8004d6a <UART_EndTransmit_IT>
    return;
 8004390:	e008      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004392:	bf00      	nop
 8004394:	e006      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004396:	bf00      	nop
 8004398:	e004      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80043a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop

080043ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4313      	orrs	r3, r2
 800440e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4bad      	ldr	r3, [pc, #692]	; (80046cc <UART_SetConfig+0x2e0>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	69f9      	ldr	r1, [r7, #28]
 8004420:	430b      	orrs	r3, r1
 8004422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4aa2      	ldr	r2, [pc, #648]	; (80046d0 <UART_SetConfig+0x2e4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a99      	ldr	r2, [pc, #612]	; (80046d4 <UART_SetConfig+0x2e8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d121      	bne.n	80044b6 <UART_SetConfig+0xca>
 8004472:	4b99      	ldr	r3, [pc, #612]	; (80046d8 <UART_SetConfig+0x2ec>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b03      	cmp	r3, #3
 800447e:	d817      	bhi.n	80044b0 <UART_SetConfig+0xc4>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x9c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	08004499 	.word	0x08004499
 800448c:	080044a5 	.word	0x080044a5
 8004490:	0800449f 	.word	0x0800449f
 8004494:	080044ab 	.word	0x080044ab
 8004498:	2301      	movs	r3, #1
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e0e7      	b.n	800466e <UART_SetConfig+0x282>
 800449e:	2302      	movs	r3, #2
 80044a0:	76fb      	strb	r3, [r7, #27]
 80044a2:	e0e4      	b.n	800466e <UART_SetConfig+0x282>
 80044a4:	2304      	movs	r3, #4
 80044a6:	76fb      	strb	r3, [r7, #27]
 80044a8:	e0e1      	b.n	800466e <UART_SetConfig+0x282>
 80044aa:	2308      	movs	r3, #8
 80044ac:	76fb      	strb	r3, [r7, #27]
 80044ae:	e0de      	b.n	800466e <UART_SetConfig+0x282>
 80044b0:	2310      	movs	r3, #16
 80044b2:	76fb      	strb	r3, [r7, #27]
 80044b4:	e0db      	b.n	800466e <UART_SetConfig+0x282>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a88      	ldr	r2, [pc, #544]	; (80046dc <UART_SetConfig+0x2f0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d132      	bne.n	8004526 <UART_SetConfig+0x13a>
 80044c0:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <UART_SetConfig+0x2ec>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d828      	bhi.n	8004520 <UART_SetConfig+0x134>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0xe8>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004521 	.word	0x08004521
 80044e4:	08004515 	.word	0x08004515
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004521 	.word	0x08004521
 80044f4:	0800450f 	.word	0x0800450f
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004521 	.word	0x08004521
 8004504:	0800451b 	.word	0x0800451b
 8004508:	2300      	movs	r3, #0
 800450a:	76fb      	strb	r3, [r7, #27]
 800450c:	e0af      	b.n	800466e <UART_SetConfig+0x282>
 800450e:	2302      	movs	r3, #2
 8004510:	76fb      	strb	r3, [r7, #27]
 8004512:	e0ac      	b.n	800466e <UART_SetConfig+0x282>
 8004514:	2304      	movs	r3, #4
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e0a9      	b.n	800466e <UART_SetConfig+0x282>
 800451a:	2308      	movs	r3, #8
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e0a6      	b.n	800466e <UART_SetConfig+0x282>
 8004520:	2310      	movs	r3, #16
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e0a3      	b.n	800466e <UART_SetConfig+0x282>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6d      	ldr	r2, [pc, #436]	; (80046e0 <UART_SetConfig+0x2f4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d120      	bne.n	8004572 <UART_SetConfig+0x186>
 8004530:	4b69      	ldr	r3, [pc, #420]	; (80046d8 <UART_SetConfig+0x2ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800453a:	2b30      	cmp	r3, #48	; 0x30
 800453c:	d013      	beq.n	8004566 <UART_SetConfig+0x17a>
 800453e:	2b30      	cmp	r3, #48	; 0x30
 8004540:	d814      	bhi.n	800456c <UART_SetConfig+0x180>
 8004542:	2b20      	cmp	r3, #32
 8004544:	d009      	beq.n	800455a <UART_SetConfig+0x16e>
 8004546:	2b20      	cmp	r3, #32
 8004548:	d810      	bhi.n	800456c <UART_SetConfig+0x180>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <UART_SetConfig+0x168>
 800454e:	2b10      	cmp	r3, #16
 8004550:	d006      	beq.n	8004560 <UART_SetConfig+0x174>
 8004552:	e00b      	b.n	800456c <UART_SetConfig+0x180>
 8004554:	2300      	movs	r3, #0
 8004556:	76fb      	strb	r3, [r7, #27]
 8004558:	e089      	b.n	800466e <UART_SetConfig+0x282>
 800455a:	2302      	movs	r3, #2
 800455c:	76fb      	strb	r3, [r7, #27]
 800455e:	e086      	b.n	800466e <UART_SetConfig+0x282>
 8004560:	2304      	movs	r3, #4
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e083      	b.n	800466e <UART_SetConfig+0x282>
 8004566:	2308      	movs	r3, #8
 8004568:	76fb      	strb	r3, [r7, #27]
 800456a:	e080      	b.n	800466e <UART_SetConfig+0x282>
 800456c:	2310      	movs	r3, #16
 800456e:	76fb      	strb	r3, [r7, #27]
 8004570:	e07d      	b.n	800466e <UART_SetConfig+0x282>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5b      	ldr	r2, [pc, #364]	; (80046e4 <UART_SetConfig+0x2f8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d120      	bne.n	80045be <UART_SetConfig+0x1d2>
 800457c:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <UART_SetConfig+0x2ec>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004586:	2bc0      	cmp	r3, #192	; 0xc0
 8004588:	d013      	beq.n	80045b2 <UART_SetConfig+0x1c6>
 800458a:	2bc0      	cmp	r3, #192	; 0xc0
 800458c:	d814      	bhi.n	80045b8 <UART_SetConfig+0x1cc>
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d009      	beq.n	80045a6 <UART_SetConfig+0x1ba>
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d810      	bhi.n	80045b8 <UART_SetConfig+0x1cc>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <UART_SetConfig+0x1b4>
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d006      	beq.n	80045ac <UART_SetConfig+0x1c0>
 800459e:	e00b      	b.n	80045b8 <UART_SetConfig+0x1cc>
 80045a0:	2300      	movs	r3, #0
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	e063      	b.n	800466e <UART_SetConfig+0x282>
 80045a6:	2302      	movs	r3, #2
 80045a8:	76fb      	strb	r3, [r7, #27]
 80045aa:	e060      	b.n	800466e <UART_SetConfig+0x282>
 80045ac:	2304      	movs	r3, #4
 80045ae:	76fb      	strb	r3, [r7, #27]
 80045b0:	e05d      	b.n	800466e <UART_SetConfig+0x282>
 80045b2:	2308      	movs	r3, #8
 80045b4:	76fb      	strb	r3, [r7, #27]
 80045b6:	e05a      	b.n	800466e <UART_SetConfig+0x282>
 80045b8:	2310      	movs	r3, #16
 80045ba:	76fb      	strb	r3, [r7, #27]
 80045bc:	e057      	b.n	800466e <UART_SetConfig+0x282>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a49      	ldr	r2, [pc, #292]	; (80046e8 <UART_SetConfig+0x2fc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d125      	bne.n	8004614 <UART_SetConfig+0x228>
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <UART_SetConfig+0x2ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d6:	d017      	beq.n	8004608 <UART_SetConfig+0x21c>
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045dc:	d817      	bhi.n	800460e <UART_SetConfig+0x222>
 80045de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e2:	d00b      	beq.n	80045fc <UART_SetConfig+0x210>
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d811      	bhi.n	800460e <UART_SetConfig+0x222>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <UART_SetConfig+0x20a>
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f2:	d006      	beq.n	8004602 <UART_SetConfig+0x216>
 80045f4:	e00b      	b.n	800460e <UART_SetConfig+0x222>
 80045f6:	2300      	movs	r3, #0
 80045f8:	76fb      	strb	r3, [r7, #27]
 80045fa:	e038      	b.n	800466e <UART_SetConfig+0x282>
 80045fc:	2302      	movs	r3, #2
 80045fe:	76fb      	strb	r3, [r7, #27]
 8004600:	e035      	b.n	800466e <UART_SetConfig+0x282>
 8004602:	2304      	movs	r3, #4
 8004604:	76fb      	strb	r3, [r7, #27]
 8004606:	e032      	b.n	800466e <UART_SetConfig+0x282>
 8004608:	2308      	movs	r3, #8
 800460a:	76fb      	strb	r3, [r7, #27]
 800460c:	e02f      	b.n	800466e <UART_SetConfig+0x282>
 800460e:	2310      	movs	r3, #16
 8004610:	76fb      	strb	r3, [r7, #27]
 8004612:	e02c      	b.n	800466e <UART_SetConfig+0x282>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <UART_SetConfig+0x2e4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d125      	bne.n	800466a <UART_SetConfig+0x27e>
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <UART_SetConfig+0x2ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462c:	d017      	beq.n	800465e <UART_SetConfig+0x272>
 800462e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004632:	d817      	bhi.n	8004664 <UART_SetConfig+0x278>
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004638:	d00b      	beq.n	8004652 <UART_SetConfig+0x266>
 800463a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463e:	d811      	bhi.n	8004664 <UART_SetConfig+0x278>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <UART_SetConfig+0x260>
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	d006      	beq.n	8004658 <UART_SetConfig+0x26c>
 800464a:	e00b      	b.n	8004664 <UART_SetConfig+0x278>
 800464c:	2300      	movs	r3, #0
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	e00d      	b.n	800466e <UART_SetConfig+0x282>
 8004652:	2302      	movs	r3, #2
 8004654:	76fb      	strb	r3, [r7, #27]
 8004656:	e00a      	b.n	800466e <UART_SetConfig+0x282>
 8004658:	2304      	movs	r3, #4
 800465a:	76fb      	strb	r3, [r7, #27]
 800465c:	e007      	b.n	800466e <UART_SetConfig+0x282>
 800465e:	2308      	movs	r3, #8
 8004660:	76fb      	strb	r3, [r7, #27]
 8004662:	e004      	b.n	800466e <UART_SetConfig+0x282>
 8004664:	2310      	movs	r3, #16
 8004666:	76fb      	strb	r3, [r7, #27]
 8004668:	e001      	b.n	800466e <UART_SetConfig+0x282>
 800466a:	2310      	movs	r3, #16
 800466c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <UART_SetConfig+0x2e4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	f040 8087 	bne.w	8004788 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800467a:	7efb      	ldrb	r3, [r7, #27]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d837      	bhi.n	80046f0 <UART_SetConfig+0x304>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <UART_SetConfig+0x29c>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046f1 	.word	0x080046f1
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046f1 	.word	0x080046f1
 8004698:	080046bb 	.word	0x080046bb
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	080046f1 	.word	0x080046f1
 80046a8:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7fd ff02 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80046b0:	6178      	str	r0, [r7, #20]
        break;
 80046b2:	e022      	b.n	80046fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <UART_SetConfig+0x300>)
 80046b6:	617b      	str	r3, [r7, #20]
        break;
 80046b8:	e01f      	b.n	80046fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fd fe63 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 80046be:	6178      	str	r0, [r7, #20]
        break;
 80046c0:	e01b      	b.n	80046fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	617b      	str	r3, [r7, #20]
        break;
 80046c8:	e017      	b.n	80046fa <UART_SetConfig+0x30e>
 80046ca:	bf00      	nop
 80046cc:	efff69f3 	.word	0xefff69f3
 80046d0:	40008000 	.word	0x40008000
 80046d4:	40013800 	.word	0x40013800
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40004400 	.word	0x40004400
 80046e0:	40004800 	.word	0x40004800
 80046e4:	40004c00 	.word	0x40004c00
 80046e8:	40005000 	.word	0x40005000
 80046ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	76bb      	strb	r3, [r7, #26]
        break;
 80046f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80f1 	beq.w	80048e4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	429a      	cmp	r2, r3
 8004710:	d305      	bcc.n	800471e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	429a      	cmp	r2, r3
 800471c:	d902      	bls.n	8004724 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	76bb      	strb	r3, [r7, #26]
 8004722:	e0df      	b.n	80048e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	4618      	mov	r0, r3
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	020b      	lsls	r3, r1, #8
 8004736:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800473a:	0202      	lsls	r2, r0, #8
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	6849      	ldr	r1, [r1, #4]
 8004740:	0849      	lsrs	r1, r1, #1
 8004742:	4608      	mov	r0, r1
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	1814      	adds	r4, r2, r0
 800474a:	eb43 0501 	adc.w	r5, r3, r1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	f7fb fd88 	bl	8000270 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d308      	bcc.n	8004782 <UART_SetConfig+0x396>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d204      	bcs.n	8004782 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e0b0      	b.n	80048e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	76bb      	strb	r3, [r7, #26]
 8004786:	e0ad      	b.n	80048e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004790:	d15c      	bne.n	800484c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004792:	7efb      	ldrb	r3, [r7, #27]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d828      	bhi.n	80047ea <UART_SetConfig+0x3fe>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x3b4>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	080047eb 	.word	0x080047eb
 80047b0:	080047db 	.word	0x080047db
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	080047eb 	.word	0x080047eb
 80047bc:	080047eb 	.word	0x080047eb
 80047c0:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fd fe76 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80047c8:	6178      	str	r0, [r7, #20]
        break;
 80047ca:	e013      	b.n	80047f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7fd fe88 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e00f      	b.n	80047f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b49      	ldr	r3, [pc, #292]	; (80048fc <UART_SetConfig+0x510>)
 80047d6:	617b      	str	r3, [r7, #20]
        break;
 80047d8:	e00c      	b.n	80047f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fd fdd3 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 80047de:	6178      	str	r0, [r7, #20]
        break;
 80047e0:	e008      	b.n	80047f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	e004      	b.n	80047f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	76bb      	strb	r3, [r7, #26]
        break;
 80047f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d074      	beq.n	80048e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005a      	lsls	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	b29b      	uxth	r3, r3
 8004810:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b0f      	cmp	r3, #15
 8004816:	d916      	bls.n	8004846 <UART_SetConfig+0x45a>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481e:	d212      	bcs.n	8004846 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f023 030f 	bic.w	r3, r3, #15
 8004828:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	b29a      	uxth	r2, r3
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	4313      	orrs	r3, r2
 800483a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	89fa      	ldrh	r2, [r7, #14]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e04e      	b.n	80048e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76bb      	strb	r3, [r7, #26]
 800484a:	e04b      	b.n	80048e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800484c:	7efb      	ldrb	r3, [r7, #27]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d827      	bhi.n	80048a2 <UART_SetConfig+0x4b6>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x46c>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	0800487d 	.word	0x0800487d
 800485c:	08004885 	.word	0x08004885
 8004860:	0800488d 	.word	0x0800488d
 8004864:	080048a3 	.word	0x080048a3
 8004868:	08004893 	.word	0x08004893
 800486c:	080048a3 	.word	0x080048a3
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048a3 	.word	0x080048a3
 8004878:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7fd fe1a 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8004880:	6178      	str	r0, [r7, #20]
        break;
 8004882:	e013      	b.n	80048ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7fd fe2c 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8004888:	6178      	str	r0, [r7, #20]
        break;
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <UART_SetConfig+0x510>)
 800488e:	617b      	str	r3, [r7, #20]
        break;
 8004890:	e00c      	b.n	80048ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fd fd77 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8004896:	6178      	str	r0, [r7, #20]
        break;
 8004898:	e008      	b.n	80048ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e004      	b.n	80048ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	76bb      	strb	r3, [r7, #26]
        break;
 80048aa:	bf00      	nop
    }

    if (pclk != 0U)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085a      	lsrs	r2, r3, #1
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	441a      	add	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d908      	bls.n	80048e0 <UART_SetConfig+0x4f4>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d204      	bcs.n	80048e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	e001      	b.n	80048e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bdb0      	pop	{r4, r5, r7, pc}
 80048fa:	bf00      	nop
 80048fc:	00f42400 	.word	0x00f42400

08004900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fe:	d10a      	bne.n	8004a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a54:	f7fc fbc0 	bl	80011d8 <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d10e      	bne.n	8004a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f82d 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e023      	b.n	8004ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d10e      	bne.n	8004ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f817 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00d      	b.n	8004ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae6:	e05e      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d05a      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7fc fb72 	bl	80011d8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11b      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e043      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02c      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5a:	d124      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b64:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e00f      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d091      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d10e      	bne.n	8004c22 <UART_Start_Receive_IT+0x52>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <UART_Start_Receive_IT+0x48>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c16:	e02d      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	22ff      	movs	r2, #255	; 0xff
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c20:	e028      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10d      	bne.n	8004c46 <UART_Start_Receive_IT+0x76>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <UART_Start_Receive_IT+0x6c>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3a:	e01b      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	227f      	movs	r2, #127	; 0x7f
 8004c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c44:	e016      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4e:	d10d      	bne.n	8004c6c <UART_Start_Receive_IT+0x9c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <UART_Start_Receive_IT+0x92>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	227f      	movs	r2, #127	; 0x7f
 8004c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c60:	e008      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	223f      	movs	r2, #63	; 0x3f
 8004c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c6a:	e003      	b.n	8004c74 <UART_Start_Receive_IT+0xa4>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2222      	movs	r2, #34	; 0x22
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d107      	bne.n	8004cac <UART_Start_Receive_IT+0xdc>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <UART_Start_Receive_IT+0x108>)
 8004ca8:	665a      	str	r2, [r3, #100]	; 0x64
 8004caa:	e002      	b.n	8004cb2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a0b      	ldr	r2, [pc, #44]	; (8004cdc <UART_Start_Receive_IT+0x10c>)
 8004cb0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004cc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	08004e75 	.word	0x08004e75
 8004cdc:	08004d9d 	.word	0x08004d9d

08004ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cf6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0210 	bic.w	r2, r2, #16
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff fb2f 	bl	80043c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fb0c 	bl	80043ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004daa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db0:	2b22      	cmp	r3, #34	; 0x22
 8004db2:	d151      	bne.n	8004e58 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dba:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dbc:	89bb      	ldrh	r3, [r7, #12]
 8004dbe:	b2d9      	uxtb	r1, r3
 8004dc0:	89fb      	ldrh	r3, [r7, #14]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	400a      	ands	r2, r1
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13a      	bne.n	8004e6c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10f      	bne.n	8004e4a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0210 	bic.w	r2, r2, #16
 8004e38:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fac6 	bl	80043d4 <HAL_UARTEx_RxEventCallback>
 8004e48:	e002      	b.n	8004e50 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fb fd92 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e56:	e009      	b.n	8004e6c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	8b1b      	ldrh	r3, [r3, #24]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0208 	orr.w	r2, r2, #8
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	831a      	strh	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e88:	2b22      	cmp	r3, #34	; 0x22
 8004e8a:	d151      	bne.n	8004f30 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e9a:	89ba      	ldrh	r2, [r7, #12]
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d13a      	bne.n	8004f44 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004edc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10f      	bne.n	8004f22 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fa5a 	bl	80043d4 <HAL_UARTEx_RxEventCallback>
 8004f20:	e002      	b.n	8004f28 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fb fd26 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f2e:	e009      	b.n	8004f44 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	8b1b      	ldrh	r3, [r3, #24]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0208 	orr.w	r2, r2, #8
 8004f40:	b292      	uxth	r2, r2
 8004f42:	831a      	strh	r2, [r3, #24]
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e03c      	b.n	8004fec <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fb ff94 	bl	8000eb4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f85b 	bl	8005060 <USART_SetConfig>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01b      	b.n	8004fec <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fc2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f991 	bl	800530c <USART_CheckIdleState>
 8004fea:	4603      	mov	r3, r0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005004:	e018      	b.n	8005038 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d014      	beq.n	8005038 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fc f8e3 	bl	80011d8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <USART_WaitOnFlagUntilTimeout+0x30>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e00f      	b.n	8005058 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	429a      	cmp	r2, r3
 8005054:	d0d7      	beq.n	8005006 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b9a      	ldr	r3, [pc, #616]	; (80052f8 <USART_SetConfig+0x298>)
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	430b      	orrs	r3, r1
 8005098:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800509a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800509e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a87      	ldr	r2, [pc, #540]	; (80052fc <USART_SetConfig+0x29c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d121      	bne.n	8005126 <USART_SetConfig+0xc6>
 80050e2:	4b87      	ldr	r3, [pc, #540]	; (8005300 <USART_SetConfig+0x2a0>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d817      	bhi.n	8005120 <USART_SetConfig+0xc0>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <USART_SetConfig+0x98>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005115 	.word	0x08005115
 8005100:	0800510f 	.word	0x0800510f
 8005104:	0800511b 	.word	0x0800511b
 8005108:	2301      	movs	r3, #1
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e06b      	b.n	80051e6 <USART_SetConfig+0x186>
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e068      	b.n	80051e6 <USART_SetConfig+0x186>
 8005114:	2304      	movs	r3, #4
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e065      	b.n	80051e6 <USART_SetConfig+0x186>
 800511a:	2308      	movs	r3, #8
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e062      	b.n	80051e6 <USART_SetConfig+0x186>
 8005120:	2310      	movs	r3, #16
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e05f      	b.n	80051e6 <USART_SetConfig+0x186>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a76      	ldr	r2, [pc, #472]	; (8005304 <USART_SetConfig+0x2a4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d132      	bne.n	8005196 <USART_SetConfig+0x136>
 8005130:	4b73      	ldr	r3, [pc, #460]	; (8005300 <USART_SetConfig+0x2a0>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d828      	bhi.n	8005190 <USART_SetConfig+0x130>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <USART_SetConfig+0xe4>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005179 	.word	0x08005179
 8005148:	08005191 	.word	0x08005191
 800514c:	08005191 	.word	0x08005191
 8005150:	08005191 	.word	0x08005191
 8005154:	08005185 	.word	0x08005185
 8005158:	08005191 	.word	0x08005191
 800515c:	08005191 	.word	0x08005191
 8005160:	08005191 	.word	0x08005191
 8005164:	0800517f 	.word	0x0800517f
 8005168:	08005191 	.word	0x08005191
 800516c:	08005191 	.word	0x08005191
 8005170:	08005191 	.word	0x08005191
 8005174:	0800518b 	.word	0x0800518b
 8005178:	2300      	movs	r3, #0
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e033      	b.n	80051e6 <USART_SetConfig+0x186>
 800517e:	2302      	movs	r3, #2
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e030      	b.n	80051e6 <USART_SetConfig+0x186>
 8005184:	2304      	movs	r3, #4
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e02d      	b.n	80051e6 <USART_SetConfig+0x186>
 800518a:	2308      	movs	r3, #8
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e02a      	b.n	80051e6 <USART_SetConfig+0x186>
 8005190:	2310      	movs	r3, #16
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e027      	b.n	80051e6 <USART_SetConfig+0x186>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5b      	ldr	r2, [pc, #364]	; (8005308 <USART_SetConfig+0x2a8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d120      	bne.n	80051e2 <USART_SetConfig+0x182>
 80051a0:	4b57      	ldr	r3, [pc, #348]	; (8005300 <USART_SetConfig+0x2a0>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051aa:	2b30      	cmp	r3, #48	; 0x30
 80051ac:	d013      	beq.n	80051d6 <USART_SetConfig+0x176>
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d814      	bhi.n	80051dc <USART_SetConfig+0x17c>
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d009      	beq.n	80051ca <USART_SetConfig+0x16a>
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d810      	bhi.n	80051dc <USART_SetConfig+0x17c>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <USART_SetConfig+0x164>
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d006      	beq.n	80051d0 <USART_SetConfig+0x170>
 80051c2:	e00b      	b.n	80051dc <USART_SetConfig+0x17c>
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e00d      	b.n	80051e6 <USART_SetConfig+0x186>
 80051ca:	2302      	movs	r3, #2
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e00a      	b.n	80051e6 <USART_SetConfig+0x186>
 80051d0:	2304      	movs	r3, #4
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e007      	b.n	80051e6 <USART_SetConfig+0x186>
 80051d6:	2308      	movs	r3, #8
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e004      	b.n	80051e6 <USART_SetConfig+0x186>
 80051dc:	2310      	movs	r3, #16
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e001      	b.n	80051e6 <USART_SetConfig+0x186>
 80051e2:	2310      	movs	r3, #16
 80051e4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d85a      	bhi.n	80052a2 <USART_SetConfig+0x242>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <USART_SetConfig+0x194>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005237 	.word	0x08005237
 80051fc:	08005255 	.word	0x08005255
 8005200:	080052a3 	.word	0x080052a3
 8005204:	0800526f 	.word	0x0800526f
 8005208:	080052a3 	.word	0x080052a3
 800520c:	080052a3 	.word	0x080052a3
 8005210:	080052a3 	.word	0x080052a3
 8005214:	0800528d 	.word	0x0800528d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fd f94c 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800521c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	005a      	lsls	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005234:	e038      	b.n	80052a8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005236:	f7fd f953 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 800523a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	005a      	lsls	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	441a      	add	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005252:	e029      	b.n	80052a8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800525e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6852      	ldr	r2, [r2, #4]
 8005266:	fbb3 f3f2 	udiv	r3, r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800526c:	e01c      	b.n	80052a8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800526e:	f7fd f889 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8005272:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	005a      	lsls	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	441a      	add	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800528a:	e00d      	b.n	80052a8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80052a0:	e002      	b.n	80052a8 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	77bb      	strb	r3, [r7, #30]
      break;
 80052a6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d916      	bls.n	80052dc <USART_SetConfig+0x27c>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d212      	bcs.n	80052dc <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f023 030f 	bic.w	r3, r3, #15
 80052be:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	89fa      	ldrh	r2, [r7, #14]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e001      	b.n	80052e0 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80052ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	efff69f3 	.word	0xefff69f3
 80052fc:	40013800 	.word	0x40013800
 8005300:	40021000 	.word	0x40021000
 8005304:	40004400 	.word	0x40004400
 8005308:	40004800 	.word	0x40004800

0800530c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800531a:	f7fb ff5d 	bl	80011d8 <HAL_GetTick>
 800531e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10e      	bne.n	800534c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800532e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fe59 	bl	8004ff4 <USART_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e01e      	b.n	800538a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d10e      	bne.n	8005378 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800535a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe43 	bl	8004ff4 <USART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e008      	b.n	800538a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000018 	.word	0x20000018

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f000 fc4e 	bl	8005c54 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	08005cf8 	.word	0x08005cf8
 80053dc:	08005cf8 	.word	0x08005cf8
 80053e0:	08005cf8 	.word	0x08005cf8
 80053e4:	08005cfc 	.word	0x08005cfc

080053e8 <memset>:
 80053e8:	4402      	add	r2, r0
 80053ea:	4603      	mov	r3, r0
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d100      	bne.n	80053f2 <memset+0xa>
 80053f0:	4770      	bx	lr
 80053f2:	f803 1b01 	strb.w	r1, [r3], #1
 80053f6:	e7f9      	b.n	80053ec <memset+0x4>

080053f8 <siprintf>:
 80053f8:	b40e      	push	{r1, r2, r3}
 80053fa:	b500      	push	{lr}
 80053fc:	b09c      	sub	sp, #112	; 0x70
 80053fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005400:	9002      	str	r0, [sp, #8]
 8005402:	9006      	str	r0, [sp, #24]
 8005404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005408:	4809      	ldr	r0, [pc, #36]	; (8005430 <siprintf+0x38>)
 800540a:	9107      	str	r1, [sp, #28]
 800540c:	9104      	str	r1, [sp, #16]
 800540e:	4909      	ldr	r1, [pc, #36]	; (8005434 <siprintf+0x3c>)
 8005410:	f853 2b04 	ldr.w	r2, [r3], #4
 8005414:	9105      	str	r1, [sp, #20]
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	a902      	add	r1, sp, #8
 800541c:	f000 f868 	bl	80054f0 <_svfiprintf_r>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	b01c      	add	sp, #112	; 0x70
 8005428:	f85d eb04 	ldr.w	lr, [sp], #4
 800542c:	b003      	add	sp, #12
 800542e:	4770      	bx	lr
 8005430:	20000018 	.word	0x20000018
 8005434:	ffff0208 	.word	0xffff0208

08005438 <__ssputs_r>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	688e      	ldr	r6, [r1, #8]
 800543e:	429e      	cmp	r6, r3
 8005440:	4682      	mov	sl, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4690      	mov	r8, r2
 8005446:	461f      	mov	r7, r3
 8005448:	d838      	bhi.n	80054bc <__ssputs_r+0x84>
 800544a:	898a      	ldrh	r2, [r1, #12]
 800544c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005450:	d032      	beq.n	80054b8 <__ssputs_r+0x80>
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	6909      	ldr	r1, [r1, #16]
 8005456:	eba5 0901 	sub.w	r9, r5, r1
 800545a:	6965      	ldr	r5, [r4, #20]
 800545c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005464:	3301      	adds	r3, #1
 8005466:	444b      	add	r3, r9
 8005468:	106d      	asrs	r5, r5, #1
 800546a:	429d      	cmp	r5, r3
 800546c:	bf38      	it	cc
 800546e:	461d      	movcc	r5, r3
 8005470:	0553      	lsls	r3, r2, #21
 8005472:	d531      	bpl.n	80054d8 <__ssputs_r+0xa0>
 8005474:	4629      	mov	r1, r5
 8005476:	f000 fb47 	bl	8005b08 <_malloc_r>
 800547a:	4606      	mov	r6, r0
 800547c:	b950      	cbnz	r0, 8005494 <__ssputs_r+0x5c>
 800547e:	230c      	movs	r3, #12
 8005480:	f8ca 3000 	str.w	r3, [sl]
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	6921      	ldr	r1, [r4, #16]
 8005496:	464a      	mov	r2, r9
 8005498:	f000 fabe 	bl	8005a18 <memcpy>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	6126      	str	r6, [r4, #16]
 80054aa:	6165      	str	r5, [r4, #20]
 80054ac:	444e      	add	r6, r9
 80054ae:	eba5 0509 	sub.w	r5, r5, r9
 80054b2:	6026      	str	r6, [r4, #0]
 80054b4:	60a5      	str	r5, [r4, #8]
 80054b6:	463e      	mov	r6, r7
 80054b8:	42be      	cmp	r6, r7
 80054ba:	d900      	bls.n	80054be <__ssputs_r+0x86>
 80054bc:	463e      	mov	r6, r7
 80054be:	4632      	mov	r2, r6
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4641      	mov	r1, r8
 80054c4:	f000 fab6 	bl	8005a34 <memmove>
 80054c8:	68a3      	ldr	r3, [r4, #8]
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	1b9b      	subs	r3, r3, r6
 80054ce:	4432      	add	r2, r6
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	2000      	movs	r0, #0
 80054d6:	e7db      	b.n	8005490 <__ssputs_r+0x58>
 80054d8:	462a      	mov	r2, r5
 80054da:	f000 fb6f 	bl	8005bbc <_realloc_r>
 80054de:	4606      	mov	r6, r0
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d1e1      	bne.n	80054a8 <__ssputs_r+0x70>
 80054e4:	6921      	ldr	r1, [r4, #16]
 80054e6:	4650      	mov	r0, sl
 80054e8:	f000 fabe 	bl	8005a68 <_free_r>
 80054ec:	e7c7      	b.n	800547e <__ssputs_r+0x46>
	...

080054f0 <_svfiprintf_r>:
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	4698      	mov	r8, r3
 80054f6:	898b      	ldrh	r3, [r1, #12]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	b09d      	sub	sp, #116	; 0x74
 80054fc:	4607      	mov	r7, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	4614      	mov	r4, r2
 8005502:	d50e      	bpl.n	8005522 <_svfiprintf_r+0x32>
 8005504:	690b      	ldr	r3, [r1, #16]
 8005506:	b963      	cbnz	r3, 8005522 <_svfiprintf_r+0x32>
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	f000 fafd 	bl	8005b08 <_malloc_r>
 800550e:	6028      	str	r0, [r5, #0]
 8005510:	6128      	str	r0, [r5, #16]
 8005512:	b920      	cbnz	r0, 800551e <_svfiprintf_r+0x2e>
 8005514:	230c      	movs	r3, #12
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	e0d1      	b.n	80056c2 <_svfiprintf_r+0x1d2>
 800551e:	2340      	movs	r3, #64	; 0x40
 8005520:	616b      	str	r3, [r5, #20]
 8005522:	2300      	movs	r3, #0
 8005524:	9309      	str	r3, [sp, #36]	; 0x24
 8005526:	2320      	movs	r3, #32
 8005528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005530:	2330      	movs	r3, #48	; 0x30
 8005532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056dc <_svfiprintf_r+0x1ec>
 8005536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800553a:	f04f 0901 	mov.w	r9, #1
 800553e:	4623      	mov	r3, r4
 8005540:	469a      	mov	sl, r3
 8005542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005546:	b10a      	cbz	r2, 800554c <_svfiprintf_r+0x5c>
 8005548:	2a25      	cmp	r2, #37	; 0x25
 800554a:	d1f9      	bne.n	8005540 <_svfiprintf_r+0x50>
 800554c:	ebba 0b04 	subs.w	fp, sl, r4
 8005550:	d00b      	beq.n	800556a <_svfiprintf_r+0x7a>
 8005552:	465b      	mov	r3, fp
 8005554:	4622      	mov	r2, r4
 8005556:	4629      	mov	r1, r5
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff ff6d 	bl	8005438 <__ssputs_r>
 800555e:	3001      	adds	r0, #1
 8005560:	f000 80aa 	beq.w	80056b8 <_svfiprintf_r+0x1c8>
 8005564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005566:	445a      	add	r2, fp
 8005568:	9209      	str	r2, [sp, #36]	; 0x24
 800556a:	f89a 3000 	ldrb.w	r3, [sl]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80a2 	beq.w	80056b8 <_svfiprintf_r+0x1c8>
 8005574:	2300      	movs	r3, #0
 8005576:	f04f 32ff 	mov.w	r2, #4294967295
 800557a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557e:	f10a 0a01 	add.w	sl, sl, #1
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	9307      	str	r3, [sp, #28]
 8005586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800558a:	931a      	str	r3, [sp, #104]	; 0x68
 800558c:	4654      	mov	r4, sl
 800558e:	2205      	movs	r2, #5
 8005590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005594:	4851      	ldr	r0, [pc, #324]	; (80056dc <_svfiprintf_r+0x1ec>)
 8005596:	f7fa fe1b 	bl	80001d0 <memchr>
 800559a:	9a04      	ldr	r2, [sp, #16]
 800559c:	b9d8      	cbnz	r0, 80055d6 <_svfiprintf_r+0xe6>
 800559e:	06d0      	lsls	r0, r2, #27
 80055a0:	bf44      	itt	mi
 80055a2:	2320      	movmi	r3, #32
 80055a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a8:	0711      	lsls	r1, r2, #28
 80055aa:	bf44      	itt	mi
 80055ac:	232b      	movmi	r3, #43	; 0x2b
 80055ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b2:	f89a 3000 	ldrb.w	r3, [sl]
 80055b6:	2b2a      	cmp	r3, #42	; 0x2a
 80055b8:	d015      	beq.n	80055e6 <_svfiprintf_r+0xf6>
 80055ba:	9a07      	ldr	r2, [sp, #28]
 80055bc:	4654      	mov	r4, sl
 80055be:	2000      	movs	r0, #0
 80055c0:	f04f 0c0a 	mov.w	ip, #10
 80055c4:	4621      	mov	r1, r4
 80055c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ca:	3b30      	subs	r3, #48	; 0x30
 80055cc:	2b09      	cmp	r3, #9
 80055ce:	d94e      	bls.n	800566e <_svfiprintf_r+0x17e>
 80055d0:	b1b0      	cbz	r0, 8005600 <_svfiprintf_r+0x110>
 80055d2:	9207      	str	r2, [sp, #28]
 80055d4:	e014      	b.n	8005600 <_svfiprintf_r+0x110>
 80055d6:	eba0 0308 	sub.w	r3, r0, r8
 80055da:	fa09 f303 	lsl.w	r3, r9, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	9304      	str	r3, [sp, #16]
 80055e2:	46a2      	mov	sl, r4
 80055e4:	e7d2      	b.n	800558c <_svfiprintf_r+0x9c>
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	9103      	str	r1, [sp, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bfbb      	ittet	lt
 80055f2:	425b      	neglt	r3, r3
 80055f4:	f042 0202 	orrlt.w	r2, r2, #2
 80055f8:	9307      	strge	r3, [sp, #28]
 80055fa:	9307      	strlt	r3, [sp, #28]
 80055fc:	bfb8      	it	lt
 80055fe:	9204      	strlt	r2, [sp, #16]
 8005600:	7823      	ldrb	r3, [r4, #0]
 8005602:	2b2e      	cmp	r3, #46	; 0x2e
 8005604:	d10c      	bne.n	8005620 <_svfiprintf_r+0x130>
 8005606:	7863      	ldrb	r3, [r4, #1]
 8005608:	2b2a      	cmp	r3, #42	; 0x2a
 800560a:	d135      	bne.n	8005678 <_svfiprintf_r+0x188>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	9203      	str	r2, [sp, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfb8      	it	lt
 8005618:	f04f 33ff 	movlt.w	r3, #4294967295
 800561c:	3402      	adds	r4, #2
 800561e:	9305      	str	r3, [sp, #20]
 8005620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056ec <_svfiprintf_r+0x1fc>
 8005624:	7821      	ldrb	r1, [r4, #0]
 8005626:	2203      	movs	r2, #3
 8005628:	4650      	mov	r0, sl
 800562a:	f7fa fdd1 	bl	80001d0 <memchr>
 800562e:	b140      	cbz	r0, 8005642 <_svfiprintf_r+0x152>
 8005630:	2340      	movs	r3, #64	; 0x40
 8005632:	eba0 000a 	sub.w	r0, r0, sl
 8005636:	fa03 f000 	lsl.w	r0, r3, r0
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	4303      	orrs	r3, r0
 800563e:	3401      	adds	r4, #1
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005646:	4826      	ldr	r0, [pc, #152]	; (80056e0 <_svfiprintf_r+0x1f0>)
 8005648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800564c:	2206      	movs	r2, #6
 800564e:	f7fa fdbf 	bl	80001d0 <memchr>
 8005652:	2800      	cmp	r0, #0
 8005654:	d038      	beq.n	80056c8 <_svfiprintf_r+0x1d8>
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <_svfiprintf_r+0x1f4>)
 8005658:	bb1b      	cbnz	r3, 80056a2 <_svfiprintf_r+0x1b2>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	3307      	adds	r3, #7
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	3308      	adds	r3, #8
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005668:	4433      	add	r3, r6
 800566a:	9309      	str	r3, [sp, #36]	; 0x24
 800566c:	e767      	b.n	800553e <_svfiprintf_r+0x4e>
 800566e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005672:	460c      	mov	r4, r1
 8005674:	2001      	movs	r0, #1
 8005676:	e7a5      	b.n	80055c4 <_svfiprintf_r+0xd4>
 8005678:	2300      	movs	r3, #0
 800567a:	3401      	adds	r4, #1
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	4619      	mov	r1, r3
 8005680:	f04f 0c0a 	mov.w	ip, #10
 8005684:	4620      	mov	r0, r4
 8005686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800568a:	3a30      	subs	r2, #48	; 0x30
 800568c:	2a09      	cmp	r2, #9
 800568e:	d903      	bls.n	8005698 <_svfiprintf_r+0x1a8>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0c5      	beq.n	8005620 <_svfiprintf_r+0x130>
 8005694:	9105      	str	r1, [sp, #20]
 8005696:	e7c3      	b.n	8005620 <_svfiprintf_r+0x130>
 8005698:	fb0c 2101 	mla	r1, ip, r1, r2
 800569c:	4604      	mov	r4, r0
 800569e:	2301      	movs	r3, #1
 80056a0:	e7f0      	b.n	8005684 <_svfiprintf_r+0x194>
 80056a2:	ab03      	add	r3, sp, #12
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	462a      	mov	r2, r5
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <_svfiprintf_r+0x1f8>)
 80056aa:	a904      	add	r1, sp, #16
 80056ac:	4638      	mov	r0, r7
 80056ae:	f3af 8000 	nop.w
 80056b2:	1c42      	adds	r2, r0, #1
 80056b4:	4606      	mov	r6, r0
 80056b6:	d1d6      	bne.n	8005666 <_svfiprintf_r+0x176>
 80056b8:	89ab      	ldrh	r3, [r5, #12]
 80056ba:	065b      	lsls	r3, r3, #25
 80056bc:	f53f af2c 	bmi.w	8005518 <_svfiprintf_r+0x28>
 80056c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056c2:	b01d      	add	sp, #116	; 0x74
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c8:	ab03      	add	r3, sp, #12
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	462a      	mov	r2, r5
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <_svfiprintf_r+0x1f8>)
 80056d0:	a904      	add	r1, sp, #16
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 f87a 	bl	80057cc <_printf_i>
 80056d8:	e7eb      	b.n	80056b2 <_svfiprintf_r+0x1c2>
 80056da:	bf00      	nop
 80056dc:	08005cbc 	.word	0x08005cbc
 80056e0:	08005cc6 	.word	0x08005cc6
 80056e4:	00000000 	.word	0x00000000
 80056e8:	08005439 	.word	0x08005439
 80056ec:	08005cc2 	.word	0x08005cc2

080056f0 <_printf_common>:
 80056f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f4:	4616      	mov	r6, r2
 80056f6:	4699      	mov	r9, r3
 80056f8:	688a      	ldr	r2, [r1, #8]
 80056fa:	690b      	ldr	r3, [r1, #16]
 80056fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005700:	4293      	cmp	r3, r2
 8005702:	bfb8      	it	lt
 8005704:	4613      	movlt	r3, r2
 8005706:	6033      	str	r3, [r6, #0]
 8005708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800570c:	4607      	mov	r7, r0
 800570e:	460c      	mov	r4, r1
 8005710:	b10a      	cbz	r2, 8005716 <_printf_common+0x26>
 8005712:	3301      	adds	r3, #1
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	0699      	lsls	r1, r3, #26
 800571a:	bf42      	ittt	mi
 800571c:	6833      	ldrmi	r3, [r6, #0]
 800571e:	3302      	addmi	r3, #2
 8005720:	6033      	strmi	r3, [r6, #0]
 8005722:	6825      	ldr	r5, [r4, #0]
 8005724:	f015 0506 	ands.w	r5, r5, #6
 8005728:	d106      	bne.n	8005738 <_printf_common+0x48>
 800572a:	f104 0a19 	add.w	sl, r4, #25
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	6832      	ldr	r2, [r6, #0]
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	42ab      	cmp	r3, r5
 8005736:	dc26      	bgt.n	8005786 <_printf_common+0x96>
 8005738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800573c:	1e13      	subs	r3, r2, #0
 800573e:	6822      	ldr	r2, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	2301      	movne	r3, #1
 8005744:	0692      	lsls	r2, r2, #26
 8005746:	d42b      	bmi.n	80057a0 <_printf_common+0xb0>
 8005748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800574c:	4649      	mov	r1, r9
 800574e:	4638      	mov	r0, r7
 8005750:	47c0      	blx	r8
 8005752:	3001      	adds	r0, #1
 8005754:	d01e      	beq.n	8005794 <_printf_common+0xa4>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	68e5      	ldr	r5, [r4, #12]
 800575a:	6832      	ldr	r2, [r6, #0]
 800575c:	f003 0306 	and.w	r3, r3, #6
 8005760:	2b04      	cmp	r3, #4
 8005762:	bf08      	it	eq
 8005764:	1aad      	subeq	r5, r5, r2
 8005766:	68a3      	ldr	r3, [r4, #8]
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	bf0c      	ite	eq
 800576c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005770:	2500      	movne	r5, #0
 8005772:	4293      	cmp	r3, r2
 8005774:	bfc4      	itt	gt
 8005776:	1a9b      	subgt	r3, r3, r2
 8005778:	18ed      	addgt	r5, r5, r3
 800577a:	2600      	movs	r6, #0
 800577c:	341a      	adds	r4, #26
 800577e:	42b5      	cmp	r5, r6
 8005780:	d11a      	bne.n	80057b8 <_printf_common+0xc8>
 8005782:	2000      	movs	r0, #0
 8005784:	e008      	b.n	8005798 <_printf_common+0xa8>
 8005786:	2301      	movs	r3, #1
 8005788:	4652      	mov	r2, sl
 800578a:	4649      	mov	r1, r9
 800578c:	4638      	mov	r0, r7
 800578e:	47c0      	blx	r8
 8005790:	3001      	adds	r0, #1
 8005792:	d103      	bne.n	800579c <_printf_common+0xac>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579c:	3501      	adds	r5, #1
 800579e:	e7c6      	b.n	800572e <_printf_common+0x3e>
 80057a0:	18e1      	adds	r1, r4, r3
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	2030      	movs	r0, #48	; 0x30
 80057a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057aa:	4422      	add	r2, r4
 80057ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057b4:	3302      	adds	r3, #2
 80057b6:	e7c7      	b.n	8005748 <_printf_common+0x58>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4622      	mov	r2, r4
 80057bc:	4649      	mov	r1, r9
 80057be:	4638      	mov	r0, r7
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d0e6      	beq.n	8005794 <_printf_common+0xa4>
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7d9      	b.n	800577e <_printf_common+0x8e>
	...

080057cc <_printf_i>:
 80057cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	4691      	mov	r9, r2
 80057d4:	7e27      	ldrb	r7, [r4, #24]
 80057d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057d8:	2f78      	cmp	r7, #120	; 0x78
 80057da:	4680      	mov	r8, r0
 80057dc:	469a      	mov	sl, r3
 80057de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e2:	d807      	bhi.n	80057f4 <_printf_i+0x28>
 80057e4:	2f62      	cmp	r7, #98	; 0x62
 80057e6:	d80a      	bhi.n	80057fe <_printf_i+0x32>
 80057e8:	2f00      	cmp	r7, #0
 80057ea:	f000 80d8 	beq.w	800599e <_printf_i+0x1d2>
 80057ee:	2f58      	cmp	r7, #88	; 0x58
 80057f0:	f000 80a3 	beq.w	800593a <_printf_i+0x16e>
 80057f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057fc:	e03a      	b.n	8005874 <_printf_i+0xa8>
 80057fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005802:	2b15      	cmp	r3, #21
 8005804:	d8f6      	bhi.n	80057f4 <_printf_i+0x28>
 8005806:	a001      	add	r0, pc, #4	; (adr r0, 800580c <_printf_i+0x40>)
 8005808:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800580c:	08005865 	.word	0x08005865
 8005810:	08005879 	.word	0x08005879
 8005814:	080057f5 	.word	0x080057f5
 8005818:	080057f5 	.word	0x080057f5
 800581c:	080057f5 	.word	0x080057f5
 8005820:	080057f5 	.word	0x080057f5
 8005824:	08005879 	.word	0x08005879
 8005828:	080057f5 	.word	0x080057f5
 800582c:	080057f5 	.word	0x080057f5
 8005830:	080057f5 	.word	0x080057f5
 8005834:	080057f5 	.word	0x080057f5
 8005838:	08005985 	.word	0x08005985
 800583c:	080058a9 	.word	0x080058a9
 8005840:	08005967 	.word	0x08005967
 8005844:	080057f5 	.word	0x080057f5
 8005848:	080057f5 	.word	0x080057f5
 800584c:	080059a7 	.word	0x080059a7
 8005850:	080057f5 	.word	0x080057f5
 8005854:	080058a9 	.word	0x080058a9
 8005858:	080057f5 	.word	0x080057f5
 800585c:	080057f5 	.word	0x080057f5
 8005860:	0800596f 	.word	0x0800596f
 8005864:	680b      	ldr	r3, [r1, #0]
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	600a      	str	r2, [r1, #0]
 800586c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005874:	2301      	movs	r3, #1
 8005876:	e0a3      	b.n	80059c0 <_printf_i+0x1f4>
 8005878:	6825      	ldr	r5, [r4, #0]
 800587a:	6808      	ldr	r0, [r1, #0]
 800587c:	062e      	lsls	r6, r5, #24
 800587e:	f100 0304 	add.w	r3, r0, #4
 8005882:	d50a      	bpl.n	800589a <_printf_i+0xce>
 8005884:	6805      	ldr	r5, [r0, #0]
 8005886:	600b      	str	r3, [r1, #0]
 8005888:	2d00      	cmp	r5, #0
 800588a:	da03      	bge.n	8005894 <_printf_i+0xc8>
 800588c:	232d      	movs	r3, #45	; 0x2d
 800588e:	426d      	negs	r5, r5
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005894:	485e      	ldr	r0, [pc, #376]	; (8005a10 <_printf_i+0x244>)
 8005896:	230a      	movs	r3, #10
 8005898:	e019      	b.n	80058ce <_printf_i+0x102>
 800589a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800589e:	6805      	ldr	r5, [r0, #0]
 80058a0:	600b      	str	r3, [r1, #0]
 80058a2:	bf18      	it	ne
 80058a4:	b22d      	sxthne	r5, r5
 80058a6:	e7ef      	b.n	8005888 <_printf_i+0xbc>
 80058a8:	680b      	ldr	r3, [r1, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	1d18      	adds	r0, r3, #4
 80058ae:	6008      	str	r0, [r1, #0]
 80058b0:	0628      	lsls	r0, r5, #24
 80058b2:	d501      	bpl.n	80058b8 <_printf_i+0xec>
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	e002      	b.n	80058be <_printf_i+0xf2>
 80058b8:	0669      	lsls	r1, r5, #25
 80058ba:	d5fb      	bpl.n	80058b4 <_printf_i+0xe8>
 80058bc:	881d      	ldrh	r5, [r3, #0]
 80058be:	4854      	ldr	r0, [pc, #336]	; (8005a10 <_printf_i+0x244>)
 80058c0:	2f6f      	cmp	r7, #111	; 0x6f
 80058c2:	bf0c      	ite	eq
 80058c4:	2308      	moveq	r3, #8
 80058c6:	230a      	movne	r3, #10
 80058c8:	2100      	movs	r1, #0
 80058ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ce:	6866      	ldr	r6, [r4, #4]
 80058d0:	60a6      	str	r6, [r4, #8]
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	bfa2      	ittt	ge
 80058d6:	6821      	ldrge	r1, [r4, #0]
 80058d8:	f021 0104 	bicge.w	r1, r1, #4
 80058dc:	6021      	strge	r1, [r4, #0]
 80058de:	b90d      	cbnz	r5, 80058e4 <_printf_i+0x118>
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	d04d      	beq.n	8005980 <_printf_i+0x1b4>
 80058e4:	4616      	mov	r6, r2
 80058e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80058ea:	fb03 5711 	mls	r7, r3, r1, r5
 80058ee:	5dc7      	ldrb	r7, [r0, r7]
 80058f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058f4:	462f      	mov	r7, r5
 80058f6:	42bb      	cmp	r3, r7
 80058f8:	460d      	mov	r5, r1
 80058fa:	d9f4      	bls.n	80058e6 <_printf_i+0x11a>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d10b      	bne.n	8005918 <_printf_i+0x14c>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	07df      	lsls	r7, r3, #31
 8005904:	d508      	bpl.n	8005918 <_printf_i+0x14c>
 8005906:	6923      	ldr	r3, [r4, #16]
 8005908:	6861      	ldr	r1, [r4, #4]
 800590a:	4299      	cmp	r1, r3
 800590c:	bfde      	ittt	le
 800590e:	2330      	movle	r3, #48	; 0x30
 8005910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005918:	1b92      	subs	r2, r2, r6
 800591a:	6122      	str	r2, [r4, #16]
 800591c:	f8cd a000 	str.w	sl, [sp]
 8005920:	464b      	mov	r3, r9
 8005922:	aa03      	add	r2, sp, #12
 8005924:	4621      	mov	r1, r4
 8005926:	4640      	mov	r0, r8
 8005928:	f7ff fee2 	bl	80056f0 <_printf_common>
 800592c:	3001      	adds	r0, #1
 800592e:	d14c      	bne.n	80059ca <_printf_i+0x1fe>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	b004      	add	sp, #16
 8005936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593a:	4835      	ldr	r0, [pc, #212]	; (8005a10 <_printf_i+0x244>)
 800593c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	680e      	ldr	r6, [r1, #0]
 8005944:	061f      	lsls	r7, r3, #24
 8005946:	f856 5b04 	ldr.w	r5, [r6], #4
 800594a:	600e      	str	r6, [r1, #0]
 800594c:	d514      	bpl.n	8005978 <_printf_i+0x1ac>
 800594e:	07d9      	lsls	r1, r3, #31
 8005950:	bf44      	itt	mi
 8005952:	f043 0320 	orrmi.w	r3, r3, #32
 8005956:	6023      	strmi	r3, [r4, #0]
 8005958:	b91d      	cbnz	r5, 8005962 <_printf_i+0x196>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f023 0320 	bic.w	r3, r3, #32
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	2310      	movs	r3, #16
 8005964:	e7b0      	b.n	80058c8 <_printf_i+0xfc>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f043 0320 	orr.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	2378      	movs	r3, #120	; 0x78
 8005970:	4828      	ldr	r0, [pc, #160]	; (8005a14 <_printf_i+0x248>)
 8005972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005976:	e7e3      	b.n	8005940 <_printf_i+0x174>
 8005978:	065e      	lsls	r6, r3, #25
 800597a:	bf48      	it	mi
 800597c:	b2ad      	uxthmi	r5, r5
 800597e:	e7e6      	b.n	800594e <_printf_i+0x182>
 8005980:	4616      	mov	r6, r2
 8005982:	e7bb      	b.n	80058fc <_printf_i+0x130>
 8005984:	680b      	ldr	r3, [r1, #0]
 8005986:	6826      	ldr	r6, [r4, #0]
 8005988:	6960      	ldr	r0, [r4, #20]
 800598a:	1d1d      	adds	r5, r3, #4
 800598c:	600d      	str	r5, [r1, #0]
 800598e:	0635      	lsls	r5, r6, #24
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	d501      	bpl.n	8005998 <_printf_i+0x1cc>
 8005994:	6018      	str	r0, [r3, #0]
 8005996:	e002      	b.n	800599e <_printf_i+0x1d2>
 8005998:	0671      	lsls	r1, r6, #25
 800599a:	d5fb      	bpl.n	8005994 <_printf_i+0x1c8>
 800599c:	8018      	strh	r0, [r3, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	4616      	mov	r6, r2
 80059a4:	e7ba      	b.n	800591c <_printf_i+0x150>
 80059a6:	680b      	ldr	r3, [r1, #0]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	600a      	str	r2, [r1, #0]
 80059ac:	681e      	ldr	r6, [r3, #0]
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7fa fc0c 	bl	80001d0 <memchr>
 80059b8:	b108      	cbz	r0, 80059be <_printf_i+0x1f2>
 80059ba:	1b80      	subs	r0, r0, r6
 80059bc:	6060      	str	r0, [r4, #4]
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	2300      	movs	r3, #0
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c8:	e7a8      	b.n	800591c <_printf_i+0x150>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4632      	mov	r2, r6
 80059ce:	4649      	mov	r1, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	47d0      	blx	sl
 80059d4:	3001      	adds	r0, #1
 80059d6:	d0ab      	beq.n	8005930 <_printf_i+0x164>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	079b      	lsls	r3, r3, #30
 80059dc:	d413      	bmi.n	8005a06 <_printf_i+0x23a>
 80059de:	68e0      	ldr	r0, [r4, #12]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	4298      	cmp	r0, r3
 80059e4:	bfb8      	it	lt
 80059e6:	4618      	movlt	r0, r3
 80059e8:	e7a4      	b.n	8005934 <_printf_i+0x168>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4632      	mov	r2, r6
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	47d0      	blx	sl
 80059f4:	3001      	adds	r0, #1
 80059f6:	d09b      	beq.n	8005930 <_printf_i+0x164>
 80059f8:	3501      	adds	r5, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	9903      	ldr	r1, [sp, #12]
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dcf2      	bgt.n	80059ea <_printf_i+0x21e>
 8005a04:	e7eb      	b.n	80059de <_printf_i+0x212>
 8005a06:	2500      	movs	r5, #0
 8005a08:	f104 0619 	add.w	r6, r4, #25
 8005a0c:	e7f5      	b.n	80059fa <_printf_i+0x22e>
 8005a0e:	bf00      	nop
 8005a10:	08005ccd 	.word	0x08005ccd
 8005a14:	08005cde 	.word	0x08005cde

08005a18 <memcpy>:
 8005a18:	440a      	add	r2, r1
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a20:	d100      	bne.n	8005a24 <memcpy+0xc>
 8005a22:	4770      	bx	lr
 8005a24:	b510      	push	{r4, lr}
 8005a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2e:	4291      	cmp	r1, r2
 8005a30:	d1f9      	bne.n	8005a26 <memcpy+0xe>
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <memmove>:
 8005a34:	4288      	cmp	r0, r1
 8005a36:	b510      	push	{r4, lr}
 8005a38:	eb01 0402 	add.w	r4, r1, r2
 8005a3c:	d902      	bls.n	8005a44 <memmove+0x10>
 8005a3e:	4284      	cmp	r4, r0
 8005a40:	4623      	mov	r3, r4
 8005a42:	d807      	bhi.n	8005a54 <memmove+0x20>
 8005a44:	1e43      	subs	r3, r0, #1
 8005a46:	42a1      	cmp	r1, r4
 8005a48:	d008      	beq.n	8005a5c <memmove+0x28>
 8005a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a52:	e7f8      	b.n	8005a46 <memmove+0x12>
 8005a54:	4402      	add	r2, r0
 8005a56:	4601      	mov	r1, r0
 8005a58:	428a      	cmp	r2, r1
 8005a5a:	d100      	bne.n	8005a5e <memmove+0x2a>
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a66:	e7f7      	b.n	8005a58 <memmove+0x24>

08005a68 <_free_r>:
 8005a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	d048      	beq.n	8005b00 <_free_r+0x98>
 8005a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a72:	9001      	str	r0, [sp, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f1a1 0404 	sub.w	r4, r1, #4
 8005a7a:	bfb8      	it	lt
 8005a7c:	18e4      	addlt	r4, r4, r3
 8005a7e:	f000 f8d3 	bl	8005c28 <__malloc_lock>
 8005a82:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <_free_r+0x9c>)
 8005a84:	9801      	ldr	r0, [sp, #4]
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	4615      	mov	r5, r2
 8005a8a:	b933      	cbnz	r3, 8005a9a <_free_r+0x32>
 8005a8c:	6063      	str	r3, [r4, #4]
 8005a8e:	6014      	str	r4, [r2, #0]
 8005a90:	b003      	add	sp, #12
 8005a92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a96:	f000 b8cd 	b.w	8005c34 <__malloc_unlock>
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	d90b      	bls.n	8005ab6 <_free_r+0x4e>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	1862      	adds	r2, r4, r1
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bf04      	itt	eq
 8005aa6:	681a      	ldreq	r2, [r3, #0]
 8005aa8:	685b      	ldreq	r3, [r3, #4]
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	bf04      	itt	eq
 8005aae:	1852      	addeq	r2, r2, r1
 8005ab0:	6022      	streq	r2, [r4, #0]
 8005ab2:	602c      	str	r4, [r5, #0]
 8005ab4:	e7ec      	b.n	8005a90 <_free_r+0x28>
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b10b      	cbz	r3, 8005ac0 <_free_r+0x58>
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	d9fa      	bls.n	8005ab6 <_free_r+0x4e>
 8005ac0:	6811      	ldr	r1, [r2, #0]
 8005ac2:	1855      	adds	r5, r2, r1
 8005ac4:	42a5      	cmp	r5, r4
 8005ac6:	d10b      	bne.n	8005ae0 <_free_r+0x78>
 8005ac8:	6824      	ldr	r4, [r4, #0]
 8005aca:	4421      	add	r1, r4
 8005acc:	1854      	adds	r4, r2, r1
 8005ace:	42a3      	cmp	r3, r4
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	d1dd      	bne.n	8005a90 <_free_r+0x28>
 8005ad4:	681c      	ldr	r4, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	6053      	str	r3, [r2, #4]
 8005ada:	4421      	add	r1, r4
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	e7d7      	b.n	8005a90 <_free_r+0x28>
 8005ae0:	d902      	bls.n	8005ae8 <_free_r+0x80>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	6003      	str	r3, [r0, #0]
 8005ae6:	e7d3      	b.n	8005a90 <_free_r+0x28>
 8005ae8:	6825      	ldr	r5, [r4, #0]
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	428b      	cmp	r3, r1
 8005aee:	bf04      	itt	eq
 8005af0:	6819      	ldreq	r1, [r3, #0]
 8005af2:	685b      	ldreq	r3, [r3, #4]
 8005af4:	6063      	str	r3, [r4, #4]
 8005af6:	bf04      	itt	eq
 8005af8:	1949      	addeq	r1, r1, r5
 8005afa:	6021      	streq	r1, [r4, #0]
 8005afc:	6054      	str	r4, [r2, #4]
 8005afe:	e7c7      	b.n	8005a90 <_free_r+0x28>
 8005b00:	b003      	add	sp, #12
 8005b02:	bd30      	pop	{r4, r5, pc}
 8005b04:	200020b0 	.word	0x200020b0

08005b08 <_malloc_r>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	1ccd      	adds	r5, r1, #3
 8005b0c:	f025 0503 	bic.w	r5, r5, #3
 8005b10:	3508      	adds	r5, #8
 8005b12:	2d0c      	cmp	r5, #12
 8005b14:	bf38      	it	cc
 8005b16:	250c      	movcc	r5, #12
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	db01      	blt.n	8005b22 <_malloc_r+0x1a>
 8005b1e:	42a9      	cmp	r1, r5
 8005b20:	d903      	bls.n	8005b2a <_malloc_r+0x22>
 8005b22:	230c      	movs	r3, #12
 8005b24:	6033      	str	r3, [r6, #0]
 8005b26:	2000      	movs	r0, #0
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2a:	f000 f87d 	bl	8005c28 <__malloc_lock>
 8005b2e:	4921      	ldr	r1, [pc, #132]	; (8005bb4 <_malloc_r+0xac>)
 8005b30:	680a      	ldr	r2, [r1, #0]
 8005b32:	4614      	mov	r4, r2
 8005b34:	b99c      	cbnz	r4, 8005b5e <_malloc_r+0x56>
 8005b36:	4f20      	ldr	r7, [pc, #128]	; (8005bb8 <_malloc_r+0xb0>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b923      	cbnz	r3, 8005b46 <_malloc_r+0x3e>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f000 f862 	bl	8005c08 <_sbrk_r>
 8005b44:	6038      	str	r0, [r7, #0]
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f85d 	bl	8005c08 <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d123      	bne.n	8005b9a <_malloc_r+0x92>
 8005b52:	230c      	movs	r3, #12
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f86c 	bl	8005c34 <__malloc_unlock>
 8005b5c:	e7e3      	b.n	8005b26 <_malloc_r+0x1e>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	1b5b      	subs	r3, r3, r5
 8005b62:	d417      	bmi.n	8005b94 <_malloc_r+0x8c>
 8005b64:	2b0b      	cmp	r3, #11
 8005b66:	d903      	bls.n	8005b70 <_malloc_r+0x68>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	441c      	add	r4, r3
 8005b6c:	6025      	str	r5, [r4, #0]
 8005b6e:	e004      	b.n	8005b7a <_malloc_r+0x72>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	42a2      	cmp	r2, r4
 8005b74:	bf0c      	ite	eq
 8005b76:	600b      	streq	r3, [r1, #0]
 8005b78:	6053      	strne	r3, [r2, #4]
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f000 f85a 	bl	8005c34 <__malloc_unlock>
 8005b80:	f104 000b 	add.w	r0, r4, #11
 8005b84:	1d23      	adds	r3, r4, #4
 8005b86:	f020 0007 	bic.w	r0, r0, #7
 8005b8a:	1ac2      	subs	r2, r0, r3
 8005b8c:	d0cc      	beq.n	8005b28 <_malloc_r+0x20>
 8005b8e:	1a1b      	subs	r3, r3, r0
 8005b90:	50a3      	str	r3, [r4, r2]
 8005b92:	e7c9      	b.n	8005b28 <_malloc_r+0x20>
 8005b94:	4622      	mov	r2, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
 8005b98:	e7cc      	b.n	8005b34 <_malloc_r+0x2c>
 8005b9a:	1cc4      	adds	r4, r0, #3
 8005b9c:	f024 0403 	bic.w	r4, r4, #3
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d0e3      	beq.n	8005b6c <_malloc_r+0x64>
 8005ba4:	1a21      	subs	r1, r4, r0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 f82e 	bl	8005c08 <_sbrk_r>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d1dd      	bne.n	8005b6c <_malloc_r+0x64>
 8005bb0:	e7cf      	b.n	8005b52 <_malloc_r+0x4a>
 8005bb2:	bf00      	nop
 8005bb4:	200020b0 	.word	0x200020b0
 8005bb8:	200020b4 	.word	0x200020b4

08005bbc <_realloc_r>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	b921      	cbnz	r1, 8005bd0 <_realloc_r+0x14>
 8005bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bca:	4611      	mov	r1, r2
 8005bcc:	f7ff bf9c 	b.w	8005b08 <_malloc_r>
 8005bd0:	b922      	cbnz	r2, 8005bdc <_realloc_r+0x20>
 8005bd2:	f7ff ff49 	bl	8005a68 <_free_r>
 8005bd6:	4625      	mov	r5, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bdc:	f000 f830 	bl	8005c40 <_malloc_usable_size_r>
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d20f      	bcs.n	8005c04 <_realloc_r+0x48>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4638      	mov	r0, r7
 8005be8:	f7ff ff8e 	bl	8005b08 <_malloc_r>
 8005bec:	4605      	mov	r5, r0
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0f2      	beq.n	8005bd8 <_realloc_r+0x1c>
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	f7ff ff0f 	bl	8005a18 <memcpy>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f7ff ff33 	bl	8005a68 <_free_r>
 8005c02:	e7e9      	b.n	8005bd8 <_realloc_r+0x1c>
 8005c04:	4635      	mov	r5, r6
 8005c06:	e7e7      	b.n	8005bd8 <_realloc_r+0x1c>

08005c08 <_sbrk_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d06      	ldr	r5, [pc, #24]	; (8005c24 <_sbrk_r+0x1c>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	f7fb f9e6 	bl	8000fe4 <_sbrk>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d102      	bne.n	8005c22 <_sbrk_r+0x1a>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b103      	cbz	r3, 8005c22 <_sbrk_r+0x1a>
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	20002214 	.word	0x20002214

08005c28 <__malloc_lock>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__malloc_lock+0x8>)
 8005c2a:	f000 b811 	b.w	8005c50 <__retarget_lock_acquire_recursive>
 8005c2e:	bf00      	nop
 8005c30:	2000221c 	.word	0x2000221c

08005c34 <__malloc_unlock>:
 8005c34:	4801      	ldr	r0, [pc, #4]	; (8005c3c <__malloc_unlock+0x8>)
 8005c36:	f000 b80c 	b.w	8005c52 <__retarget_lock_release_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	2000221c 	.word	0x2000221c

08005c40 <_malloc_usable_size_r>:
 8005c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c44:	1f18      	subs	r0, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bfbc      	itt	lt
 8005c4a:	580b      	ldrlt	r3, [r1, r0]
 8005c4c:	18c0      	addlt	r0, r0, r3
 8005c4e:	4770      	bx	lr

08005c50 <__retarget_lock_acquire_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_release_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <_init>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr

08005c60 <_fini>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr
