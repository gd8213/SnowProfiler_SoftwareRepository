
UART_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004400  08004400  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000004c  08004454  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004454  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011058  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cf  00000000  00000000  000310d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000331a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270f1  00000000  00000000  00034af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e521  00000000  00000000  0005bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd54  00000000  00000000  0006a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003598  00000000  00000000  00159eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004390 	.word	0x08004390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08004390 	.word	0x08004390

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <BSP_LED_Init+0x94>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	4a21      	ldr	r2, [pc, #132]	; (8000554 <BSP_LED_Init+0x94>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	6593      	str	r3, [r2, #88]	; 0x58
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <BSP_LED_Init+0x94>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 80004e2:	f000 ffff 	bl	80014e4 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10b      	bne.n	8000504 <BSP_LED_Init+0x44>
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <BSP_LED_Init+0x94>)
 80004ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <BSP_LED_Init+0x94>)
 80004f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <BSP_LED_Init+0x94>)
 80004fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d10b      	bne.n	8000522 <BSP_LED_Init+0x62>
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <BSP_LED_Init+0x94>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <BSP_LED_Init+0x94>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <BSP_LED_Init+0x94>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <BSP_LED_Init+0x98>)
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000534:	2302      	movs	r3, #2
 8000536:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <BSP_LED_Init+0x9c>)
 800053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000540:	f107 0214 	add.w	r2, r7, #20
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fda6 	bl	8001098 <HAL_GPIO_Init>
}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	080043a8 	.word	0x080043a8
 800055c:	20000000 	.word	0x20000000

08000560 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10d      	bne.n	800058c <BSP_LED_On+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <BSP_LED_On+0x54>)
 8000574:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <BSP_LED_On+0x58>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	f000 ff31 	bl	80013ec <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 800058a:	e00f      	b.n	80005ac <BSP_LED_On+0x4c>
  else if (Led == LEDSWD)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10c      	bne.n	80005ac <BSP_LED_On+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <BSP_LED_On+0x54>)
 8000596:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <BSP_LED_On+0x58>)
 800059e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	2200      	movs	r2, #0
 80005a6:	4619      	mov	r1, r3
 80005a8:	f000 ff20 	bl	80013ec <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000
 80005b8:	080043a8 	.word	0x080043a8

080005bc <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10d      	bne.n	80005e8 <BSP_LED_Off+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <BSP_LED_Off+0x54>)
 80005d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <BSP_LED_Off+0x58>)
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	f000 ff03 	bl	80013ec <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 80005e6:	e00f      	b.n	8000608 <BSP_LED_Off+0x4c>
  else if (Led == LEDSWD)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <BSP_LED_Off+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <BSP_LED_Off+0x54>)
 80005f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <BSP_LED_Off+0x58>)
 80005fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f000 fef2 	bl	80013ec <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	080043a8 	.word	0x080043a8

08000618 <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <Sensor_IO_SPI_CS_Init_All+0x5c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <Sensor_IO_SPI_CS_Init_All+0x5c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <Sensor_IO_SPI_CS_Init_All+0x5c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <Sensor_IO_SPI_CS_Init_All+0x60>)
 800063e:	f000 fed5 	bl	80013ec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <Sensor_IO_SPI_CS_Init_All+0x60>)
 800065a:	f000 fd1d 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <Sensor_IO_SPI_CS_Init_All+0x60>)
 8000666:	f000 fec1 	bl	80013ec <HAL_GPIO_WritePin>


  return HAL_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fb8a 	bl	8000d9a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f89b 	bl	80007c0 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f979 	bl	8000980 <MX_GPIO_Init>
  MX_SPI2_Init();
 800068e:	f000 f8dd 	bl	800084c <MX_SPI2_Init>
  MX_UART5_Init();
 8000692:	f000 f919 	bl	80008c8 <MX_UART5_Init>
  MX_USART2_Init();
 8000696:	f000 f947 	bl	8000928 <MX_USART2_Init>
  Sensor_IO_SPI_CS_Init_All();
 800069a:	f7ff ffbd 	bl	8000618 <Sensor_IO_SPI_CS_Init_All>
//   MX_X_CUBE_MEMS1_Init();

	BSP_LED_Init(LED1);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff0e 	bl	80004c0 <BSP_LED_Init>
	BSP_LED_On(LED1);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff5b 	bl	8000560 <BSP_LED_On>

	uint8_t *error;
	uint8_t who_am_i;

	uint8_t CTRL3_C_reg=0x12;
 80006aa:	2312      	movs	r3, #18
 80006ac:	75fb      	strb	r3, [r7, #23]
	uint8_t CTRL3_C=0b00001100;
 80006ae:	230c      	movs	r3, #12
 80006b0:	75bb      	strb	r3, [r7, #22]
	uint16_t transmit=(CTRL3_C_reg<<8)|CTRL3_C;
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7dbb      	ldrb	r3, [r7, #22]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	813b      	strh	r3, [r7, #8]
	uint16_t *CTRL3_C_pointer=&transmit;
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	613b      	str	r3, [r7, #16]

	uint8_t reg=0b10001111;
 80006ca:	238f      	movs	r3, #143	; 0x8f
 80006cc:	71fb      	strb	r3, [r7, #7]
	uint8_t *pointer=&reg;
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	60fb      	str	r3, [r7, #12]
	uint8_t who_am_i_reg=0x0F;
 80006d2:	230f      	movs	r3, #15
 80006d4:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <main+0xd8>)
 80006de:	f000 fe85 	bl	80013ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,CTRL3_C_pointer, 2, TIMEOUT_DURATION);
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	2202      	movs	r2, #2
 80006e8:	6939      	ldr	r1, [r7, #16]
 80006ea:	481b      	ldr	r0, [pc, #108]	; (8000758 <main+0xdc>)
 80006ec:	f002 fa55 	bl	8002b9a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	4817      	ldr	r0, [pc, #92]	; (8000754 <main+0xd8>)
 80006f8:	f000 fe78 	bl	80013ec <HAL_GPIO_WritePin>

  while (1)
  {
	// HAL_SPI_TransmitReceive(&hspi2,(uint8_t *) reg, who_am_i, 2, TIMEOUT_DURATION);
	// HAL_SPI_TransmitReceive(&hspi2, &reg, &who_am_i_reg, 2, TIMEOUT_DURATION);
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <main+0xd8>)
 8000704:	f000 fe72 	bl	80013ec <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2,&reg, 1, TIMEOUT_DURATION);
//	HAL_SPI_Receive(&hspi2,&who_am_i, 1, TIMEOUT_DURATION);

	HAL_SPI_TransmitReceive(&hspi2, &reg, who_am_i, 2, TIMEOUT_DURATION);
 8000708:	7abb      	ldrb	r3, [r7, #10]
 800070a:	461a      	mov	r2, r3
 800070c:	1df9      	adds	r1, r7, #7
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2302      	movs	r3, #2
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <main+0xdc>)
 8000718:	f002 fbad 	bl	8002e76 <HAL_SPI_TransmitReceive>
//	BSP_SPI2_SendRecv(&reg, &who_am_i, TIMEOUT_DURATION);
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <main+0xd8>)
 8000724:	f000 fe62 	bl	80013ec <HAL_GPIO_WritePin>

	// error=readREG(who_am_i_reg,pointer);

	HAL_UART_Transmit(&huart5,(uint8_t *)aTxBuffer, TXBUFFERSIZE,5);
 8000728:	2305      	movs	r3, #5
 800072a:	2235      	movs	r2, #53	; 0x35
 800072c:	490b      	ldr	r1, [pc, #44]	; (800075c <main+0xe0>)
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <main+0xe4>)
 8000730:	f002 ff62 	bl	80035f8 <HAL_UART_Transmit>
	if (HAL_UART_Transmit(&huart5, (uint8_t *)aTxBuffer, TXBUFFERSIZE,5) != HAL_OK)
 8000734:	2305      	movs	r3, #5
 8000736:	2235      	movs	r2, #53	; 0x35
 8000738:	4908      	ldr	r1, [pc, #32]	; (800075c <main+0xe0>)
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <main+0xe4>)
 800073c:	f002 ff5c 	bl	80035f8 <HAL_UART_Transmit>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <main+0xce>
	  {
			/* Transfer error in transmission process */
			Error_Handler_1();
 8000746:	f000 f80d 	bl	8000764 <Error_Handler_1>
	  }
	  HAL_Delay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074e:	f000 fb99 	bl	8000e84 <HAL_Delay>
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8000752:	e7d3      	b.n	80006fc <main+0x80>
 8000754:	48000400 	.word	0x48000400
 8000758:	20000068 	.word	0x20000068
 800075c:	20000008 	.word	0x20000008
 8000760:	200000fc 	.word	0x200000fc

08000764 <Error_Handler_1>:
  }
  /* USER CODE END 3 */
}

static void Error_Handler_1(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff27 	bl	80005bc <BSP_LED_Off>
	HAL_Delay(400);
 800076e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000772:	f000 fb87 	bl	8000e84 <HAL_Delay>
	BSP_LED_On(LED1);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fef2 	bl	8000560 <BSP_LED_On>
	HAL_Delay(400);
 800077c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000780:	f000 fb80 	bl	8000e84 <HAL_Delay>
	BSP_LED_Off(LED1);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff19 	bl	80005bc <BSP_LED_Off>
	HAL_Delay(400);
 800078a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800078e:	f000 fb79 	bl	8000e84 <HAL_Delay>
	BSP_LED_On(LED1);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fee4 	bl	8000560 <BSP_LED_On>
	HAL_Delay(400);
 8000798:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800079c:	f000 fb72 	bl	8000e84 <HAL_Delay>
	BSP_LED_Off(LED1);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff0b 	bl	80005bc <BSP_LED_Off>
	HAL_Delay(400);
 80007a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007aa:	f000 fb6b 	bl	8000e84 <HAL_Delay>
	BSP_LED_On(LED1);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fed6 	bl	8000560 <BSP_LED_On>
	HAL_Delay(400);
 80007b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007b8:	f000 fb64 	bl	8000e84 <HAL_Delay>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2244      	movs	r2, #68	; 0x44
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fdd6 	bl	8004380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e6:	f000 fe27 	bl	8001438 <HAL_PWREx_ControlVoltageScaling>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f0:	f000 f902 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007f4:	2310      	movs	r3, #16
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fe79 	bl	8001504 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000818:	f000 f8ee 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fa4b 	bl	8001cd0 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000840:	f000 f8da 	bl	80009f8 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3758      	adds	r7, #88	; 0x58
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_SPI2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000864:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000868:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH; 				// SPI_POLARITY_LOW
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000870:	2202      	movs	r2, #2
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE; 					// SPI_PHASE_1EDGE
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000876:	2201      	movs	r2, #1
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI2_Init+0x74>)
 800087c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;	// SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000884:	2230      	movs	r2, #48	; 0x30
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_SPI2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI2_Init+0x74>)
 800089c:	2207      	movs	r2, #7
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE; 				// SPI_NSS_PULSE_ENABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008ae:	f002 f8d1 	bl	8002a54 <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 f89e 	bl	80009f8 <Error_Handler>
//  SPI_1LINE_TX(hspi2);
//  HAL_Delay(5);
//  __HAL_SPI_ENABLE(hspi2);
//  /* USER CODE END SPI2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000068 	.word	0x20000068
 80008c4:	40003800 	.word	0x40003800

080008c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_UART5_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_UART5_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_UART5_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_UART5_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_UART5_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_UART5_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_UART5_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_UART5_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_UART5_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_UART5_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_UART5_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_UART5_Init+0x58>)
 800090c:	f002 fe26 	bl	800355c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f86f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000fc 	.word	0x200000fc
 8000924:	40005000 	.word	0x40005000

08000928 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USART2_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <MX_USART2_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_Init+0x50>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART2_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_USART2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_USART2_Init+0x50>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_USART2_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USART2_Init+0x50>)
 8000966:	f003 facc 	bl	8003f02 <HAL_USART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f842 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000230 	.word	0x20000230
 800097c:	40004400 	.word	0x40004400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_GPIO_Init+0x74>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x74>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x74>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_GPIO_Init+0x74>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x7c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d128      	bne.n	8000ac0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_13;
 8000a9e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000abc:	f000 faec 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003800 	.word	0x40003800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0ac      	sub	sp, #176	; 0xb0
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2288      	movs	r2, #136	; 0x88
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fc43 	bl	8004380 <memset>
  if(huart->Instance==UART5)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_UART_MspInit+0xf4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d15c      	bne.n	8000bbe <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b04:	2310      	movs	r3, #16
 8000b06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fae3 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff ff6c 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_UART_MspInit+0xf8>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b80:	2308      	movs	r3, #8
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0xfc>)
 8000b8e:	f000 fa83 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000bac:	2308      	movs	r3, #8
 8000bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_UART_MspInit+0x100>)
 8000bba:	f000 fa6d 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	37b0      	adds	r7, #176	; 0xb0
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40005000 	.word	0x40005000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48000800 	.word	0x48000800

08000bd8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ac      	sub	sp, #176	; 0xb0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2288      	movs	r2, #136	; 0x88
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fbc1 	bl	8004380 <memset>
  if(husart->Instance==USART2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_USART_MspInit+0xb0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d13b      	bne.n	8000c80 <HAL_USART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fa61 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000c20:	f7ff feea 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_USART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8000c54:	231c      	movs	r3, #28
 8000c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f000 fa0c 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	37b0      	adds	r7, #176	; 0xb0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8b2 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <SystemInit+0x5c>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <SystemInit+0x5c>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <SystemInit+0x60>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <SystemInit+0x60>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <SystemInit+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <SystemInit+0x60>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <SystemInit+0x60>)
 8000d10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SystemInit+0x60>)
 8000d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <SystemInit+0x60>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <SystemInit+0x60>)
 8000d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SystemInit+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	40021000 	.word	0x40021000

08000d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d4c:	f7ff ffca 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d52:	e003      	b.n	8000d5c <LoopCopyDataInit>

08000d54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d5a:	3104      	adds	r1, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d64:	d3f6      	bcc.n	8000d54 <CopyDataInit>
	ldr	r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d68:	e002      	b.n	8000d70 <LoopFillZerobss>

08000d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d6c:	f842 3b04 	str.w	r3, [r2], #4

08000d70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LoopForever+0x16>)
	cmp	r2, r3
 8000d72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d74:	d3f9      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f003 fadf 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7a:	f7ff fc7f 	bl	800067c <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d84:	08004408 	.word	0x08004408
	ldr	r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d8c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8000d90:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8000d94:	20000290 	.word	0x20000290

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>

08000d9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f943 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f80e 	bl	8000dcc <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e001      	b.n	8000dc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dbc:	f7ff fe22 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d023      	beq.n	8000e28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_InitTick+0x70>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_InitTick+0x6c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f941 	bl	800107e <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10f      	bne.n	8000e22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d809      	bhi.n	8000e1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f919 	bl	8001046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_InitTick+0x74>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e007      	b.n	8000e2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e004      	b.n	8000e2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e001      	b.n	8000e2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000048 	.word	0x20000048
 8000e3c:	20000040 	.word	0x20000040
 8000e40:	20000044 	.word	0x20000044

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000048 	.word	0x20000048
 8000e68:	2000028c 	.word	0x2000028c

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000028c 	.word	0x2000028c

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000048 	.word	0x20000048

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff47 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff5c 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffb0 	bl	8000fec <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e17f      	b.n	80013a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8171 	beq.w	80013a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b03      	cmp	r3, #3
 800114c:	d118      	bne.n	8001180 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x128>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	6939      	ldr	r1, [r7, #16]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80ac 	beq.w	80013a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a5e      	ldr	r2, [pc, #376]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x242>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_GPIO_Init+0x338>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x23e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <HAL_GPIO_Init+0x33c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x23a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <HAL_GPIO_Init+0x340>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x236>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x344>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x232>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_GPIO_Init+0x348>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x22e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <HAL_GPIO_Init+0x34c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x22a>
 80012be:	2306      	movs	r3, #6
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012da:	2300      	movs	r3, #0
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_GPIO_Init+0x334>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x350>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f ae78 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000c00 	.word	0x48000c00
 80013dc:	48001000 	.word	0x48001000
 80013e0:	48001400 	.word	0x48001400
 80013e4:	48001800 	.word	0x48001800
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_PWREx_GetVoltageRange+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001446:	d130      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001454:	d038      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2232      	movs	r2, #50	; 0x32
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9b      	lsrs	r3, r3, #18
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147c:	e002      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3b01      	subs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d102      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f2      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d110      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e00f      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b6:	d007      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40007000 	.word	0x40007000
 80014dc:	20000040 	.word	0x20000040
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_PWREx_EnableVddIO2+0x1c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_PWREx_EnableVddIO2+0x1c>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6053      	str	r3, [r2, #4]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e3d4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4ba1      	ldr	r3, [pc, #644]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001520:	4b9e      	ldr	r3, [pc, #632]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80e4 	beq.w	8001700 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_RCC_OscConfig+0x4a>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	f040 808b 	bne.w	800165c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b01      	cmp	r3, #1
 800154a:	f040 8087 	bne.w	800165c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800154e:	4b93      	ldr	r3, [pc, #588]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x62>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e3ac      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_RCC_OscConfig+0x7c>
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800157e:	e005      	b.n	800158c <HAL_RCC_OscConfig+0x88>
 8001580:	4b86      	ldr	r3, [pc, #536]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800158c:	4293      	cmp	r3, r2
 800158e:	d223      	bcs.n	80015d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd41 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e38d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a4:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b7a      	ldr	r3, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4977      	ldr	r1, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c2:	4b76      	ldr	r3, [pc, #472]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	4972      	ldr	r1, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
 80015d6:	e025      	b.n	8001624 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6d      	ldr	r3, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	496a      	ldr	r1, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b69      	ldr	r3, [pc, #420]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	4965      	ldr	r1, [pc, #404]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fd01 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e34d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001624:	f000 fc36 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	495a      	ldr	r1, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x29c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x2a0>)
 8001642:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001644:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x2a4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fbbf 	bl	8000dcc <HAL_InitTick>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d052      	beq.n	80016fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	e331      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001664:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a4c      	ldr	r2, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001670:	f7ff fbfc 	bl	8000e6c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff fbf8 	bl	8000e6c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e31a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a40      	ldr	r2, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	493b      	ldr	r1, [pc, #236]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e01a      	b.n	8001700 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a33      	ldr	r2, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fbc9 	bl	8000e6c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016de:	f7ff fbc5 	bl	8000e6c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e2e7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x298>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x1da>
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d074      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2b08      	cmp	r3, #8
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x21a>
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b0c      	cmp	r3, #12
 8001716:	d10e      	bne.n	8001736 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d064      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d160      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e2c4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x24a>
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e01d      	b.n	800178a <HAL_RCC_OscConfig+0x286>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x26e>
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800175e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_RCC_OscConfig+0x298>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x286>
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x298>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01c      	beq.n	80017cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb6b 	bl	8000e6c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001798:	e011      	b.n	80017be <HAL_RCC_OscConfig+0x2ba>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	080043b0 	.word	0x080043b0
 80017a4:	20000040 	.word	0x20000040
 80017a8:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb5e 	bl	8000e6c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e280      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	4baf      	ldr	r3, [pc, #700]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x2a8>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb4e 	bl	8000e6c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb4a 	bl	8000e6c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e26c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e6:	4ba5      	ldr	r3, [pc, #660]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2d0>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d060      	beq.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d005      	beq.n	8001814 <HAL_RCC_OscConfig+0x310>
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d119      	bne.n	8001842 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d116      	bne.n	8001842 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	4b99      	ldr	r3, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_OscConfig+0x328>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e249      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b93      	ldr	r3, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	4990      	ldr	r1, [pc, #576]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	e040      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d023      	beq.n	8001892 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184a:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fb09 	bl	8000e6c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fb05 	bl	8000e6c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e227      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001870:	4b82      	ldr	r3, [pc, #520]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	497c      	ldr	r1, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
 8001890:	e018      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a79      	ldr	r2, [pc, #484]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fae5 	bl	8000e6c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fae1 	bl	8000e6c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e203      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b8:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03c      	beq.n	800194a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01c      	beq.n	8001912 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fac0 	bl	8000e6c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fabc 	bl	8000e6c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1de      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ef      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3ec>
 8001910:	e01b      	b.n	800194a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff faa3 	bl	8000e6c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fa9f 	bl	8000e6c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1c1      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ef      	bne.n	800192a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80a6 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800195c:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10d      	bne.n	8001984 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 800196e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001972:	6593      	str	r3, [r2, #88]	; 0x58
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001980:	2301      	movs	r3, #1
 8001982:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <HAL_RCC_OscConfig+0x57c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d118      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x57c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <HAL_RCC_OscConfig+0x57c>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199c:	f7ff fa66 	bl	8000e6c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a4:	f7ff fa62 	bl	8000e6c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e184      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_RCC_OscConfig+0x57c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x4d8>
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019da:	e024      	b.n	8001a26 <HAL_RCC_OscConfig+0x522>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d110      	bne.n	8001a06 <HAL_RCC_OscConfig+0x502>
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a04:	e00f      	b.n	8001a26 <HAL_RCC_OscConfig+0x522>
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fa1d 	bl	8000e6c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fa19 	bl	8000e6c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e139      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ed      	beq.n	8001a36 <HAL_RCC_OscConfig+0x532>
 8001a5a:	e01a      	b.n	8001a92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa06 	bl	8000e6c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a62:	e00f      	b.n	8001a84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fa02 	bl	8000e6c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d906      	bls.n	8001a84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e122      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a84:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e8      	bne.n	8001a64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	4a8a      	ldr	r2, [pc, #552]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8108 	beq.w	8001cbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	f040 80d0 	bne.w	8001c58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ab8:	4b83      	ldr	r3, [pc, #524]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0203 	and.w	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d130      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d127      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d11f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001af8:	2a07      	cmp	r2, #7
 8001afa:	bf14      	ite	ne
 8001afc:	2201      	movne	r2, #1
 8001afe:	2200      	moveq	r2, #0
 8001b00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d113      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	3b01      	subs	r3, #1
 8001b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d06e      	beq.n	8001c0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d069      	beq.n	8001c08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5c      	ldr	r2, [pc, #368]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5c:	f7ff f986 	bl	8000e6c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f982 	bl	8000e6c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0a4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_RCC_OscConfig+0x7c8>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b92:	3a01      	subs	r2, #1
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b9c:	0212      	lsls	r2, r2, #8
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ba4:	0852      	lsrs	r2, r2, #1
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	0552      	lsls	r2, r2, #21
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	0652      	lsls	r2, r2, #25
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bbc:	0912      	lsrs	r2, r2, #4
 8001bbe:	0452      	lsls	r2, r2, #17
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4941      	ldr	r1, [pc, #260]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be0:	f7ff f944 	bl	8000e6c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f940 	bl	8000e6c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e062      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c06:	e05a      	b.n	8001cbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e059      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d152      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c30:	f7ff f91c 	bl	8000e6c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f918 	bl	8000e6c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e03a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x734>
 8001c56:	e032      	b.n	8001cbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d02d      	beq.n	8001cba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001c88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f8eb 	bl	8000e6c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff f8e7 	bl	8000e6c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e009      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x796>
 8001cb8:	e001      	b.n	8001cbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	f99d808c 	.word	0xf99d808c

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0c8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4961      	ldr	r1, [pc, #388]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b0      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d04c      	beq.n	8001dba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d121      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e09e      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d115      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e092      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d58:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e086      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d68:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e07e      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 0203 	bic.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	493f      	ldr	r1, [pc, #252]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d8a:	f7ff f86f 	bl	8000e6c <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d92:	f7ff f86b 	bl	8000e6c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e066      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 020c 	and.w	r2, r3, #12
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d1eb      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	492c      	ldr	r1, [pc, #176]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d210      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4924      	ldr	r1, [pc, #144]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_ClockConfig+0x1b0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e036      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4918      	ldr	r1, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4910      	ldr	r1, [pc, #64]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e46:	f000 f825 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490c      	ldr	r1, [pc, #48]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ffae 	bl	8000dcc <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	080043b0 	.word	0x080043b0
 8001e8c:	20000040 	.word	0x20000040
 8001e90:	20000044 	.word	0x20000044

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d11e      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e004      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d134      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d003      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xac>
 8001f38:	e005      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3c:	617b      	str	r3, [r7, #20]
      break;
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f42:	617b      	str	r3, [r7, #20]
      break;
 8001f44:	e002      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	617b      	str	r3, [r7, #20]
      break;
 8001f4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	fb02 f203 	mul.w	r2, r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0e5b      	lsrs	r3, r3, #25
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	080043c8 	.word	0x080043c8
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200

08001fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000040 	.word	0x20000040

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	080043c0 	.word	0x080043c0

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ff4:	f7ff ffda 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	080043c0 	.word	0x080043c0

0800201c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002034:	f7ff f9f2 	bl	800141c <HAL_PWREx_GetVoltageRange>
 8002038:	6178      	str	r0, [r7, #20]
 800203a:	e014      	b.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	; 0x58
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7ff f9e2 	bl	800141c <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d10b      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d919      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2ba0      	cmp	r3, #160	; 0xa0
 8002078:	d902      	bls.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e013      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e010      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d902      	bls.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800208c:	2303      	movs	r3, #3
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e00a      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d102      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e004      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b70      	cmp	r3, #112	; 0x70
 80020a2:	d101      	bne.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0207 	bic.w	r2, r3, #7
 80020b0:	4909      	ldr	r1, [pc, #36]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2300      	movs	r3, #0
 80020ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d041      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002100:	d02a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002106:	d824      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800210e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002112:	d81e      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211c:	d010      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800211e:	e018      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002120:	4b86      	ldr	r3, [pc, #536]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a85      	ldr	r2, [pc, #532]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800212c:	e015      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fabb 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800213e:	e00c      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3320      	adds	r3, #32
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fba6 	bl	8002898 <RCCEx_PLLSAI2_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	74fb      	strb	r3, [r7, #19]
      break;
 8002156:	e000      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800216e:	4973      	ldr	r1, [pc, #460]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002176:	e001      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d041      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800218c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002190:	d02a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002196:	d824      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800219c:	d008      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800219e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021a2:	d81e      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ae:	e018      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a61      	ldr	r2, [pc, #388]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021bc:	e015      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa73 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80021ca:	4603      	mov	r3, r0
 80021cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fb5e 	bl	8002898 <RCCEx_PLLSAI2_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	74fb      	strb	r3, [r7, #19]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021f0:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021fe:	494f      	ldr	r1, [pc, #316]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a0 	beq.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a40      	ldr	r2, [pc, #256]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225c:	f7fe fe06 	bl	8000e6c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe fe02 	bl	8000e6c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	74fb      	strb	r3, [r7, #19]
        break;
 8002276:	e005      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d15c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d019      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fdc1 	bl	8000e6c <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ec:	e00b      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fdbd 	bl	8000e6c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d902      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	74fb      	strb	r3, [r7, #19]
            break;
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ec      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232a:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002332:	e009      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
 8002338:	e006      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002348:	7c7b      	ldrb	r3, [r7, #17]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a9d      	ldr	r2, [pc, #628]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002366:	4b98      	ldr	r3, [pc, #608]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f023 0203 	bic.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	4994      	ldr	r1, [pc, #592]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 020c 	bic.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	498c      	ldr	r1, [pc, #560]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023aa:	4b87      	ldr	r3, [pc, #540]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4983      	ldr	r1, [pc, #524]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023cc:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	497b      	ldr	r1, [pc, #492]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	4972      	ldr	r1, [pc, #456]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002410:	4b6d      	ldr	r3, [pc, #436]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	496a      	ldr	r1, [pc, #424]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	4961      	ldr	r1, [pc, #388]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002454:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	4959      	ldr	r1, [pc, #356]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002484:	4950      	ldr	r1, [pc, #320]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	4948      	ldr	r1, [pc, #288]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	493f      	ldr	r1, [pc, #252]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d028      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fa:	d106      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e011      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002512:	d10c      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f8c8 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	491f      	ldr	r1, [pc, #124]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002558:	d106      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002564:	60d3      	str	r3, [r2, #12]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f899 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02b      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a02      	ldr	r2, [pc, #8]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e014      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f867 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02f      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800260a:	4928      	ldr	r1, [pc, #160]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800261a:	d10d      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f844 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	74bb      	strb	r3, [r7, #18]
 8002636:	e011      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3320      	adds	r3, #32
 8002646:	2102      	movs	r1, #2
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f925 	bl	8002898 <RCCEx_PLLSAI2_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800269a:	4904      	ldr	r1, [pc, #16]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b75      	ldr	r3, [pc, #468]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e2:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
       ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d047      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e044      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d018      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x86>
 8002704:	2b03      	cmp	r3, #3
 8002706:	d825      	bhi.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x62>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d009      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x74>
 8002710:	e020      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e01a      	b.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002724:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002734:	e013      	b.n	800275e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002736:	4b57      	ldr	r3, [pc, #348]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002742:	4b54      	ldr	r3, [pc, #336]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002752:	e006      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e004      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
    }

    if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276a:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	430b      	orrs	r3, r1
 8002780:	4944      	ldr	r1, [pc, #272]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17d      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800278c:	4b41      	ldr	r3, [pc, #260]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a40      	ldr	r2, [pc, #256]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fb68 	bl	8000e6c <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe fb64 	bl	8000e6c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
        break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ef      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d160      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d111      	bne.n	80027f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	0912      	lsrs	r2, r2, #4
 80027e4:	0452      	lsls	r2, r2, #17
 80027e6:	430a      	orrs	r2, r1
 80027e8:	492a      	ldr	r1, [pc, #168]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	610b      	str	r3, [r1, #16]
 80027ee:	e027      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d112      	bne.n	800281c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6892      	ldr	r2, [r2, #8]
 8002806:	0211      	lsls	r1, r2, #8
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6912      	ldr	r2, [r2, #16]
 800280c:	0852      	lsrs	r2, r2, #1
 800280e:	3a01      	subs	r2, #1
 8002810:	0552      	lsls	r2, r2, #21
 8002812:	430a      	orrs	r2, r1
 8002814:	491f      	ldr	r1, [pc, #124]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	610b      	str	r3, [r1, #16]
 800281a:	e011      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6952      	ldr	r2, [r2, #20]
 8002832:	0852      	lsrs	r2, r2, #1
 8002834:	3a01      	subs	r2, #1
 8002836:	0652      	lsls	r2, r2, #25
 8002838:	430a      	orrs	r2, r1
 800283a:	4916      	ldr	r1, [pc, #88]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a13      	ldr	r2, [pc, #76]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800284a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fb0e 	bl	8000e6c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002854:	f7fe fb0a 	bl	8000e6c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
          break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ef      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4904      	ldr	r1, [pc, #16]	; (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000

08002898 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a6:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10d      	bne.n	80028de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
       ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
       ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d047      	beq.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	e044      	b.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d018      	beq.n	800291e <RCCEx_PLLSAI2_Config+0x86>
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d825      	bhi.n	800293c <RCCEx_PLLSAI2_Config+0xa4>
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d002      	beq.n	80028fa <RCCEx_PLLSAI2_Config+0x62>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d009      	beq.n	800290c <RCCEx_PLLSAI2_Config+0x74>
 80028f8:	e020      	b.n	800293c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028fa:	4b55      	ldr	r3, [pc, #340]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11d      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290a:	e01a      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d116      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e013      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291e:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800293a:	e006      	b.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e004      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294a:	bf00      	nop
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	430b      	orrs	r3, r1
 8002968:	4939      	ldr	r1, [pc, #228]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d167      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fa74 	bl	8000e6c <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002988:	f7fe fa70 	bl	8000e6c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
        break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ef      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d14a      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	0211      	lsls	r1, r2, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	0912      	lsrs	r2, r2, #4
 80029cc:	0452      	lsls	r2, r2, #17
 80029ce:	430a      	orrs	r2, r1
 80029d0:	491f      	ldr	r1, [pc, #124]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	614b      	str	r3, [r1, #20]
 80029d6:	e011      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6892      	ldr	r2, [r2, #8]
 80029e8:	0211      	lsls	r1, r2, #8
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6912      	ldr	r2, [r2, #16]
 80029ee:	0852      	lsrs	r2, r2, #1
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0652      	lsls	r2, r2, #25
 80029f4:	430a      	orrs	r2, r1
 80029f6:	4916      	ldr	r1, [pc, #88]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fa30 	bl	8000e6c <HAL_GetTick>
 8002a0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a0e:	e009      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a10:	f7fe fa2c 	bl	8000e6c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	73fb      	strb	r3, [r7, #15]
          break;
 8002a22:	e005      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ef      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4904      	ldr	r1, [pc, #16]	; (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e095      	b.n	8002b92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a76:	d009      	beq.n	8002a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
 8002a7e:	e005      	b.n	8002a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd ffd0 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002acc:	d902      	bls.n	8002ad4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e002      	b.n	8002ada <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ae2:	d007      	beq.n	8002af4 <HAL_SPI_Init+0xa0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aec:	d002      	beq.n	8002af4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	ea42 0103 	orr.w	r1, r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	f003 0204 	and.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b088      	sub	sp, #32
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_SPI_Transmit+0x22>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e158      	b.n	8002e6e <HAL_SPI_Transmit+0x2d4>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc4:	f7fe f952 	bl	8000e6c <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bde:	e13d      	b.n	8002e5c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Transmit+0x52>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf0:	e134      	b.n	8002e5c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3c:	d10f      	bne.n	8002c5e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d007      	beq.n	8002c7c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c84:	d94b      	bls.n	8002d1e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Transmit+0xfa>
 8002c8e:	8afb      	ldrh	r3, [r7, #22]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d13e      	bne.n	8002d12 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cb8:	e02b      	b.n	8002d12 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d112      	bne.n	8002cee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cec:	e011      	b.n	8002d12 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cee:	f7fe f8bd 	bl	8000e6c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_Transmit+0x16c>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_Transmit+0x172>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d10:	e0a4      	b.n	8002e5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ce      	bne.n	8002cba <HAL_SPI_Transmit+0x120>
 8002d1c:	e07c      	b.n	8002e18 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_SPI_Transmit+0x192>
 8002d26:	8afb      	ldrh	r3, [r7, #22]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d170      	bne.n	8002e0e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d912      	bls.n	8002d5c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	881a      	ldrh	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b02      	subs	r3, #2
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d5a:	e058      	b.n	8002e0e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d82:	e044      	b.n	8002e0e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d12b      	bne.n	8002dea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d912      	bls.n	8002dc2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	1c9a      	adds	r2, r3, #2
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b02      	subs	r3, #2
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc0:	e025      	b.n	8002e0e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002de8:	e011      	b.n	8002e0e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dea:	f7fe f83f 	bl	8000e6c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d803      	bhi.n	8002e02 <HAL_SPI_Transmit+0x268>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d102      	bne.n	8002e08 <HAL_SPI_Transmit+0x26e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e0c:	e026      	b.n	8002e5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1b5      	bne.n	8002d84 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fb57 	bl	80034d0 <SPI_EndRxTxTransaction>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e000      	b.n	8002e5c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x26>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e1fb      	b.n	8003294 <HAL_SPI_TransmitReceive+0x41e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea4:	f7fd ffe2 	bl	8000e6c <HAL_GetTick>
 8002ea8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ec0:	7efb      	ldrb	r3, [r7, #27]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_SPI_TransmitReceive+0x6e>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ecc:	d106      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x66>
 8002ed6:	7efb      	ldrb	r3, [r7, #27]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d003      	beq.n	8002ee4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ee2:	e1cd      	b.n	8003280 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x80>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x80>
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002efc:	e1c0      	b.n	8003280 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d003      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	887a      	ldrh	r2, [r7, #2]
 8002f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	887a      	ldrh	r2, [r7, #2]
 8002f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	887a      	ldrh	r2, [r7, #2]
 8002f3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f54:	d802      	bhi.n	8002f5c <HAL_SPI_TransmitReceive+0xe6>
 8002f56:	8a3b      	ldrh	r3, [r7, #16]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d908      	bls.n	8002f6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	e007      	b.n	8002f7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d007      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa4:	d97c      	bls.n	80030a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x13e>
 8002fae:	8a7b      	ldrh	r3, [r7, #18]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d169      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	1c9a      	adds	r2, r3, #2
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd8:	e056      	b.n	8003088 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11b      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x1aa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x1aa>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	1c9a      	adds	r2, r3, #2
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d11c      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x1f2>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	b292      	uxth	r2, r2
 8003046:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	1c9a      	adds	r2, r3, #2
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003068:	f7fd ff00 	bl	8000e6c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003074:	429a      	cmp	r2, r3
 8003076:	d807      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0x212>
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d003      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003086:	e0fb      	b.n	8003280 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1a3      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x164>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d19d      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x164>
 800309e:	e0df      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x23a>
 80030a8:	8a7b      	ldrh	r3, [r7, #18]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 80cb 	bne.w	8003246 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d912      	bls.n	80030e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b02      	subs	r3, #2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030de:	e0b2      	b.n	8003246 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	e09e      	b.n	8003246 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d134      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x30a>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02f      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x30a>
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d12c      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d912      	bls.n	8003156 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b02      	subs	r3, #2
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003154:	e012      	b.n	800317c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d148      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x3aa>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d042      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d923      	bls.n	80031ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	b292      	uxth	r2, r2
 80031b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b02      	subs	r3, #2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d81f      	bhi.n	800321c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e016      	b.n	800321c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f103 020c 	add.w	r2, r3, #12
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800321c:	2301      	movs	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003220:	f7fd fe24 	bl	8000e6c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322c:	429a      	cmp	r2, r3
 800322e:	d803      	bhi.n	8003238 <HAL_SPI_TransmitReceive+0x3c2>
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d102      	bne.n	800323e <HAL_SPI_TransmitReceive+0x3c8>
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003244:	e01c      	b.n	8003280 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af5b 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x292>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	f47f af54 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f933 	bl	80034d0 <SPI_EndRxTxTransaction>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
 800327c:	e000      	b.n	8003280 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800327e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003294:	4618      	mov	r0, r3
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032ac:	f7fd fdde 	bl	8000e6c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032bc:	f7fd fdd6 	bl	8000e6c <HAL_GetTick>
 80032c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	015b      	lsls	r3, r3, #5
 80032c8:	0d1b      	lsrs	r3, r3, #20
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d2:	e054      	b.n	800337e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d050      	beq.n	800337e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032dc:	f7fd fdc6 	bl	8000e6c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d902      	bls.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d13d      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d111      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003314:	d004      	beq.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d107      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d10f      	bne.n	800335a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e017      	b.n	800339e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3b01      	subs	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d19b      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000040 	.word	0x20000040

080033ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033ba:	f7fd fd57 	bl	8000e6c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033ca:	f7fd fd4f 	bl	8000e6c <HAL_GetTick>
 80033ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033d0:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00da      	lsls	r2, r3, #3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	0d1b      	lsrs	r3, r3, #20
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80033e8:	e062      	b.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033f0:	d109      	bne.n	8003406 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003404:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d050      	beq.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800340e:	f7fd fd2d 	bl	8000e6c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	429a      	cmp	r2, r3
 800341c:	d902      	bls.n	8003424 <SPI_WaitFifoStateUntilTimeout+0x78>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13d      	bne.n	80034a0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003432:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343c:	d111      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003446:	d004      	beq.n	8003452 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d107      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003460:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	d10f      	bne.n	800348c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800348a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e010      	b.n	80034c2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d194      	bne.n	80033ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000040 	.word	0x20000040

080034d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ff5f 	bl	80033ac <SPI_WaitFifoStateUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e027      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff fec4 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e014      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff38 	bl	80033ac <SPI_WaitFifoStateUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e000      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e040      	b.n	80035f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd faa8 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8c0 	bl	8003720 <UART_SetConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e022      	b.n	80035f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb3e 	bl	8003c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fbc5 	bl	8003d78 <UART_CheckIdleState>
 80035ee:	4603      	mov	r3, r0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800360c:	2b20      	cmp	r3, #32
 800360e:	f040 8082 	bne.w	8003716 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_UART_Transmit+0x26>
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07a      	b.n	8003718 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_UART_Transmit+0x38>
 800362c:	2302      	movs	r3, #2
 800362e:	e073      	b.n	8003718 <HAL_UART_Transmit+0x120>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2221      	movs	r2, #33	; 0x21
 8003644:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003646:	f7fd fc11 	bl	8000e6c <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d108      	bne.n	8003678 <HAL_UART_Transmit+0x80>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003688:	e02d      	b.n	80036e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fbb8 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e039      	b.n	8003718 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b6:	b292      	uxth	r2, r2
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3302      	adds	r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e008      	b.n	80036d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	b292      	uxth	r2, r2
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3301      	adds	r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1cb      	bne.n	800368a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2140      	movs	r1, #64	; 0x40
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fb84 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e005      	b.n	8003718 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bad      	ldr	r3, [pc, #692]	; (8003a00 <UART_SetConfig+0x2e0>)
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	69f9      	ldr	r1, [r7, #28]
 8003754:	430b      	orrs	r3, r1
 8003756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4aa2      	ldr	r2, [pc, #648]	; (8003a04 <UART_SetConfig+0x2e4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	4313      	orrs	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a99      	ldr	r2, [pc, #612]	; (8003a08 <UART_SetConfig+0x2e8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d121      	bne.n	80037ea <UART_SetConfig+0xca>
 80037a6:	4b99      	ldr	r3, [pc, #612]	; (8003a0c <UART_SetConfig+0x2ec>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d817      	bhi.n	80037e4 <UART_SetConfig+0xc4>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x9c>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037d3 	.word	0x080037d3
 80037c8:	080037df 	.word	0x080037df
 80037cc:	2301      	movs	r3, #1
 80037ce:	76fb      	strb	r3, [r7, #27]
 80037d0:	e0e7      	b.n	80039a2 <UART_SetConfig+0x282>
 80037d2:	2302      	movs	r3, #2
 80037d4:	76fb      	strb	r3, [r7, #27]
 80037d6:	e0e4      	b.n	80039a2 <UART_SetConfig+0x282>
 80037d8:	2304      	movs	r3, #4
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e0e1      	b.n	80039a2 <UART_SetConfig+0x282>
 80037de:	2308      	movs	r3, #8
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e0de      	b.n	80039a2 <UART_SetConfig+0x282>
 80037e4:	2310      	movs	r3, #16
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e0db      	b.n	80039a2 <UART_SetConfig+0x282>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a88      	ldr	r2, [pc, #544]	; (8003a10 <UART_SetConfig+0x2f0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d132      	bne.n	800385a <UART_SetConfig+0x13a>
 80037f4:	4b85      	ldr	r3, [pc, #532]	; (8003a0c <UART_SetConfig+0x2ec>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d828      	bhi.n	8003854 <UART_SetConfig+0x134>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0xe8>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003855 	.word	0x08003855
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	08003849 	.word	0x08003849
 800381c:	08003855 	.word	0x08003855
 8003820:	08003855 	.word	0x08003855
 8003824:	08003855 	.word	0x08003855
 8003828:	08003843 	.word	0x08003843
 800382c:	08003855 	.word	0x08003855
 8003830:	08003855 	.word	0x08003855
 8003834:	08003855 	.word	0x08003855
 8003838:	0800384f 	.word	0x0800384f
 800383c:	2300      	movs	r3, #0
 800383e:	76fb      	strb	r3, [r7, #27]
 8003840:	e0af      	b.n	80039a2 <UART_SetConfig+0x282>
 8003842:	2302      	movs	r3, #2
 8003844:	76fb      	strb	r3, [r7, #27]
 8003846:	e0ac      	b.n	80039a2 <UART_SetConfig+0x282>
 8003848:	2304      	movs	r3, #4
 800384a:	76fb      	strb	r3, [r7, #27]
 800384c:	e0a9      	b.n	80039a2 <UART_SetConfig+0x282>
 800384e:	2308      	movs	r3, #8
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	e0a6      	b.n	80039a2 <UART_SetConfig+0x282>
 8003854:	2310      	movs	r3, #16
 8003856:	76fb      	strb	r3, [r7, #27]
 8003858:	e0a3      	b.n	80039a2 <UART_SetConfig+0x282>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6d      	ldr	r2, [pc, #436]	; (8003a14 <UART_SetConfig+0x2f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d120      	bne.n	80038a6 <UART_SetConfig+0x186>
 8003864:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <UART_SetConfig+0x2ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	d013      	beq.n	800389a <UART_SetConfig+0x17a>
 8003872:	2b30      	cmp	r3, #48	; 0x30
 8003874:	d814      	bhi.n	80038a0 <UART_SetConfig+0x180>
 8003876:	2b20      	cmp	r3, #32
 8003878:	d009      	beq.n	800388e <UART_SetConfig+0x16e>
 800387a:	2b20      	cmp	r3, #32
 800387c:	d810      	bhi.n	80038a0 <UART_SetConfig+0x180>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <UART_SetConfig+0x168>
 8003882:	2b10      	cmp	r3, #16
 8003884:	d006      	beq.n	8003894 <UART_SetConfig+0x174>
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x180>
 8003888:	2300      	movs	r3, #0
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	e089      	b.n	80039a2 <UART_SetConfig+0x282>
 800388e:	2302      	movs	r3, #2
 8003890:	76fb      	strb	r3, [r7, #27]
 8003892:	e086      	b.n	80039a2 <UART_SetConfig+0x282>
 8003894:	2304      	movs	r3, #4
 8003896:	76fb      	strb	r3, [r7, #27]
 8003898:	e083      	b.n	80039a2 <UART_SetConfig+0x282>
 800389a:	2308      	movs	r3, #8
 800389c:	76fb      	strb	r3, [r7, #27]
 800389e:	e080      	b.n	80039a2 <UART_SetConfig+0x282>
 80038a0:	2310      	movs	r3, #16
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	e07d      	b.n	80039a2 <UART_SetConfig+0x282>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <UART_SetConfig+0x2f8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d120      	bne.n	80038f2 <UART_SetConfig+0x1d2>
 80038b0:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <UART_SetConfig+0x2ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ba:	2bc0      	cmp	r3, #192	; 0xc0
 80038bc:	d013      	beq.n	80038e6 <UART_SetConfig+0x1c6>
 80038be:	2bc0      	cmp	r3, #192	; 0xc0
 80038c0:	d814      	bhi.n	80038ec <UART_SetConfig+0x1cc>
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d009      	beq.n	80038da <UART_SetConfig+0x1ba>
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d810      	bhi.n	80038ec <UART_SetConfig+0x1cc>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <UART_SetConfig+0x1b4>
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d006      	beq.n	80038e0 <UART_SetConfig+0x1c0>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x1cc>
 80038d4:	2300      	movs	r3, #0
 80038d6:	76fb      	strb	r3, [r7, #27]
 80038d8:	e063      	b.n	80039a2 <UART_SetConfig+0x282>
 80038da:	2302      	movs	r3, #2
 80038dc:	76fb      	strb	r3, [r7, #27]
 80038de:	e060      	b.n	80039a2 <UART_SetConfig+0x282>
 80038e0:	2304      	movs	r3, #4
 80038e2:	76fb      	strb	r3, [r7, #27]
 80038e4:	e05d      	b.n	80039a2 <UART_SetConfig+0x282>
 80038e6:	2308      	movs	r3, #8
 80038e8:	76fb      	strb	r3, [r7, #27]
 80038ea:	e05a      	b.n	80039a2 <UART_SetConfig+0x282>
 80038ec:	2310      	movs	r3, #16
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e057      	b.n	80039a2 <UART_SetConfig+0x282>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <UART_SetConfig+0x2fc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d125      	bne.n	8003948 <UART_SetConfig+0x228>
 80038fc:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <UART_SetConfig+0x2ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390a:	d017      	beq.n	800393c <UART_SetConfig+0x21c>
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d817      	bhi.n	8003942 <UART_SetConfig+0x222>
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d00b      	beq.n	8003930 <UART_SetConfig+0x210>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d811      	bhi.n	8003942 <UART_SetConfig+0x222>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <UART_SetConfig+0x20a>
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x216>
 8003928:	e00b      	b.n	8003942 <UART_SetConfig+0x222>
 800392a:	2300      	movs	r3, #0
 800392c:	76fb      	strb	r3, [r7, #27]
 800392e:	e038      	b.n	80039a2 <UART_SetConfig+0x282>
 8003930:	2302      	movs	r3, #2
 8003932:	76fb      	strb	r3, [r7, #27]
 8003934:	e035      	b.n	80039a2 <UART_SetConfig+0x282>
 8003936:	2304      	movs	r3, #4
 8003938:	76fb      	strb	r3, [r7, #27]
 800393a:	e032      	b.n	80039a2 <UART_SetConfig+0x282>
 800393c:	2308      	movs	r3, #8
 800393e:	76fb      	strb	r3, [r7, #27]
 8003940:	e02f      	b.n	80039a2 <UART_SetConfig+0x282>
 8003942:	2310      	movs	r3, #16
 8003944:	76fb      	strb	r3, [r7, #27]
 8003946:	e02c      	b.n	80039a2 <UART_SetConfig+0x282>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <UART_SetConfig+0x2e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d125      	bne.n	800399e <UART_SetConfig+0x27e>
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <UART_SetConfig+0x2ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800395c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003960:	d017      	beq.n	8003992 <UART_SetConfig+0x272>
 8003962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003966:	d817      	bhi.n	8003998 <UART_SetConfig+0x278>
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d00b      	beq.n	8003986 <UART_SetConfig+0x266>
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d811      	bhi.n	8003998 <UART_SetConfig+0x278>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <UART_SetConfig+0x260>
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	d006      	beq.n	800398c <UART_SetConfig+0x26c>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x278>
 8003980:	2300      	movs	r3, #0
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	e00d      	b.n	80039a2 <UART_SetConfig+0x282>
 8003986:	2302      	movs	r3, #2
 8003988:	76fb      	strb	r3, [r7, #27]
 800398a:	e00a      	b.n	80039a2 <UART_SetConfig+0x282>
 800398c:	2304      	movs	r3, #4
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e007      	b.n	80039a2 <UART_SetConfig+0x282>
 8003992:	2308      	movs	r3, #8
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e004      	b.n	80039a2 <UART_SetConfig+0x282>
 8003998:	2310      	movs	r3, #16
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e001      	b.n	80039a2 <UART_SetConfig+0x282>
 800399e:	2310      	movs	r3, #16
 80039a0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <UART_SetConfig+0x2e4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f040 8087 	bne.w	8003abc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ae:	7efb      	ldrb	r3, [r7, #27]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d837      	bhi.n	8003a24 <UART_SetConfig+0x304>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x29c>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	08003a25 	.word	0x08003a25
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	080039ef 	.word	0x080039ef
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a25 	.word	0x08003a25
 80039dc:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe faf0 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 80039e4:	6178      	str	r0, [r7, #20]
        break;
 80039e6:	e022      	b.n	8003a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <UART_SetConfig+0x300>)
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e01f      	b.n	8003a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fa51 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80039f2:	6178      	str	r0, [r7, #20]
        break;
 80039f4:	e01b      	b.n	8003a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	617b      	str	r3, [r7, #20]
        break;
 80039fc:	e017      	b.n	8003a2e <UART_SetConfig+0x30e>
 80039fe:	bf00      	nop
 8003a00:	efff69f3 	.word	0xefff69f3
 8003a04:	40008000 	.word	0x40008000
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40004400 	.word	0x40004400
 8003a14:	40004800 	.word	0x40004800
 8003a18:	40004c00 	.word	0x40004c00
 8003a1c:	40005000 	.word	0x40005000
 8003a20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	76bb      	strb	r3, [r7, #26]
        break;
 8003a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80f1 	beq.w	8003c18 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d305      	bcc.n	8003a52 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d902      	bls.n	8003a58 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	76bb      	strb	r3, [r7, #26]
 8003a56:	e0df      	b.n	8003c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	020b      	lsls	r3, r1, #8
 8003a6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a6e:	0202      	lsls	r2, r0, #8
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6849      	ldr	r1, [r1, #4]
 8003a74:	0849      	lsrs	r1, r1, #1
 8003a76:	4608      	mov	r0, r1
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	1814      	adds	r4, r2, r0
 8003a7e:	eb43 0501 	adc.w	r5, r3, r1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	f7fc fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa2:	d308      	bcc.n	8003ab6 <UART_SetConfig+0x396>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aaa:	d204      	bcs.n	8003ab6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	e0b0      	b.n	8003c18 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	76bb      	strb	r3, [r7, #26]
 8003aba:	e0ad      	b.n	8003c18 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac4:	d15c      	bne.n	8003b80 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ac6:	7efb      	ldrb	r3, [r7, #27]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d828      	bhi.n	8003b1e <UART_SetConfig+0x3fe>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x3b4>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b1f 	.word	0x08003b1f
 8003ae4:	08003b0f 	.word	0x08003b0f
 8003ae8:	08003b1f 	.word	0x08003b1f
 8003aec:	08003b1f 	.word	0x08003b1f
 8003af0:	08003b1f 	.word	0x08003b1f
 8003af4:	08003b17 	.word	0x08003b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe fa64 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003afc:	6178      	str	r0, [r7, #20]
        break;
 8003afe:	e013      	b.n	8003b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe fa76 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003b04:	6178      	str	r0, [r7, #20]
        break;
 8003b06:	e00f      	b.n	8003b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b08:	4b49      	ldr	r3, [pc, #292]	; (8003c30 <UART_SetConfig+0x510>)
 8003b0a:	617b      	str	r3, [r7, #20]
        break;
 8003b0c:	e00c      	b.n	8003b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0e:	f7fe f9c1 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8003b12:	6178      	str	r0, [r7, #20]
        break;
 8003b14:	e008      	b.n	8003b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	617b      	str	r3, [r7, #20]
        break;
 8003b1c:	e004      	b.n	8003b28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	76bb      	strb	r3, [r7, #26]
        break;
 8003b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d074      	beq.n	8003c18 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005a      	lsls	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d916      	bls.n	8003b7a <UART_SetConfig+0x45a>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b52:	d212      	bcs.n	8003b7a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	89fb      	ldrh	r3, [r7, #14]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	89fa      	ldrh	r2, [r7, #14]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e04e      	b.n	8003c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	76bb      	strb	r3, [r7, #26]
 8003b7e:	e04b      	b.n	8003c18 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b80:	7efb      	ldrb	r3, [r7, #27]
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d827      	bhi.n	8003bd6 <UART_SetConfig+0x4b6>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0x46c>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc7 	.word	0x08003bc7
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f7fe fa08 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	6178      	str	r0, [r7, #20]
        break;
 8003bb6:	e013      	b.n	8003be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe fa1a 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	6178      	str	r0, [r7, #20]
        break;
 8003bbe:	e00f      	b.n	8003be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <UART_SetConfig+0x510>)
 8003bc2:	617b      	str	r3, [r7, #20]
        break;
 8003bc4:	e00c      	b.n	8003be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe f965 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8003bca:	6178      	str	r0, [r7, #20]
        break;
 8003bcc:	e008      	b.n	8003be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	617b      	str	r3, [r7, #20]
        break;
 8003bd4:	e004      	b.n	8003be0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	76bb      	strb	r3, [r7, #26]
        break;
 8003bde:	bf00      	nop
    }

    if (pclk != 0U)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d018      	beq.n	8003c18 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	085a      	lsrs	r2, r3, #1
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d908      	bls.n	8003c14 <UART_SetConfig+0x4f4>
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d204      	bcs.n	8003c14 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e001      	b.n	8003c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c24:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00f42400 	.word	0x00f42400

08003c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d10a      	bne.n	8003d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d88:	f7fd f870 	bl	8000e6c <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10e      	bne.n	8003dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f82d 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e023      	b.n	8003e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d10e      	bne.n	8003de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f817 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00d      	b.n	8003e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e05e      	b.n	8003eda <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d05a      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fd f822 	bl	8000e6c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11b      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e043      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02c      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d124      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e98:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ea8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00f      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d091      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e03c      	b.n	8003f8e <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc fe55 	bl	8000bd8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f85c 	bl	8004004 <USART_SetConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e01b      	b.n	8003f8e <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f64:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f74:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f992 	bl	80042b0 <USART_CheckIdleState>
 8003f8c:	4603      	mov	r3, r0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003fa6:	e018      	b.n	8003fda <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d014      	beq.n	8003fda <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb0:	f7fc ff5c 	bl	8000e6c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d302      	bcc.n	8003fc6 <USART_WaitOnFlagUntilTimeout+0x30>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00f      	b.n	8003ffa <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d0d7      	beq.n	8003fa8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004028:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b9a      	ldr	r3, [pc, #616]	; (800429c <USART_SetConfig+0x298>)
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	6979      	ldr	r1, [r7, #20]
 800403a:	430b      	orrs	r3, r1
 800403c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800403e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004042:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4313      	orrs	r3, r2
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a87      	ldr	r2, [pc, #540]	; (80042a0 <USART_SetConfig+0x29c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d121      	bne.n	80040ca <USART_SetConfig+0xc6>
 8004086:	4b87      	ldr	r3, [pc, #540]	; (80042a4 <USART_SetConfig+0x2a0>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d817      	bhi.n	80040c4 <USART_SetConfig+0xc0>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <USART_SetConfig+0x98>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040b9 	.word	0x080040b9
 80040a4:	080040b3 	.word	0x080040b3
 80040a8:	080040bf 	.word	0x080040bf
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e06b      	b.n	800418a <USART_SetConfig+0x186>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e068      	b.n	800418a <USART_SetConfig+0x186>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e065      	b.n	800418a <USART_SetConfig+0x186>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e062      	b.n	800418a <USART_SetConfig+0x186>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e05f      	b.n	800418a <USART_SetConfig+0x186>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <USART_SetConfig+0x2a4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d132      	bne.n	800413a <USART_SetConfig+0x136>
 80040d4:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <USART_SetConfig+0x2a0>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d828      	bhi.n	8004134 <USART_SetConfig+0x130>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <USART_SetConfig+0xe4>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004135 	.word	0x08004135
 80040f0:	08004135 	.word	0x08004135
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004129 	.word	0x08004129
 80040fc:	08004135 	.word	0x08004135
 8004100:	08004135 	.word	0x08004135
 8004104:	08004135 	.word	0x08004135
 8004108:	08004123 	.word	0x08004123
 800410c:	08004135 	.word	0x08004135
 8004110:	08004135 	.word	0x08004135
 8004114:	08004135 	.word	0x08004135
 8004118:	0800412f 	.word	0x0800412f
 800411c:	2300      	movs	r3, #0
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e033      	b.n	800418a <USART_SetConfig+0x186>
 8004122:	2302      	movs	r3, #2
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e030      	b.n	800418a <USART_SetConfig+0x186>
 8004128:	2304      	movs	r3, #4
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e02d      	b.n	800418a <USART_SetConfig+0x186>
 800412e:	2308      	movs	r3, #8
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e02a      	b.n	800418a <USART_SetConfig+0x186>
 8004134:	2310      	movs	r3, #16
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e027      	b.n	800418a <USART_SetConfig+0x186>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <USART_SetConfig+0x2a8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d120      	bne.n	8004186 <USART_SetConfig+0x182>
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <USART_SetConfig+0x2a0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d013      	beq.n	800417a <USART_SetConfig+0x176>
 8004152:	2b30      	cmp	r3, #48	; 0x30
 8004154:	d814      	bhi.n	8004180 <USART_SetConfig+0x17c>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d009      	beq.n	800416e <USART_SetConfig+0x16a>
 800415a:	2b20      	cmp	r3, #32
 800415c:	d810      	bhi.n	8004180 <USART_SetConfig+0x17c>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <USART_SetConfig+0x164>
 8004162:	2b10      	cmp	r3, #16
 8004164:	d006      	beq.n	8004174 <USART_SetConfig+0x170>
 8004166:	e00b      	b.n	8004180 <USART_SetConfig+0x17c>
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e00d      	b.n	800418a <USART_SetConfig+0x186>
 800416e:	2302      	movs	r3, #2
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e00a      	b.n	800418a <USART_SetConfig+0x186>
 8004174:	2304      	movs	r3, #4
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e007      	b.n	800418a <USART_SetConfig+0x186>
 800417a:	2308      	movs	r3, #8
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e004      	b.n	800418a <USART_SetConfig+0x186>
 8004180:	2310      	movs	r3, #16
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e001      	b.n	800418a <USART_SetConfig+0x186>
 8004186:	2310      	movs	r3, #16
 8004188:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d85a      	bhi.n	8004246 <USART_SetConfig+0x242>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <USART_SetConfig+0x194>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	08004247 	.word	0x08004247
 80041a8:	08004213 	.word	0x08004213
 80041ac:	08004247 	.word	0x08004247
 80041b0:	08004247 	.word	0x08004247
 80041b4:	08004247 	.word	0x08004247
 80041b8:	08004231 	.word	0x08004231
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fd ff02 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 80041c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	005a      	lsls	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80041d8:	e038      	b.n	800424c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80041da:	f7fd ff09 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 80041de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	005a      	lsls	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	441a      	add	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80041f6:	e029      	b.n	800424c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004202:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6852      	ldr	r2, [r2, #4]
 800420a:	fbb3 f3f2 	udiv	r3, r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004210:	e01c      	b.n	800424c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fd fe3f 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8004216:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	005a      	lsls	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800422e:	e00d      	b.n	800424c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004244:	e002      	b.n	800424c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	77bb      	strb	r3, [r7, #30]
      break;
 800424a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d916      	bls.n	8004280 <USART_SetConfig+0x27c>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d212      	bcs.n	8004280 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f023 030f 	bic.w	r3, r3, #15
 8004262:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	b29a      	uxth	r2, r3
 8004270:	89fb      	ldrh	r3, [r7, #14]
 8004272:	4313      	orrs	r3, r2
 8004274:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	89fa      	ldrh	r2, [r7, #14]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	e001      	b.n	8004284 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004290:	7fbb      	ldrb	r3, [r7, #30]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	efff69f3 	.word	0xefff69f3
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40004400 	.word	0x40004400
 80042ac:	40004800 	.word	0x40004800

080042b0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042be:	f7fc fdd5 	bl	8000e6c <HAL_GetTick>
 80042c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d10e      	bne.n	80042f0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80042d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe58 	bl	8003f96 <USART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e01e      	b.n	800432e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d10e      	bne.n	800431c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80042fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fe42 	bl	8003f96 <USART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e008      	b.n	800432e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	4d0d      	ldr	r5, [pc, #52]	; (8004370 <__libc_init_array+0x38>)
 800433c:	4c0d      	ldr	r4, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 800433e:	1b64      	subs	r4, r4, r5
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	2600      	movs	r6, #0
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	4d0b      	ldr	r5, [pc, #44]	; (8004378 <__libc_init_array+0x40>)
 800434a:	4c0c      	ldr	r4, [pc, #48]	; (800437c <__libc_init_array+0x44>)
 800434c:	f000 f820 	bl	8004390 <_init>
 8004350:	1b64      	subs	r4, r4, r5
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	2600      	movs	r6, #0
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	f855 3b04 	ldr.w	r3, [r5], #4
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	08004400 	.word	0x08004400
 8004374:	08004400 	.word	0x08004400
 8004378:	08004400 	.word	0x08004400
 800437c:	08004404 	.word	0x08004404

08004380 <memset>:
 8004380:	4402      	add	r2, r0
 8004382:	4603      	mov	r3, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	d100      	bne.n	800438a <memset+0xa>
 8004388:	4770      	bx	lr
 800438a:	f803 1b01 	strb.w	r1, [r3], #1
 800438e:	e7f9      	b.n	8004384 <memset+0x4>

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
